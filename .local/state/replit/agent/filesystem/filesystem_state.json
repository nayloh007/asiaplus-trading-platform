{"file_contents":{"create-admin-memory.js":{"content":"const { storage } = require('./server/storage');\nconst bcrypt = require('bcryptjs');\n\nasync function hashPassword(password) {\n  const salt = await bcrypt.genSalt(10);\n  return bcrypt.hash(password, salt);\n}\n\nasync function createAdmin() {\n  try {\n    const hashedPassword = await hashPassword('admin123');\n    \n    const adminUser = {\n      username: 'admin',\n      password: hashedPassword,\n      email: 'admin@example.com',\n      role: 'admin',\n      balance: '1000000',\n    };\n    \n    const newUser = await storage.createUser(adminUser);\n    console.log('Admin user created successfully:', newUser);\n  } catch (error) {\n    console.error('Error creating admin user:', error);\n  }\n}\n\ncreateAdmin();","size_bytes":701},"create-admin.js":{"content":"// Use Node.js native crypto\nimport crypto from 'crypto';\n// Use ESM for database connection\nimport { Pool, neonConfig } from '@neondatabase/serverless';\nimport ws from 'ws';\n\nneonConfig.webSocketConstructor = ws;\n\n// Hash password using crypto\nfunction hashPassword(password) {\n  const salt = crypto.randomBytes(16).toString('hex');\n  const hash = crypto.scryptSync(password, salt, 64).toString('hex');\n  return `${hash}.${salt}`;\n}\n\n// Get database connection from environment\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL is not set\");\n}\n\nconst pool = new Pool({ connectionString: process.env.DATABASE_URL });\n\nasync function createAdmin() {\n  try {\n    // First check if admin already exists\n    const checkQuery = 'SELECT * FROM users WHERE username = $1';\n    const checkResult = await pool.query(checkQuery, ['admin']);\n    \n    if (checkResult.rows.length > 0) {\n      console.log('Admin user already exists');\n      return;\n    }\n    \n    // Create admin user\n    const adminPassword = hashPassword('admin123');\n    \n    const query = `\n      INSERT INTO users (username, email, password, role, balance)\n      VALUES ($1, $2, $3, $4, $5)\n      RETURNING *\n    `;\n    \n    const values = ['admin', 'admin@bitkub.com', adminPassword, 'admin', '1000000'];\n    const result = await pool.query(query, values);\n    \n    console.log('Admin user created successfully:', result.rows[0]);\n  } catch (error) {\n    console.error('Error creating admin user:', error);\n  } finally {\n    await pool.end();\n  }\n}\n\ncreateAdmin();","size_bytes":1540},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a cryptocurrency trading platform built as a full-stack web application. The system allows users to trade cryptocurrency binary options with \"up\" or \"down\" predictions over short time periods (60s, 120s, 300s). The platform includes user authentication, wallet management, bank account integration, and comprehensive admin controls for managing users, transactions, and trades.\n\nThe application is designed as a mobile-first trading platform with a responsive design that works on both mobile and desktop devices. It features real-time cryptocurrency price data, trading functionality with predetermined profit percentages, and a complete transaction management system.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Library**: Shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom theming support (light/dark modes)\n- **State Management**: TanStack Query (React Query) for server state and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation\n- **Mobile-First Design**: Responsive layout with dedicated mobile container components\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Authentication**: Passport.js with local strategy and session-based auth\n- **Password Hashing**: bcryptjs for secure password storage\n- **Session Management**: Express sessions with memory store\n- **API Design**: RESTful API endpoints with JSON responses\n- **File Upload**: Multer for handling payment proof uploads\n\n## Data Storage Solutions\n- **Primary Storage**: File-based JSON storage system as fallback\n- **Database ORM**: Drizzle ORM configured for PostgreSQL\n- **Schema Management**: Shared TypeScript schemas between client and server\n- **Session Storage**: In-memory session store with cleanup mechanisms\n- **File Storage**: Local file system for transaction receipts and user uploads\n\nThe application uses a dual storage approach - it's configured to use PostgreSQL with Drizzle ORM but falls back to a file-based storage system using JSON files for development and situations where database connectivity is unavailable.\n\n## Authentication and Authorization\n- **Strategy**: Session-based authentication using Passport.js\n- **User Roles**: Role-based access control (admin/user)\n- **Protected Routes**: Client-side route protection with authentication checks\n- **Password Security**: bcrypt hashing with salt rounds\n- **Session Security**: Secure session configuration with appropriate timeouts\n\n## External Dependencies\n\n### Cryptocurrency Data\n- **CoinGecko API**: Real-time cryptocurrency market data and pricing\n- **Rate Limiting**: Exponential backoff retry mechanism for API calls\n- **Data Caching**: Client-side caching to reduce API requests\n- **Supported Currencies**: Top 20 cryptocurrencies by market cap\n\n### Payment Processing\n- **Stripe Integration**: Payment processing capabilities (configured but not actively used)\n- **Bank Transfer Support**: Manual bank transfer verification system\n- **PromptPay Integration**: Thai digital payment system support\n\n### Development Tools\n- **Neon Database**: PostgreSQL serverless database provider\n- **Replit Integration**: Development environment optimizations\n- **TypeScript**: Full type safety across the application\n- **ESLint/Prettier**: Code quality and formatting tools\n\n### UI and UX Libraries\n- **Radix UI**: Accessible component primitives\n- **Lucide React**: Icon library\n- **Framer Motion**: Animation library for enhanced UX\n- **React Hook Form**: Form state management\n- **Zod**: Runtime type validation\n\nThe system is designed to be production-ready with proper error handling, input validation, and security measures while maintaining a simple and intuitive user experience.","size_bytes":3989},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":894},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport bcrypt from \"bcryptjs\";\nimport { storage } from \"./storage\";\nimport MemoryStore from \"memorystore\";\nimport { User as SelectUser } from \"@shared/schema\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\n// ฟังก์ชันเข้ารหัสรหัสผ่านใช้ bcrypt เหมือนกับในไฟล์ server/index.ts\nasync function hashPassword(password: string) {\n  const salt = await bcrypt.genSalt(10);\n  return bcrypt.hash(password, salt);\n}\n\n// ฟังก์ชันเปรียบเทียบรหัสผ่านด้วย bcrypt\nasync function comparePasswords(supplied: string, stored: string) {\n  try {\n    return await bcrypt.compare(supplied, stored);\n  } catch (error) {\n    console.error('Error comparing passwords:', error);\n    return false;\n  }\n}\n\nexport function setupAuth(app: Express) {\n  const MemoryStoreSession = MemoryStore(session);\n  \n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET || \"crypto-trade-secret\",\n    resave: false,\n    saveUninitialized: false,\n    store: new MemoryStoreSession({\n      checkPeriod: 86400000 // ล้างเซสชันที่หมดอายุทุก 24 ชั่วโมง\n    }),\n    cookie: {\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 1 week\n      secure: process.env.NODE_ENV === \"production\",\n    }\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      try {\n        const user = await storage.getUserByUsername(username);\n        if (!user || !(await comparePasswords(password, user.password))) {\n          return done(null, false);\n        } else {\n          return done(null, user);\n        }\n      } catch (error) {\n        return done(error);\n      }\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: number, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      const existingUser = await storage.getUserByUsername(req.body.username);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Username already exists\" });\n      }\n\n      const existingEmail = await storage.getUserByEmail(req.body.email);\n      if (existingEmail) {\n        return res.status(400).json({ message: \"Email already in use\" });\n      }\n\n      const user = await storage.createUser({\n        ...req.body,\n        password: await hashPassword(req.body.password),\n        balance: \"0\", // Ensure new users start with 0 baht\n      });\n\n      // Create a sanitized version without password\n      const userWithoutPassword = {\n        ...user,\n        password: undefined,\n      };\n\n      req.login(user, (err) => {\n        if (err) return next(err);\n        res.status(201).json(userWithoutPassword);\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.post(\"/api/login\", (req, res, next) => {\n    passport.authenticate(\"local\", (err: any, user: any, info: any) => {\n      if (err) return next(err);\n      if (!user) return res.status(401).json({ message: \"Invalid credentials\" });\n\n      req.login(user, (loginErr) => {\n        if (loginErr) return next(loginErr);\n        \n        // Create a sanitized version without password\n        const userWithoutPassword = {\n          ...user,\n          password: undefined,\n        };\n        \n        return res.status(200).json(userWithoutPassword);\n      });\n    })(req, res, next);\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    // Create a sanitized version without password\n    const userWithoutPassword = {\n      ...req.user,\n      password: undefined,\n    };\n    \n    res.json(userWithoutPassword);\n  });\n}\n","size_bytes":4369},"server/crypto-api.ts":{"content":"import { CryptoCurrency } from \"@shared/schema\";\n\n// Cache mechanism to reduce API calls\nconst cache = {\n  marketData: null as CryptoCurrency[] | null,\n  lastFetched: 0,\n  cacheTime: 60000, // 1 minute\n};\n\n// CoinGecko API URLs\nconst API_BASE_URL = \"https://api.coingecko.com/api/v3\";\nconst MARKET_DATA_URL = `${API_BASE_URL}/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=20&page=1&sparkline=true&price_change_percentage=24h`;\n\n// Handle rate limiting with exponential backoff\nconst fetchWithRetry = async (url: string, retries = 3, backoff = 1000) => {\n  try {\n    const response = await fetch(url);\n    \n    if (response.status === 429) {\n      // Rate limited\n      if (retries === 0) throw new Error(\"Rate limit exceeded\");\n      \n      console.log(`Rate limited, retrying in ${backoff}ms...`);\n      await new Promise(resolve => setTimeout(resolve, backoff));\n      \n      return fetchWithRetry(url, retries - 1, backoff * 2);\n    }\n    \n    if (!response.ok) {\n      throw new Error(`API Error: ${response.status} ${response.statusText}`);\n    }\n    \n    return response.json();\n  } catch (error) {\n    console.error(\"Error fetching cryptocurrency data:\", error);\n    throw error;\n  }\n};\n\n// Fetch a specific cryptocurrency directly from the API\nasync function fetchCryptoDirectly(id: string): Promise<CryptoCurrency | null> {\n  try {\n    const url = `${API_BASE_URL}/coins/${id}?localization=false&tickers=false&market_data=true&community_data=false&developer_data=false&sparkline=true`;\n    const data = await fetchWithRetry(url);\n    \n    return {\n      id: data.id,\n      symbol: data.symbol,\n      name: data.name,\n      image: data.image.large,\n      current_price: data.market_data.current_price.usd,\n      price_change_percentage_24h: data.market_data.price_change_percentage_24h,\n      sparkline_in_7d: {\n        price: data.market_data.sparkline_7d?.price || []\n      }\n    };\n  } catch (error) {\n    console.error(`Error directly fetching crypto data for ${id}:`, error);\n    return null;\n  }\n}\n\n// Make sure Bitcoin Cash (BCH) is included in our market data\nasync function ensureBitcoinCash(marketData: CryptoCurrency[]): Promise<CryptoCurrency[]> {\n  // Check if BCH is already in the market data\n  const hasBCH = marketData.some(crypto => crypto.id === 'bitcoin-cash');\n  \n  if (hasBCH) {\n    return marketData; // BCH already exists, no need to add it\n  }\n  \n  try {\n    // Fetch BCH data specifically, without using getCryptoById to avoid circular dependency\n    const bchData = await fetchCryptoDirectly('bitcoin-cash');\n    \n    if (bchData) {\n      // Add BCH to the market data\n      return [...marketData, bchData];\n    }\n    \n    return marketData; // If we couldn't fetch BCH data, return original data\n  } catch (error) {\n    console.error(\"Error fetching Bitcoin Cash data:\", error);\n    return marketData; // Return original data on error\n  }\n}\n\nexport async function getMarketData(): Promise<CryptoCurrency[]> {\n  const now = Date.now();\n  \n  // Return cached data if available and not expired\n  if (cache.marketData && now - cache.lastFetched < cache.cacheTime) {\n    return cache.marketData;\n  }\n  \n  try {\n    const data = await fetchWithRetry(MARKET_DATA_URL);\n    \n    // Add Bitcoin Cash if not already present\n    const dataWithBCH = await ensureBitcoinCash(data);\n    \n    // Update cache\n    cache.marketData = dataWithBCH;\n    cache.lastFetched = now;\n    \n    return dataWithBCH;\n  } catch (error) {\n    // If we have cached data, return it even if expired\n    if (cache.marketData) {\n      console.log(\"Using expired cache due to API error\");\n      return cache.marketData;\n    }\n    \n    throw error;\n  }\n}\n\nexport async function getCryptoById(id: string): Promise<CryptoCurrency | null> {\n  try {\n    // Try to find it in the cache first\n    const marketData = await getMarketData();\n    const crypto = marketData.find(c => c.id === id);\n    \n    if (crypto) return crypto;\n    \n    // If not in cache, fetch directly using the reusable function\n    return await fetchCryptoDirectly(id);\n  } catch (error) {\n    console.error(`Error fetching crypto data for ${id}:`, error);\n    return null;\n  }\n}\n","size_bytes":4160},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport fs from \"fs\";\nimport * as schema from \"@shared/schema\";\n\n// Integration: javascript_database\nneonConfig.webSocketConstructor = ws;\n\n// Get database URL - check deployed location first, then fall back to env variable\nlet databaseUrl = process.env.DATABASE_URL;\n\n// For deployed applications, check /tmp/replitdb first\ntry {\n  if (fs.existsSync('/tmp/replitdb')) {\n    const deployedUrl = fs.readFileSync('/tmp/replitdb', 'utf8').trim();\n    if (deployedUrl) {\n      databaseUrl = deployedUrl;\n      console.log('✅ Using deployed database URL from /tmp/replitdb');\n    }\n  }\n} catch (error) {\n  console.log('ℹ️ Could not read /tmp/replitdb, using environment variable');\n}\n\nif (!databaseUrl) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: databaseUrl });\nexport const db = drizzle({ client: pool, schema });","size_bytes":1059},"server/file-storage.ts":{"content":"import fs from 'fs';\nimport path from 'path';\nimport session from 'express-session';\nimport MemoryStore from 'memorystore';\nimport { User, BankAccount, Trade, Transaction, InsertUser, InsertBankAccount, InsertTrade, InsertTransaction } from '@shared/schema';\nimport { IStorage } from './storage';\n\n// กำหนดโฟลเดอร์สำหรับเก็บข้อมูล\nconst DATA_DIR = './data';\nconst USER_FILE = path.join(DATA_DIR, 'users.json');\nconst BANK_ACCOUNT_FILE = path.join(DATA_DIR, 'bank_accounts.json');\nconst TRADE_FILE = path.join(DATA_DIR, 'trades.json');\nconst TRANSACTION_FILE = path.join(DATA_DIR, 'transactions.json');\nconst SETTINGS_FILE = path.join(DATA_DIR, 'settings.json');\n\n// ตรวจสอบว่ามีโฟลเดอร์ data หรือไม่ ถ้าไม่มีให้สร้าง\nif (!fs.existsSync(DATA_DIR)) {\n  fs.mkdirSync(DATA_DIR, { recursive: true });\n}\n\n// ฟังก์ชันสำหรับอ่านข้อมูลจากไฟล์\nfunction readJsonFile<T>(filePath: string, defaultValue: T): T {\n  try {\n    if (fs.existsSync(filePath)) {\n      const data = fs.readFileSync(filePath, 'utf8');\n      return JSON.parse(data) as T;\n    }\n  } catch (error) {\n    console.error(`Error reading file ${filePath}:`, error);\n  }\n  return defaultValue;\n}\n\n// ฟังก์ชันสำหรับเขียนข้อมูลลงไฟล์\nfunction writeJsonFile<T>(filePath: string, data: T): void {\n  try {\n    fs.writeFileSync(filePath, JSON.stringify(data, null, 2), 'utf8');\n  } catch (error) {\n    console.error(`Error writing file ${filePath}:`, error);\n  }\n}\n\nexport class FileStorage implements IStorage {\n  private users: User[] = [];\n  private trades: Trade[] = [];\n  private transactions: Transaction[] = [];\n  private bankAccounts: BankAccount[] = [];\n  private settings: { [key: string]: string } = {};\n  \n  private nextUserId = 1;\n  private nextTradeId = 1;\n  private nextTransactionId = 1;\n  private nextBankAccountId = 1;\n  sessionStore: session.Store;\n\n  constructor() {\n    // อ่านข้อมูลจากไฟล์\n    this.users = readJsonFile<User[]>(USER_FILE, []);\n    this.trades = readJsonFile<Trade[]>(TRADE_FILE, []);\n    this.transactions = readJsonFile<Transaction[]>(TRANSACTION_FILE, []);\n    this.bankAccounts = readJsonFile<BankAccount[]>(BANK_ACCOUNT_FILE, []);\n    this.settings = readJsonFile<{ [key: string]: string }>(SETTINGS_FILE, {});\n\n    // กำหนดค่า ID ถัดไปสำหรับแต่ละประเภทข้อมูล\n    if (this.users.length > 0) {\n      this.nextUserId = Math.max(...this.users.map(u => u.id)) + 1;\n    }\n    if (this.trades.length > 0) {\n      this.nextTradeId = Math.max(...this.trades.map(t => t.id)) + 1;\n    }\n    if (this.transactions.length > 0) {\n      this.nextTransactionId = Math.max(...this.transactions.map(t => t.id)) + 1;\n    }\n    if (this.bankAccounts.length > 0) {\n      this.nextBankAccountId = Math.max(...this.bankAccounts.map(b => b.id)) + 1;\n    }\n\n    // สร้าง session store\n    const MemoryStoreClass = MemoryStore(session);\n    this.sessionStore = new MemoryStoreClass({\n      checkPeriod: 86400000 // 24 ชั่วโมง\n    });\n\n    console.log('✅ Using file-based JSON storage for persistence - Data will be stored in ./data/ directory');\n  }\n\n  // บันทึกข้อมูลทั้งหมดลงไฟล์\n  private saveData() {\n    writeJsonFile(USER_FILE, this.users);\n    writeJsonFile(TRADE_FILE, this.trades);\n    writeJsonFile(TRANSACTION_FILE, this.transactions);\n    writeJsonFile(BANK_ACCOUNT_FILE, this.bankAccounts);\n    writeJsonFile(SETTINGS_FILE, this.settings);\n  }\n\n  // User operations\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.find(user => user.id === id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return this.users.find(user => user.username === username);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return this.users.find(user => user.email === email);\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const newUser: User = {\n      id: this.nextUserId++,\n      ...user,\n      fullName: null,\n      displayName: null,\n      phoneNumber: null,\n      avatarUrl: null,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.users.push(newUser);\n    this.saveData();\n    return newUser;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return [...this.users];\n  }\n\n  async updateUserProfile(userId: number, profileData: Partial<User>): Promise<User | undefined> {\n    const userIndex = this.users.findIndex(user => user.id === userId);\n    if (userIndex === -1) return undefined;\n\n    const updatedUser = {\n      ...this.users[userIndex],\n      ...profileData,\n      updatedAt: new Date()\n    };\n    this.users[userIndex] = updatedUser;\n    this.saveData();\n    return updatedUser;\n  }\n\n  async updateUserPassword(userId: number, newPassword: string): Promise<User | undefined> {\n    const userIndex = this.users.findIndex(user => user.id === userId);\n    if (userIndex === -1) return undefined;\n\n    const updatedUser = {\n      ...this.users[userIndex],\n      password: newPassword,\n      updatedAt: new Date()\n    };\n    this.users[userIndex] = updatedUser;\n    this.saveData();\n    return updatedUser;\n  }\n\n  async updateUser(userId: number, userData: Partial<User>): Promise<User | undefined> {\n    const userIndex = this.users.findIndex(user => user.id === userId);\n    if (userIndex === -1) return undefined;\n\n    const updatedUser = {\n      ...this.users[userIndex],\n      ...userData,\n      updatedAt: new Date()\n    };\n    this.users[userIndex] = updatedUser;\n    this.saveData();\n    return updatedUser;\n  }\n\n  // Balance operations\n  async getUserBalance(userId: number): Promise<string> {\n    const user = await this.getUser(userId);\n    return user ? user.balance : \"0\";\n  }\n\n  async updateUserBalance(userId: number, newBalance: string): Promise<User | undefined> {\n    const userIndex = this.users.findIndex(user => user.id === userId);\n    if (userIndex === -1) return undefined;\n\n    const updatedUser = {\n      ...this.users[userIndex],\n      balance: newBalance,\n      updatedAt: new Date()\n    };\n    this.users[userIndex] = updatedUser;\n    this.saveData();\n    return updatedUser;\n  }\n\n  // Bank account operations\n  async createBankAccount(bankAccount: InsertBankAccount): Promise<BankAccount> {\n    const newBankAccount: BankAccount = {\n      id: this.nextBankAccountId++,\n      ...bankAccount,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.bankAccounts.push(newBankAccount);\n    this.saveData();\n    return newBankAccount;\n  }\n\n  async getBankAccountsByUser(userId: number): Promise<BankAccount[]> {\n    return this.bankAccounts.filter(account => account.userId === userId);\n  }\n\n  async updateBankAccountDefault(id: number, isDefault: boolean): Promise<BankAccount | undefined> {\n    const accountIndex = this.bankAccounts.findIndex(account => account.id === id);\n    if (accountIndex === -1) return undefined;\n\n    // หากตั้งค่าเป็น default ให้ยกเลิก default ของบัญชีอื่นของผู้ใช้คนเดียวกัน\n    if (isDefault) {\n      const userId = this.bankAccounts[accountIndex].userId;\n      this.bankAccounts.forEach((account, index) => {\n        if (account.userId === userId && account.id !== id) {\n          this.bankAccounts[index] = { ...account, isDefault: false };\n        }\n      });\n    }\n\n    const updatedAccount = {\n      ...this.bankAccounts[accountIndex],\n      isDefault,\n      updatedAt: new Date()\n    };\n    this.bankAccounts[accountIndex] = updatedAccount;\n    this.saveData();\n    return updatedAccount;\n  }\n\n  async updateBankAccount(id: number, bankAccountData: Partial<BankAccount>): Promise<BankAccount | undefined> {\n    const accountIndex = this.bankAccounts.findIndex(account => account.id === id);\n    if (accountIndex === -1) return undefined;\n\n    const updatedAccount = {\n      ...this.bankAccounts[accountIndex],\n      ...bankAccountData,\n      updatedAt: new Date()\n    };\n    this.bankAccounts[accountIndex] = updatedAccount;\n    this.saveData();\n    return updatedAccount;\n  }\n\n  async deleteBankAccount(id: number): Promise<void> {\n    const accountIndex = this.bankAccounts.findIndex(account => account.id === id);\n    if (accountIndex !== -1) {\n      this.bankAccounts.splice(accountIndex, 1);\n      this.saveData();\n    }\n  }\n\n  async getBankAccountById(id: number): Promise<BankAccount | undefined> {\n    return this.bankAccounts.find(account => account.id === id);\n  }\n\n  // Trade operations\n  async createTrade(trade: InsertTrade): Promise<Trade> {\n    // ดึงยอดเงินของผู้ใช้\n    const user = this.users.find(u => u.id === trade.userId);\n    if (!user) {\n      throw new Error(\"User not found\");\n    }\n    \n    // ใช้จำนวนเงินที่ใส่โดยตรง ไม่ต้องคูณกับราคา BTC\n    const tradeValue = parseFloat(trade.amount);\n    const currentBalance = parseFloat(user.balance || \"0\");\n    \n    // ตรวจสอบว่ามีเงินเพียงพอหรือไม่\n    if (currentBalance < tradeValue) {\n      throw new Error(\"Insufficient balance\");\n    }\n    \n    // หักเงินออกจากบัญชีทันที\n    const newBalance = (currentBalance - tradeValue).toString();\n    user.balance = newBalance;\n    \n    console.log(`[TRADE] หักเงินในบัญชีผู้ใช้ ${user.username} จำนวน ${tradeValue} บาท ยอดคงเหลือ ${newBalance} บาท`);\n    \n    const newTrade: Trade = {\n      id: this.nextTradeId++,\n      ...trade,\n      createdAt: new Date(),\n      status: \"active\",\n      result: null,\n      predeterminedResult: null,\n      endTime: null,\n      closedAt: null\n    };\n    \n    this.trades.push(newTrade);\n    this.saveData();\n    return newTrade;\n  }\n\n  async getTradesByUser(userId: number): Promise<Trade[]> {\n    return this.trades.filter(trade => trade.userId === userId);\n  }\n\n  async getAllTrades(): Promise<Trade[]> {\n    return [...this.trades];\n  }\n\n  async updateTradeStatus(id: number, status: string, result?: string, predeterminedResult?: string): Promise<Trade | undefined> {\n    const tradeIndex = this.trades.findIndex(trade => trade.id === id);\n    if (tradeIndex === -1) return undefined;\n\n    const originalTrade = this.trades[tradeIndex];\n    const finalResult = (status === 'completed' && originalTrade.predeterminedResult) ? \n      originalTrade.predeterminedResult : result;\n\n    const updatedTrade: Trade = {\n      ...originalTrade,\n      status,\n      closedAt: status === 'completed' ? new Date() : originalTrade.closedAt,\n    };\n\n    if (result !== undefined) {\n      updatedTrade.result = finalResult || null;\n    }\n\n    if (predeterminedResult !== undefined) {\n      updatedTrade.predeterminedResult = predeterminedResult;\n    }\n\n    if (status === 'completed') {\n      updatedTrade.endTime = new Date();\n      \n      // ถ้าการเทรดสิ้นสุดและผลลัพธ์เป็นชนะ ให้เพิ่มเงินเข้าบัญชี\n      if (finalResult === 'win') {\n        // ค้นหาผู้ใช้\n        const user = this.users.find(u => u.id === originalTrade.userId);\n        if (user) {\n          // คำนวณจำนวนเงินที่ลงทุน\n          const investmentAmount = parseFloat(originalTrade.amount);\n          \n          // คำนวณผลกำไรตามเปอร์เซ็นต์\n          const profitPercentage = parseFloat(originalTrade.profitPercentage) / 100;\n          const profit = investmentAmount * profitPercentage;\n          \n          // คำนวณยอดเงินรวมที่จะได้คืน (เงินลงทุน + กำไร)\n          const totalReturn = investmentAmount + profit;\n          \n          // เพิ่มเงินเข้าบัญชี\n          const currentBalance = parseFloat(user.balance || \"0\");\n          const newBalance = (currentBalance + totalReturn).toString();\n          user.balance = newBalance;\n          \n          console.log(`[TRADE WIN] เพิ่มเงินในบัญชีผู้ใช้ ${user.username} เงินลงทุน ${investmentAmount} บาท + กำไร ${profit.toFixed(2)} บาท = ${totalReturn.toFixed(2)} บาท ยอดคงเหลือใหม่ ${newBalance} บาท`);\n        }\n      } else if (finalResult === 'lose') {\n        // กรณีแพ้ไม่ต้องทำอะไร เพราะหักเงินไปแล้วตอนเริ่มเทรด\n        console.log(`[TRADE LOSE] ผู้ใช้ ID ${originalTrade.userId} แพ้การเทรด จำนวนเงิน ${originalTrade.amount} บาท ไม่ได้รับเงินคืน`);\n      }\n    }\n\n    this.trades[tradeIndex] = updatedTrade;\n    this.saveData();\n    return updatedTrade;\n  }\n\n  // Transaction operations\n  async createTransaction(transaction: InsertTransaction): Promise<Transaction> {\n    const newTransaction: Transaction = {\n      id: this.nextTransactionId++,\n      ...transaction,\n      status: 'pending',\n      bankName: transaction.bankName || null,\n      method: transaction.method || null,\n      bankAccount: transaction.bankAccount || null,\n      paymentProof: transaction.paymentProof || null,\n      note: transaction.note || null,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.transactions.push(newTransaction);\n    this.saveData();\n    return newTransaction;\n  }\n\n  async getTransactionsByUser(userId: number): Promise<Transaction[]> {\n    return this.transactions.filter(transaction => transaction.userId === userId);\n  }\n\n  async getAllTransactions(): Promise<Transaction[]> {\n    return [...this.transactions];\n  }\n\n  async updateTransactionStatus(id: number, status: string, note?: string): Promise<Transaction | undefined> {\n    const transactionIndex = this.transactions.findIndex(transaction => transaction.id === id);\n    if (transactionIndex === -1) return undefined;\n\n    const originalTransaction = this.transactions[transactionIndex];\n    \n    const updatedTransaction: Transaction = {\n      ...originalTransaction,\n      status,\n      updatedAt: new Date()\n    };\n\n    if (note) {\n      updatedTransaction.note = note;\n    }\n\n    // ถ้าเป็นการอนุมัติการฝากเงิน ให้เพิ่มเงินเข้าบัญชี\n    if (status === \"approved\" && originalTransaction.type === \"deposit\") {\n      // ดึงข้อมูลผู้ใช้\n      const user = this.users.find(user => user.id === originalTransaction.userId);\n      if (user) {\n        // คำนวณยอดเงินใหม่\n        const currentBalance = user.balance || \"0\";\n        const newBalance = (parseFloat(currentBalance) + parseFloat(originalTransaction.amount)).toString();\n        \n        // อัพเดทยอดเงิน\n        user.balance = newBalance;\n        console.log(`[DEPOSIT APPROVED] เพิ่มเงินในบัญชีผู้ใช้ ${user.username} จำนวน ${originalTransaction.amount} บาท ยอดคงเหลือ ${newBalance} บาท`);\n      }\n    }\n    \n    // ถ้าเป็นการปฏิเสธการถอนเงิน ให้คืนเงินกลับเข้าบัญชี\n    if (status === \"rejected\" && originalTransaction.type === \"withdraw\") {\n      // ดึงข้อมูลผู้ใช้\n      const user = this.users.find(user => user.id === originalTransaction.userId);\n      if (user) {\n        // คำนวณยอดเงินเมื่อคืนเงินกลับเข้าบัญชี\n        const currentBalance = user.balance || \"0\";\n        const newBalance = (parseFloat(currentBalance) + parseFloat(originalTransaction.amount)).toString();\n        \n        // อัพเดทยอดเงิน\n        user.balance = newBalance;\n        console.log(`[WITHDRAW REJECTED] คืนเงินกลับเข้าบัญชีผู้ใช้ ${user.username} จำนวน ${originalTransaction.amount} บาท ยอดคงเหลือ ${newBalance} บาท`);\n      }\n    }\n\n    this.transactions[transactionIndex] = updatedTransaction;\n    this.saveData();\n    return updatedTransaction;\n  }\n\n  // Settings operations\n  async getSetting(key: string): Promise<string | null> {\n    return this.settings[key] || null;\n  }\n\n  async getAllSettings(): Promise<{[key: string]: string}> {\n    return { ...this.settings };\n  }\n\n  async saveSetting(key: string, value: string): Promise<void> {\n    this.settings[key] = value;\n    this.saveData();\n  }\n\n  async saveMultipleSettings(settings: {key: string, value: string}[]): Promise<void> {\n    settings.forEach(({ key, value }) => {\n      this.settings[key] = value;\n    });\n    this.saveData();\n  }\n\n  async getDepositAccounts(): Promise<{\n    bankAccounts: { bank: string, account: string, name: string }[];\n    promptpay: string | null;\n  }> {\n    const bankAccounts = this.settings.bankAccounts ? \n      JSON.parse(this.settings.bankAccounts) : [];\n    const promptpay = this.settings.promptpay || null;\n    \n    return { bankAccounts, promptpay };\n  }\n\n  async saveDepositAccounts(data: {\n    bankAccounts: { bank: string, account: string, name: string }[];\n    promptpay: string | null;\n  }): Promise<void> {\n    this.settings.bankAccounts = JSON.stringify(data.bankAccounts);\n    if (data.promptpay) {\n      this.settings.promptpay = data.promptpay;\n    }\n    this.saveData();\n  }\n}\n\nexport const fileStorage = new FileStorage();","size_bytes":18214},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { DatabaseStorage } from \"./storage\";\nimport { setupWebSocket } from \"./websocket\";\n\nconst storage = new DatabaseStorage();\nimport bcrypt from \"bcryptjs\";\n\nconst app = express();\napp.use(express.json({ limit: '10mb' })); // เพิ่มขนาด limit เป็น 10mb\napp.use(express.urlencoded({ extended: false, limit: '10mb' })); // เพิ่มขนาด limit เป็น 10mb\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    try {\n      // ตรวจสอบว่าสามารถแปลงเป็น JSON ได้หรือไม่ก่อนที่จะบันทึก\n      const jsonString = JSON.stringify(bodyJson);\n      capturedJsonResponse = JSON.parse(jsonString);\n    } catch (error) {\n      // ถ้าไม่สามารถแปลงเป็น JSON ได้ ให้เก็บเฉพาะข้อความอธิบายความผิดพลาด\n      capturedJsonResponse = { message: 'Response contains circular structure or non-serializable values' };\n    }\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n// ฟังก์ชันสำหรับสร้างผู้ใช้แอดมิน\nasync function createAdminUser() {\n  try {\n    // ตรวจสอบว่ามีผู้ใช้แอดมินอยู่แล้วหรือไม่\n    const existingAdmin = await storage.getUserByUsername('admin');\n    if (existingAdmin) {\n      console.log('Admin user already exists');\n      return;\n    }\n\n    // เข้ารหัสรหัสผ่าน\n    const salt = await bcrypt.genSalt(10);\n    const hashedPassword = await bcrypt.hash('admin@bigone', salt);\n    \n    // สร้างข้อมูลผู้ใช้แอดมิน\n    const adminUser = {\n      username: 'admin',\n      password: hashedPassword,\n      email: 'admin@example.com',\n      role: 'admin' as const,\n      balance: '1000000',\n    };\n    \n    // บันทึกผู้ใช้แอดมิน\n    const newUser = await storage.createUser(adminUser);\n    console.log('Admin user created successfully:', newUser.username);\n  } catch (error) {\n    console.error('Error creating admin user:', error);\n  }\n}\n\n(async () => {\n  // สร้างผู้ใช้แอดมินเมื่อเริ่มแอปพลิเคชัน\n  await createAdminUser();\n  \n  const server = await registerRoutes(app);\n  \n  // Setup WebSocket\n  setupWebSocket(server);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":4128},"server/memory-storage.ts":{"content":"import { \n  type User, type InsertUser, \n  type Trade, type InsertTrade,\n  type Transaction, type InsertTransaction,\n  type BankAccount, type InsertBankAccount\n} from \"@shared/schema\";\nimport session from \"express-session\";\nimport MemoryStore from \"memorystore\";\n\nconst MemoryStoreSession = MemoryStore(session);\n\n// สร้างคลาสจัดเก็บข้อมูลในหน่วยความจำแบบง่ายๆ\nexport class MemoryStorage {\n  private users: User[] = [];\n  private trades: Trade[] = [];\n  private transactions: Transaction[] = [];\n  private bankAccounts: BankAccount[] = [];\n  private settings: { [key: string]: string } = {\n    // ข้อมูลตั้งต้นสำหรับบัญชีธนาคารและพร้อมเพย์\n    bank_name: \"ธนาคารกสิกรไทย\",\n    bank_account_number: \"123-456-7890\",\n    bank_account_name: \"บริษัท เอเซีย พลัส จำกัด\",\n    promptpay_number: \"012-345-6789\",\n    promptpay_tax_id: \"0123456789012\",\n    promptpay_name: \"บริษัท เอเซีย พลัส จำกัด\"\n  };\n  private nextUserId = 1;\n  private nextTradeId = 1;\n  private nextTransactionId = 1;\n  private nextBankAccountId = 1;\n  sessionStore: session.Store;\n\n  constructor() {\n    this.sessionStore = new MemoryStoreSession({\n      checkPeriod: 86400000 // วันละครั้ง\n    });\n  }\n\n  // User operations\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.find(user => user.id === id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return this.users.find(user => user.username === username);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return this.users.find(user => user.email === email);\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const now = new Date();\n    const newUser: User = {\n      id: this.nextUserId++,\n      ...user,\n      createdAt: now,\n      updatedAt: now\n    };\n    this.users.push(newUser);\n    return newUser;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return [...this.users];\n  }\n\n  async updateUserProfile(userId: number, profileData: Partial<User>): Promise<User | undefined> {\n    const userIndex = this.users.findIndex(user => user.id === userId);\n    if (userIndex === -1) return undefined;\n    \n    this.users[userIndex] = {\n      ...this.users[userIndex],\n      ...profileData,\n      updatedAt: new Date()\n    };\n    \n    return this.users[userIndex];\n  }\n\n  async updateUserPassword(userId: number, newPassword: string): Promise<User | undefined> {\n    const userIndex = this.users.findIndex(user => user.id === userId);\n    if (userIndex === -1) return undefined;\n    \n    this.users[userIndex] = {\n      ...this.users[userIndex],\n      password: newPassword,\n      updatedAt: new Date()\n    };\n    \n    return this.users[userIndex];\n  }\n\n  async updateUser(userId: number, userData: Partial<User>): Promise<User | undefined> {\n    const userIndex = this.users.findIndex(user => user.id === userId);\n    if (userIndex === -1) return undefined;\n    \n    this.users[userIndex] = {\n      ...this.users[userIndex],\n      ...userData,\n      updatedAt: new Date()\n    };\n    \n    return this.users[userIndex];\n  }\n\n  // Balance operations\n  async getUserBalance(userId: number): Promise<string> {\n    const user = await this.getUser(userId);\n    return user ? user.balance : \"0\";\n  }\n\n  async updateUserBalance(userId: number, newBalance: string): Promise<User | undefined> {\n    const userIndex = this.users.findIndex(user => user.id === userId);\n    if (userIndex === -1) return undefined;\n    \n    this.users[userIndex] = {\n      ...this.users[userIndex],\n      balance: newBalance,\n      updatedAt: new Date()\n    };\n    \n    return this.users[userIndex];\n  }\n\n  // Bank account operations\n  async createBankAccount(bankAccount: InsertBankAccount): Promise<BankAccount> {\n    const now = new Date();\n    const newBankAccount: BankAccount = {\n      id: this.nextBankAccountId++,\n      ...bankAccount,\n      createdAt: now,\n      updatedAt: now\n    };\n    this.bankAccounts.push(newBankAccount);\n    return newBankAccount;\n  }\n\n  async getBankAccountsByUser(userId: number): Promise<BankAccount[]> {\n    return this.bankAccounts.filter(account => account.userId === userId);\n  }\n\n  async updateBankAccountDefault(id: number, isDefault: boolean): Promise<BankAccount | undefined> {\n    // ถ้า isDefault เป็น true ให้ทำให้บัญชีอื่นๆของผู้ใช้คนเดียวกันเป็น false\n    if (isDefault) {\n      const account = this.bankAccounts.find(a => a.id === id);\n      if (account) {\n        const userAccounts = this.bankAccounts.filter(a => a.userId === account.userId);\n        for (const a of userAccounts) {\n          if (a.id !== id) {\n            const index = this.bankAccounts.findIndex(ba => ba.id === a.id);\n            if (index !== -1) {\n              this.bankAccounts[index] = {\n                ...this.bankAccounts[index],\n                isDefault: false,\n                updatedAt: new Date()\n              };\n            }\n          }\n        }\n      }\n    }\n    \n    const accountIndex = this.bankAccounts.findIndex(a => a.id === id);\n    if (accountIndex === -1) return undefined;\n    \n    this.bankAccounts[accountIndex] = {\n      ...this.bankAccounts[accountIndex],\n      isDefault,\n      updatedAt: new Date()\n    };\n    \n    return this.bankAccounts[accountIndex];\n  }\n\n  async updateBankAccount(id: number, bankAccountData: Partial<BankAccount>): Promise<BankAccount | undefined> {\n    const accountIndex = this.bankAccounts.findIndex(a => a.id === id);\n    if (accountIndex === -1) return undefined;\n    \n    this.bankAccounts[accountIndex] = {\n      ...this.bankAccounts[accountIndex],\n      ...bankAccountData,\n      updatedAt: new Date()\n    };\n    \n    return this.bankAccounts[accountIndex];\n  }\n\n  async deleteBankAccount(id: number): Promise<void> {\n    const accountIndex = this.bankAccounts.findIndex(a => a.id === id);\n    if (accountIndex !== -1) {\n      this.bankAccounts.splice(accountIndex, 1);\n    }\n  }\n\n  async getBankAccountById(id: number): Promise<BankAccount | undefined> {\n    return this.bankAccounts.find(a => a.id === id);\n  }\n\n  // Trade operations\n  async createTrade(trade: InsertTrade): Promise<Trade> {\n    const now = new Date();\n    const newTrade: Trade = {\n      id: this.nextTradeId++,\n      ...trade,\n      createdAt: now,\n      status: \"active\",\n      result: null,\n      predeterminedResult: null,\n      endTime: trade.endTime || null\n    };\n    this.trades.push(newTrade);\n    return newTrade;\n  }\n\n  async getTradesByUser(userId: number): Promise<Trade[]> {\n    return this.trades.filter(trade => trade.userId === userId);\n  }\n\n  async getAllTrades(): Promise<Trade[]> {\n    return [...this.trades];\n  }\n\n  async updateTradeStatus(id: number, status: string, result?: string): Promise<Trade | undefined> {\n    const tradeIndex = this.trades.findIndex(t => t.id === id);\n    if (tradeIndex === -1) return undefined;\n    \n    this.trades[tradeIndex] = {\n      ...this.trades[tradeIndex],\n      status,\n      result: result || this.trades[tradeIndex].result\n    };\n    \n    return this.trades[tradeIndex];\n  }\n\n  // Transaction operations\n  async createTransaction(transaction: InsertTransaction): Promise<Transaction> {\n    const now = new Date();\n    const newTransaction: Transaction = {\n      id: this.nextTransactionId++,\n      ...transaction,\n      status: transaction.status || \"pending\",\n      method: transaction.method || null,\n      bankName: transaction.bankName || null,\n      bankAccount: transaction.bankAccount || null,\n      paymentProof: transaction.paymentProof || null,\n      note: transaction.note || null,\n      createdAt: now,\n      updatedAt: now\n    };\n    this.transactions.push(newTransaction);\n    return newTransaction;\n  }\n\n  async getTransactionsByUser(userId: number): Promise<Transaction[]> {\n    return this.transactions.filter(tx => tx.userId === userId);\n  }\n\n  async getAllTransactions(): Promise<Transaction[]> {\n    return [...this.transactions];\n  }\n\n  async updateTransactionStatus(id: number, status: string, note?: string): Promise<Transaction | undefined> {\n    const txIndex = this.transactions.findIndex(tx => tx.id === id);\n    if (txIndex === -1) return undefined;\n    \n    this.transactions[txIndex] = {\n      ...this.transactions[txIndex],\n      status,\n      note: note || this.transactions[txIndex].note,\n      updatedAt: new Date()\n    };\n    \n    return this.transactions[txIndex];\n  }\n\n  // เพิ่มเมธอดสำหรับจัดการการตั้งค่า\n  async getSetting(key: string): Promise<string | null> {\n    return this.settings[key] || null;\n  }\n\n  async getAllSettings(): Promise<{[key: string]: string}> {\n    return { ...this.settings };\n  }\n\n  async saveSetting(key: string, value: string): Promise<void> {\n    this.settings[key] = value;\n  }\n\n  async saveMultipleSettings(settings: {key: string, value: string}[]): Promise<void> {\n    for (const setting of settings) {\n      this.settings[setting.key] = setting.value;\n    }\n  }\n\n  async getDepositAccounts(): Promise<{\n    bank: { name: string; accountNumber: string; accountName: string; };\n    promptpay: { number: string; taxId: string; name: string; };\n  }> {\n    return {\n      bank: {\n        name: this.settings.bank_name || \"\",\n        accountNumber: this.settings.bank_account_number || \"\",\n        accountName: this.settings.bank_account_name || \"\",\n      },\n      promptpay: {\n        number: this.settings.promptpay_number || \"\",\n        taxId: this.settings.promptpay_tax_id || \"\",\n        name: this.settings.promptpay_name || \"\",\n      }\n    };\n  }\n\n  async saveDepositAccounts(data: {\n    bank: { name: string; accountNumber: string; accountName: string; };\n    promptpay: { number: string; taxId: string; name: string; };\n  }): Promise<void> {\n    this.settings.bank_name = data.bank.name;\n    this.settings.bank_account_number = data.bank.accountNumber;\n    this.settings.bank_account_name = data.bank.accountName;\n    this.settings.promptpay_number = data.promptpay.number;\n    this.settings.promptpay_tax_id = data.promptpay.taxId;\n    this.settings.promptpay_name = data.promptpay.name;\n  }\n}\n\nexport const memoryStorage = new MemoryStorage();","size_bytes":10493},"server/middleware.ts":{"content":"import { Request, Response, NextFunction } from \"express\";\n\n// ตรวจสอบการล็อกอินของผู้ใช้\nexport const isAuthenticated = (req: Request, res: Response, next: NextFunction) => {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  res.status(401).json({ error: \"Unauthorized\" });\n};\n\n// ตรวจสอบสิทธิ์ Admin\nexport const isAdmin = (req: Request, res: Response, next: NextFunction) => {\n  if (req.user && (req.user as any).role === \"admin\") {\n    return next();\n  }\n  res.status(403).json({ error: \"Forbidden\" });\n};","size_bytes":593},"server/routes.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth } from \"./auth\";\nimport { getMarketData, getCryptoById } from \"./crypto-api\";\nimport { insertTradeSchema, insertBankAccountSchema, trades, bankAccounts, settings, type User } from \"@shared/schema\";\nimport { ZodError } from \"zod\";\nimport { z } from \"zod\";\nimport { fromZodError } from \"zod-validation-error\";\nimport bcrypt from \"bcryptjs\";\nimport { registerSettingsRoutes } from \"./settings\";\nimport { db } from \"./db\";\nimport { eq } from \"drizzle-orm\";\n\n// Helper function for hashing passwords - ใช้ bcrypt เหมือนใน auth.ts\nasync function hashPassword(password: string) {\n  const salt = await bcrypt.genSalt(10);\n  return bcrypt.hash(password, salt);\n}\n\n// Helper function for comparing passwords - ใช้ bcrypt เหมือนใน auth.ts\nasync function comparePasswords(supplied: string, stored: string) {\n  try {\n    return await bcrypt.compare(supplied, stored);\n  } catch (error) {\n    console.error('Error comparing passwords:', error);\n    return false;\n  }\n}\n\n// Middleware to check if user is authenticated\nconst isAuthenticated = (req: Request, res: Response, next: Function) => {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  res.status(401).json({ message: \"Unauthorized\" });\n};\n\n// Middleware to check if user is admin\nconst isAdmin = (req: Request, res: Response, next: Function) => {\n  if (req.isAuthenticated() && req.user.role === \"admin\") {\n    return next();\n  }\n  res.status(403).json({ message: \"Forbidden\" });\n};\n\n// Middleware to check if user is admin or agent\nconst isAdminOrAgent = (req: Request, res: Response, next: Function) => {\n  if (req.isAuthenticated() && (req.user.role === \"admin\" || req.user.role === \"agent\")) {\n    return next();\n  }\n  res.status(403).json({ message: \"Forbidden\" });\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup authentication routes\n  setupAuth(app);\n\n  // Crypto market data routes\n  app.get(\"/api/crypto/market\", async (req, res) => {\n    try {\n      const data = await getMarketData();\n      res.json(data);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch market data\" });\n    }\n  });\n\n  app.get(\"/api/crypto/:id\", async (req, res) => {\n    try {\n      const crypto = await getCryptoById(req.params.id);\n      if (!crypto) {\n        return res.status(404).json({ message: \"Cryptocurrency not found\" });\n      }\n      res.json(crypto);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch cryptocurrency data\" });\n    }\n  });\n\n  // Trading routes\n  app.post(\"/api/trades\", isAuthenticated, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const tradeData = insertTradeSchema.parse({\n        ...req.body,\n        userId: req.user.id\n      });\n      \n      const trade = await storage.createTrade(tradeData);\n      res.status(201).json(trade);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        const validationError = fromZodError(error);\n        res.status(400).json({ message: validationError.message });\n      } else {\n        res.status(500).json({ message: \"Failed to create trade\" });\n      }\n    }\n  });\n\n  app.get(\"/api/trades\", isAuthenticated, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const trades = await storage.getTradesByUser(req.user.id);\n      res.json(trades);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch trades\" });\n    }\n  });\n  \n  // อัพเดทสถานะการเทรด\n  app.patch(\"/api/trades/:id\", isAuthenticated, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const tradeId = parseInt(req.params.id);\n      if (isNaN(tradeId)) {\n        return res.status(400).json({ message: \"Invalid trade ID\" });\n      }\n      \n      // ตรวจสอบว่าสถานะที่ส่งมาถูกต้อง\n      let { status, result } = req.body;\n      \n      // ดึงข้อมูลการเทรดจาก storage\n      const userTrades = await storage.getTradesByUser(req.user.id);\n      const originalTrade = userTrades.find(trade => trade.id === tradeId);\n      \n      if (!originalTrade) {\n        console.error(`ไม่พบข้อมูลการเทรด ID: ${tradeId} ของผู้ใช้ ID: ${req.user.id}`);\n        return res.status(404).json({ message: \"Trade not found\" });\n      }\n      \n      console.log(`กำลังอัพเดทสถานะการเทรด ID: ${tradeId} เป็น ${status} ผลลัพธ์: ${result}`);\n      \n      // ถ้ามีการกำหนดผลลัพธ์ล่วงหน้า ให้ใช้ผลลัพธ์นั้นแทนผลลัพธ์ที่ส่งมา\n      if (originalTrade.predeterminedResult && status === \"completed\") {\n        console.log(`ใช้ผลลัพธ์ที่กำหนดล่วงหน้า: ${originalTrade.predeterminedResult} แทนผลจริง: ${result}`);\n        result = originalTrade.predeterminedResult;\n      }\n      \n      if (!status || (status === \"completed\" && !result)) {\n        return res.status(400).json({ message: \"Invalid status or missing result\" });\n      }\n      \n      // อัพเดทสถานะในฐานข้อมูล\n      const updatedTrade = await storage.updateTradeStatus(tradeId, status, result);\n      \n      if (!updatedTrade) {\n        return res.status(404).json({ message: \"Trade not found\" });\n      }\n      \n      res.json(updatedTrade);\n    } catch (error) {\n      console.error(\"Error updating trade status:\", error);\n      res.status(500).json({ message: \"Failed to update trade status\" });\n    }\n  });\n  \n  // เพิ่ม endpoint สำหรับแอดมินกำหนดผลการเทรดล่วงหน้า\n  app.patch(\"/api/admin/trades/:id/predetermined\", isAdminOrAgent, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const tradeId = parseInt(req.params.id);\n      if (isNaN(tradeId)) {\n        return res.status(400).json({ message: \"Invalid trade ID\" });\n      }\n      \n      // ตรวจสอบว่าค่าที่ส่งมาถูกต้อง\n      const { predeterminedResult } = req.body;\n      // ถ้า null คือลบการกำหนดผลลัพธ์ล่วงหน้า\n      if (predeterminedResult !== null && ![\"win\", \"lose\"].includes(predeterminedResult)) {\n        return res.status(400).json({ message: \"Invalid predetermined result. Must be 'win', 'lose', or null\" });\n      }\n      \n      // อัพเดทผลล่วงหน้าในฐานข้อมูล\n      const updatedTrade = await storage.updateTradeStatus(\n        tradeId, \n        \"active\", // ไม่เปลี่ยนสถานะ\n        undefined, // ไม่เปลี่ยนผลลัพธ์\n        predeterminedResult // กำหนดผลล่วงหน้า\n      );\n      \n      if (!updatedTrade) {\n        return res.status(404).json({ message: \"Trade not found\" });\n      }\n      \n      res.json(updatedTrade);\n    } catch (error) {\n      console.error(\"Error updating predetermined result:\", error);\n      res.status(500).json({ message: \"Failed to update predetermined result\" });\n    }\n  });\n\n  // Admin routes\n  app.get(\"/api/admin/users\", isAdminOrAgent, async (req, res) => {\n    try {\n      let users = await storage.getAllUsers();\n      \n      // หาก user เป็น agent จะเห็นเฉพาะผู้ใช้ที่ไม่ใช่ admin\n      if (req.user?.role === \"agent\") {\n        users = users.filter(user => user.role !== \"admin\");\n      }\n      \n      // Remove passwords from response\n      const sanitizedUsers = users.map(user => ({\n        ...user,\n        password: undefined\n      }));\n      res.json(sanitizedUsers);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n  \n  // ดึงบัญชีธนาคารของผู้ใช้งานสำหรับแอดมิน\n  app.get(\"/api/admin/users/:userId/bank-accounts\", isAdminOrAgent, async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      if (isNaN(userId)) {\n        return res.status(400).json({ message: \"Invalid user ID\" });\n      }\n      \n      const bankAccounts = await storage.getBankAccountsByUser(userId);\n      res.json(bankAccounts);\n    } catch (error) {\n      console.error(\"Error getting user bank accounts:\", error);\n      res.status(500).json({ message: \"Failed to get bank accounts\" });\n    }\n  });\n  \n  // แก้ไขบัญชีธนาคารของผู้ใช้งานสำหรับแอดมิน\n  app.patch(\"/api/admin/bank-accounts/:id\", isAdminOrAgent, async (req, res) => {\n    try {\n      const bankAccountId = parseInt(req.params.id);\n      if (isNaN(bankAccountId)) {\n        return res.status(400).json({ message: \"Invalid bank account ID\" });\n      }\n      \n      // รับข้อมูลที่จะแก้ไข\n      const { bankName, accountNumber, accountName, isDefault } = req.body;\n      if (!bankName || !accountNumber || !accountName) {\n        return res.status(400).json({ message: \"Bank name, account number, and account name are required\" });\n      }\n      \n      // แก้ไขข้อมูลบัญชี\n      const updatedBankAccount = await storage.updateBankAccount(bankAccountId, {\n        bankName,\n        accountNumber,\n        accountName,\n        isDefault: isDefault === true\n      });\n      \n      res.json(updatedBankAccount);\n    } catch (error) {\n      console.error(\"Error updating bank account:\", error);\n      res.status(500).json({ message: \"Failed to update bank account\" });\n    }\n  });\n\n  app.get(\"/api/admin/trades\", isAdminOrAgent, async (req, res) => {\n    try {\n      const trades = await storage.getAllTrades();\n      res.json(trades);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch trades\" });\n    }\n  });\n\n  // Wallet routes\n  // Schema สำหรับตรวจสอบข้อมูลการฝากเงิน\n  const depositSchema = z.object({\n    amount: z.string().refine((val) => !isNaN(parseFloat(val)) && parseFloat(val) > 0, {\n      message: \"Amount must be a positive number\",\n    }),\n    method: z.string().min(1),\n    paymentProofBase64: z.string().optional(),\n  });\n\n  // Schema สำหรับตรวจสอบข้อมูลการถอนเงิน\n  const withdrawSchema = z.object({\n    amount: z.string().refine((val) => !isNaN(parseFloat(val)) && parseFloat(val) > 0, {\n      message: \"Amount must be a positive number\",\n    }),\n    method: z.string().min(1),\n    bankAccount: z.string().optional(),\n    bankName: z.string().optional(),\n  });\n\n  // API endpoint สำหรับฝากเงิน\n  app.post(\"/api/wallet/deposit\", isAuthenticated, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const data = depositSchema.parse(req.body);\n      \n      // สร้างรายการธุรกรรมใหม่ (สถานะ pending ต้องรอแอดมินอนุมัติ)\n      const transactionData = {\n        userId: req.user.id,\n        type: \"deposit\" as const,\n        amount: data.amount,\n        method: data.method,\n        paymentProof: data.paymentProofBase64,\n      };\n      \n      const transaction = await storage.createTransaction(transactionData);\n      \n      if (!transaction) {\n        return res.status(500).json({ message: \"Failed to create transaction\" });\n      }\n      \n      res.status(200).json({\n        success: true,\n        message: \"Deposit request submitted successfully\",\n        transaction: {\n          id: transaction.id,\n          amount: transaction.amount,\n          status: transaction.status\n        }\n      });\n    } catch (error) {\n      if (error instanceof ZodError) {\n        const validationError = fromZodError(error);\n        res.status(400).json({ message: validationError.message });\n      } else {\n        console.error(\"Deposit error:\", error);\n        res.status(500).json({ message: \"Failed to process deposit request\" });\n      }\n    }\n  });\n\n  // API endpoint สำหรับถอนเงิน\n  app.post(\"/api/wallet/withdraw\", isAuthenticated, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const data = withdrawSchema.parse(req.body);\n      \n      // ดึงยอดเงินปัจจุบัน\n      const currentBalance = await storage.getUserBalance(req.user.id);\n      \n      // ตรวจสอบว่ามีเงินเพียงพอหรือไม่\n      if (parseFloat(currentBalance) < parseFloat(data.amount)) {\n        return res.status(400).json({ message: \"Insufficient balance\" });\n      }\n      \n      // หักเงินออกจากบัญชีทันที\n      const newBalance = (parseFloat(currentBalance) - parseFloat(data.amount)).toString();\n      console.log(\"[WITHDRAW] Current balance: \" + currentBalance + \", New balance: \" + newBalance);\n      const result = await storage.updateUserBalance(req.user.id, newBalance);\n      console.log(\"[WITHDRAW] Result of balance update:\", result?.balance);\n      \n      // สร้างรายการธุรกรรมใหม่ (สถานะ pending ต้องรอแอดมินอนุมัติ)\n      const transactionData = {\n        userId: req.user.id,\n        type: \"withdraw\" as const,\n        amount: data.amount,\n        method: data.method,\n        bankName: data.bankName,\n        bankAccount: data.bankAccount,\n        note: \"เงินถูกตัดจากบัญชีแล้ว รอการอนุมัติ\"\n      };\n      \n      const transaction = await storage.createTransaction(transactionData);\n      \n      if (!transaction) {\n        // ถ้าสร้างธุรกรรมไม่สำเร็จ ให้คืนเงินกลับเข้าบัญชี\n        await storage.updateUserBalance(req.user.id, currentBalance);\n        return res.status(500).json({ message: \"Failed to create transaction\" });\n      }\n      \n      res.status(200).json({\n        success: true,\n        message: \"Withdrawal request submitted successfully\",\n        transaction: {\n          id: transaction.id,\n          amount: transaction.amount,\n          status: transaction.status\n        }\n      });\n    } catch (error) {\n      if (error instanceof ZodError) {\n        const validationError = fromZodError(error);\n        res.status(400).json({ message: validationError.message });\n      } else {\n        console.error(\"Withdraw error:\", error);\n        res.status(500).json({ message: \"Failed to process withdrawal request\" });\n      }\n    }\n  });\n  \n  // API endpoint สำหรับดึงประวัติธุรกรรมของผู้ใช้\n  app.get(\"/api/wallet/transactions\", isAuthenticated, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const transactions = await storage.getTransactionsByUser(req.user.id);\n      res.json(transactions);\n    } catch (error) {\n      console.error(\"Error fetching transactions:\", error);\n      res.status(500).json({ message: \"Failed to fetch transactions\" });\n    }\n  });\n  \n  // API endpoint สำหรับแอดมินดึงรายการธุรกรรมทั้งหมด\n  app.get(\"/api/admin/transactions\", isAdminOrAgent, async (req, res) => {\n    try {\n      const transactions = await storage.getAllTransactions();\n      res.json(transactions);\n    } catch (error) {\n      console.error(\"Error fetching all transactions:\", error);\n      res.status(500).json({ message: \"Failed to fetch transactions\" });\n    }\n  });\n  \n  // API endpoint สำหรับแอดมินอัพเดทสถานะธุรกรรม\n  app.patch(\"/api/admin/transactions/:id\", isAdminOrAgent, async (req, res) => {\n    try {\n      const transactionId = parseInt(req.params.id);\n      if (isNaN(transactionId)) {\n        return res.status(400).json({ message: \"Invalid transaction ID\" });\n      }\n      \n      const { status, note } = req.body;\n      if (!status || ![\"approved\", \"rejected\", \"frozen\"].includes(status)) {\n        return res.status(400).json({ message: \"Invalid status\" });\n      }\n      \n      const transaction = await storage.updateTransactionStatus(transactionId, status, note);\n      if (!transaction) {\n        return res.status(404).json({ message: \"Transaction not found\" });\n      }\n      \n      res.json(transaction);\n    } catch (error) {\n      console.error(\"Error updating transaction:\", error);\n      res.status(500).json({ message: \"Failed to update transaction\" });\n    }\n  });\n\n  // -------------- Bank Account API Routes --------------\n  \n  // ดึงบัญชีธนาคารของผู้ใช้\n  app.get(\"/api/bank-accounts\", isAuthenticated, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const bankAccounts = await storage.getBankAccountsByUser(req.user.id);\n      res.json(bankAccounts);\n    } catch (error) {\n      console.error(\"Error fetching bank accounts:\", error);\n      res.status(500).json({ message: \"Failed to fetch bank accounts\" });\n    }\n  });\n  \n  // เพิ่มบัญชีธนาคารใหม่\n  app.post(\"/api/bank-accounts\", isAuthenticated, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      // ตรวจสอบจำนวนบัญชีที่มีอยู่ (จำกัดไม่เกิน 2 บัญชี)\n      const existingAccounts = await storage.getBankAccountsByUser(req.user.id);\n      if (existingAccounts.length >= 2) {\n        return res.status(400).json({ \n          message: \"คุณสามารถเพิ่มบัญชีได้สูงสุด 2 บัญชีเท่านั้น กรุณาลบบัญชีเดิมก่อน\" \n        });\n      }\n      \n      const bankAccountData = insertBankAccountSchema.parse({\n        ...req.body,\n        userId: req.user.id\n      });\n      \n      const bankAccount = await storage.createBankAccount(bankAccountData);\n      res.status(201).json(bankAccount);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        const validationError = fromZodError(error);\n        res.status(400).json({ message: validationError.message });\n      } else if (error instanceof Error) {\n        console.error(\"Error creating bank account:\", error);\n        res.status(400).json({ message: error.message });\n      } else {\n        res.status(500).json({ message: \"Failed to create bank account\" });\n      }\n    }\n  });\n  \n  // ตั้งเป็นบัญชีหลัก\n  app.patch(\"/api/bank-accounts/:id/default\", isAuthenticated, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const bankAccountId = parseInt(req.params.id);\n      if (isNaN(bankAccountId)) {\n        return res.status(400).json({ message: \"Invalid bank account ID\" });\n      }\n      \n      // ตรวจสอบว่าเป็นบัญชีของผู้ใช้หรือไม่\n      const bankAccount = await storage.getBankAccountById(bankAccountId);\n      if (!bankAccount || bankAccount.userId !== req.user.id) {\n        return res.status(403).json({ message: \"You don't have permission to update this bank account\" });\n      }\n      \n      const updatedBankAccount = await storage.updateBankAccountDefault(bankAccountId, true);\n      res.json(updatedBankAccount);\n    } catch (error) {\n      console.error(\"Error updating bank account:\", error);\n      res.status(500).json({ message: \"Failed to update bank account\" });\n    }\n  });\n  \n  // แก้ไขข้อมูลบัญชีธนาคาร\n  app.patch(\"/api/bank-accounts/:id\", isAuthenticated, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const bankAccountId = parseInt(req.params.id);\n      if (isNaN(bankAccountId)) {\n        return res.status(400).json({ message: \"Invalid bank account ID\" });\n      }\n      \n      // ตรวจสอบว่าเป็นบัญชีของผู้ใช้หรือไม่\n      const bankAccount = await storage.getBankAccountById(bankAccountId);\n      if (!bankAccount || bankAccount.userId !== req.user.id) {\n        return res.status(403).json({ message: \"You don't have permission to modify this bank account\" });\n      }\n      \n      // รับข้อมูลที่จะแก้ไข\n      const { bankName, accountNumber, accountName } = req.body;\n      if (!bankName || !accountNumber || !accountName) {\n        return res.status(400).json({ message: \"Bank name, account number, and account name are required\" });\n      }\n      \n      // แก้ไขข้อมูลบัญชี\n      const updatedBankAccount = await storage.updateBankAccount(bankAccountId, {\n        bankName,\n        accountNumber,\n        accountName\n      });\n      \n      res.json(updatedBankAccount);\n    } catch (error) {\n      console.error(\"Error updating bank account:\", error);\n      res.status(500).json({ message: \"Failed to update bank account\" });\n    }\n  });\n  \n  // ลบบัญชีธนาคาร\n  app.delete(\"/api/bank-accounts/:id\", isAuthenticated, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const bankAccountId = parseInt(req.params.id);\n      if (isNaN(bankAccountId)) {\n        return res.status(400).json({ message: \"Invalid bank account ID\" });\n      }\n      \n      // ตรวจสอบว่าเป็นบัญชีของผู้ใช้หรือไม่\n      const bankAccount = await storage.getBankAccountById(bankAccountId);\n      if (!bankAccount || bankAccount.userId !== req.user.id) {\n        return res.status(403).json({ message: \"You don't have permission to delete this bank account\" });\n      }\n      \n      await storage.deleteBankAccount(bankAccountId);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting bank account:\", error);\n      res.status(500).json({ message: \"Failed to delete bank account\" });\n    }\n  });\n  \n  // ปรับปรุง API endpoint สำหรับถอนเงินให้รองรับการใช้บัญชีที่ผูกไว้\n  app.post(\"/api/wallet/withdraw-with-saved-account\", isAuthenticated, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const schema = z.object({\n        amount: z.string().refine((val) => !isNaN(parseFloat(val)) && parseFloat(val) > 0, {\n          message: \"Amount must be a positive number\",\n        }),\n        bankAccountId: z.number(),\n      });\n      \n      const data = schema.parse(req.body);\n      \n      // ดึงข้อมูลบัญชีธนาคาร\n      const bankAccount = await storage.getBankAccountById(data.bankAccountId);\n      if (!bankAccount || bankAccount.userId !== req.user.id) {\n        return res.status(400).json({ message: \"Invalid bank account\" });\n      }\n      \n      // ดึงยอดเงินปัจจุบัน\n      const currentBalance = await storage.getUserBalance(req.user.id);\n      \n      // ตรวจสอบว่ามีเงินเพียงพอหรือไม่\n      if (parseFloat(currentBalance) < parseFloat(data.amount)) {\n        return res.status(400).json({ message: \"Insufficient balance\" });\n      }\n      \n      // คำนวณค่าธรรมเนียม 3%\n      const amount = parseFloat(data.amount);\n      const fee = amount * 0.03;\n      const finalAmount = amount - fee;\n      \n      // หักเงินออกจากบัญชีทันที\n      const newBalance = (parseFloat(currentBalance) - parseFloat(data.amount)).toString();\n      console.log(\"[WITHDRAW] Current balance: \" + currentBalance + \", New balance: \" + newBalance);\n      const result = await storage.updateUserBalance(req.user.id, newBalance);\n      console.log(\"[WITHDRAW] Result of balance update:\", result?.balance);\n      \n      // สร้างรายการธุรกรรมใหม่ (สถานะ pending ต้องรอแอดมินอนุมัติ)\n      const transactionData = {\n        userId: req.user.id,\n        type: \"withdraw\" as const,\n        amount: data.amount,  // จำนวนเงินที่ขอถอนก่อนหักค่าธรรมเนียม\n        method: \"bank\",\n        bankName: bankAccount.bankName,\n        bankAccount: bankAccount.accountNumber,\n        note: `เงินถูกตัดจากบัญชีแล้ว รอการอนุมัติ | ค่าธรรมเนียม 3%: ${fee.toFixed(2)} บาท ยอดสุทธิ: ${finalAmount.toFixed(2)} บาท`,\n      };\n      \n      const transaction = await storage.createTransaction(transactionData);\n      \n      if (!transaction) {\n        // ถ้าสร้างธุรกรรมไม่สำเร็จ ให้คืนเงินกลับเข้าบัญชี\n        await storage.updateUserBalance(req.user.id, currentBalance);\n        return res.status(500).json({ message: \"Failed to create transaction\" });\n      }\n      \n      res.status(200).json({\n        success: true,\n        message: \"Withdrawal request submitted successfully\",\n        transaction: {\n          id: transaction.id,\n          amount: transaction.amount,\n          status: transaction.status,\n          bankAccount: {\n            bankName: bankAccount.bankName,\n            accountNumber: bankAccount.accountNumber,\n            accountName: bankAccount.accountName,\n          }\n        }\n      });\n    } catch (error) {\n      if (error instanceof ZodError) {\n        const validationError = fromZodError(error);\n        res.status(400).json({ message: validationError.message });\n      } else {\n        console.error(\"Withdraw error:\", error);\n        res.status(500).json({ message: \"Failed to process withdrawal request\" });\n      }\n    }\n  });\n\n  // -------------- Profile API Routes --------------\n  \n  // Schema สำหรับอัพเดทข้อมูลโปรไฟล์\n  const updateProfileSchema = z.object({\n    email: z.string().email().optional(),\n    displayName: z.string().optional(),\n    phoneNumber: z.string().optional(),\n    avatarUrl: z.string().optional(),\n  });\n  \n  // Schema สำหรับเปลี่ยนรหัสผ่าน\n  const changePasswordSchema = z.object({\n    currentPassword: z.string().min(1, \"Current password is required\"),\n    newPassword: z.string().min(6, \"New password must be at least 6 characters\"),\n  });\n  \n  // API endpoint สำหรับอัพเดทข้อมูลโปรไฟล์\n  app.patch(\"/api/user/profile\", isAuthenticated, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const data = updateProfileSchema.parse(req.body);\n      \n      // อัพเดทข้อมูลผู้ใช้\n      const updatedUser = await storage.updateUserProfile(req.user.id, data);\n      \n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // อัพเดทข้อมูลใน session\n      req.login(updatedUser, (err) => {\n        if (err) {\n          return res.status(500).json({ message: \"Session update failed\" });\n        }\n        \n        // ส่งข้อมูลผู้ใช้กลับไปโดยไม่เปิดเผยรหัสผ่าน\n        const { password, ...userWithoutPassword } = updatedUser;\n        res.json(userWithoutPassword);\n      });\n    } catch (error) {\n      if (error instanceof ZodError) {\n        const validationError = fromZodError(error);\n        res.status(400).json({ message: validationError.message });\n      } else {\n        console.error(\"Profile update error:\", error);\n        res.status(500).json({ message: \"Failed to update profile\" });\n      }\n    }\n  });\n  \n  // API endpoint สำหรับเปลี่ยนรหัสผ่าน\n  app.post(\"/api/user/change-password\", isAuthenticated, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const data = changePasswordSchema.parse(req.body);\n      \n      // ดึงข้อมูลผู้ใช้\n      const user = await storage.getUser(req.user.id);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // ตรวจสอบรหัสผ่านปัจจุบัน\n      const passwordMatch = await comparePasswords(data.currentPassword, user.password);\n      \n      if (!passwordMatch) {\n        return res.status(400).json({ message: \"Current password is incorrect\" });\n      }\n      \n      // แฮชรหัสผ่านใหม่\n      const hashedPassword = await hashPassword(data.newPassword);\n      \n      // อัพเดทรหัสผ่าน\n      const updatedUser = await storage.updateUserPassword(req.user.id, hashedPassword);\n      \n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      res.json({ message: \"Password changed successfully\" });\n    } catch (error) {\n      if (error instanceof ZodError) {\n        const validationError = fromZodError(error);\n        res.status(400).json({ message: validationError.message });\n      } else {\n        console.error(\"Password change error:\", error);\n        res.status(500).json({ message: \"Failed to change password\" });\n      }\n    }\n  });\n\n  // API endpoint สำหรับแอดมินแก้ไขข้อมูลผู้ใช้\n  // ดึงข้อมูลบัญชีธนาคารทั้งหมดสำหรับแอดมิน\n  app.get(\"/api/admin/bank-accounts\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      // ใช้วิธีดึงข้อมูลแบบง่ายๆ แทนการใช้ relation เพื่อหลีกเลี่ยงปัญหา\n      const allBankAccounts = await db.select().from(bankAccounts);\n      \n      // ดึงข้อมูลผู้ใช้ทั้งหมด\n      const users = await storage.getAllUsers();\n      const usersMap = new Map(users.map(user => [user.id, user]));\n      \n      // รวมข้อมูลบัญชีธนาคารกับข้อมูลผู้ใช้\n      const bankAccountsWithUsers = allBankAccounts.map(account => {\n        const user = usersMap.get(account.userId);\n        return {\n          ...account,\n          user: user ? {\n            id: user.id,\n            username: user.username,\n            email: user.email\n          } : null\n        };\n      });\n      \n      res.json(bankAccountsWithUsers);\n    } catch (error) {\n      console.error(\"Error fetching bank accounts:\", error);\n      res.status(500).json({ message: \"Failed to fetch bank accounts\" });\n    }\n  });\n  \n  // แอดมินแก้ไขบัญชีธนาคาร\n  app.patch(\"/api/admin/bank-accounts/:id\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const bankAccountId = parseInt(req.params.id);\n      if (isNaN(bankAccountId)) {\n        return res.status(400).json({ message: \"Invalid bank account ID\" });\n      }\n      \n      // ตรวจสอบว่ามีบัญชีนี้อยู่หรือไม่\n      const bankAccount = await storage.getBankAccountById(bankAccountId);\n      if (!bankAccount) {\n        return res.status(404).json({ message: \"Bank account not found\" });\n      }\n      \n      // ข้อมูลที่สามารถแก้ไขได้\n      const { bankName, accountNumber, accountName } = req.body;\n      \n      // Validate the incoming data (basic validation)\n      if (!bankName || !accountNumber || !accountName) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n      \n      // ตรวจสอบว่าเลขที่บัญชีเป็นตัวเลขเท่านั้น\n      if (!/^\\d+$/.test(accountNumber)) {\n        return res.status(400).json({ message: \"Account number must contain only digits\" });\n      }\n      \n      // อัปเดตข้อมูลบัญชี\n      await db.update(bankAccounts)\n        .set({\n          bankName,\n          accountNumber,\n          accountName,\n          updatedAt: new Date()\n        })\n        .where(eq(bankAccounts.id, bankAccountId));\n      \n      // ดึงข้อมูลที่อัปเดตแล้ว\n      const updatedBankAccount = await storage.getBankAccountById(bankAccountId);\n      res.json(updatedBankAccount);\n    } catch (error) {\n      console.error(\"Error updating bank account:\", error);\n      res.status(500).json({ message: \"Failed to update bank account\" });\n    }\n  });\n  \n  app.patch(\"/api/admin/users/:id\", isAuthenticated, isAdminOrAgent, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const userId = parseInt(req.params.id);\n      if (isNaN(userId)) {\n        return res.status(400).json({ message: \"Invalid user ID\" });\n      }\n      \n      // ดึงข้อมูลผู้ใช้\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // ข้อมูลที่อนุญาตให้อัพเดท\n      const updateData: Partial<User> = {};\n      \n      if (req.body.email) updateData.email = req.body.email;\n      if (req.body.fullName) updateData.fullName = req.body.fullName;\n      \n      // เฉพาะ admin เท่านั้นที่สามารถเปลี่ยนบทบาทได้\n      if (req.body.role && req.user.role === \"admin\") {\n        updateData.role = req.body.role;\n      }\n      \n      if (req.body.balance) updateData.balance = req.body.balance;\n      \n      // อัพเดทรหัสผ่าน (ถ้ามี)\n      if (req.body.password) {\n        console.log(\"กำลังแฮชรหัสผ่านใหม่สำหรับผู้ใช้ ID:\", userId);\n        const hashedPassword = await hashPassword(req.body.password);\n        console.log(\"รหัสผ่านที่แฮชแล้ว:\", hashedPassword.substring(0, 20) + \"...\");\n        updateData.password = hashedPassword;\n      }\n      \n      // อัพเดทข้อมูลผู้ใช้\n      if (Object.keys(updateData).length > 0) {\n        const updatedUser = await storage.updateUser(userId, updateData);\n        if (!updatedUser) {\n          return res.status(404).json({ message: \"User not found\" });\n        }\n        \n        res.json(updatedUser);\n      } else {\n        res.status(400).json({ message: \"No data to update\" });\n      }\n    } catch (error) {\n      console.error(\"Error updating user:\", error);\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  // Admin Settings API\n  app.get(\"/api/admin/settings\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      // ดึงการตั้งค่าทั้งหมดจากฐานข้อมูล\n      const allSettings = await db.select().from(settings);\n      \n      // แปลงเป็น object\n      const settingsObj = allSettings.reduce((acc: any, setting) => {\n        acc[setting.key] = setting.value;\n        return acc;\n      }, {});\n      \n      res.json(settingsObj);\n    } catch (error) {\n      console.error(\"Error fetching settings:\", error);\n      res.status(500).json({ message: \"Failed to fetch settings\" });\n    }\n  });\n  \n  app.put(\"/api/admin/settings\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const {\n        trade_fee_percentage,\n        withdrawal_fee_percentage,\n        min_deposit_amount,\n        min_withdrawal_amount,\n        allow_trading,\n        allow_registrations,\n        maintenance_mode\n      } = req.body;\n      \n      // รายการการตั้งค่าที่อนุญาตให้อัปเดต\n      const allowedSettings = {\n        trade_fee_percentage,\n        withdrawal_fee_percentage,\n        min_deposit_amount,\n        min_withdrawal_amount,\n        allow_trading,\n        allow_registrations,\n        maintenance_mode\n      };\n      \n      // อัปเดตแต่ละการตั้งค่า\n      for (const [key, value] of Object.entries(allowedSettings)) {\n        if (value !== undefined) {\n          await db\n            .insert(settings)\n            .values({ key, value: String(value) })\n            .onConflictDoUpdate({\n              target: settings.key,\n              set: { value: String(value), updatedAt: new Date() }\n            });\n        }\n      }\n      \n      res.json({ message: \"Settings updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating settings:\", error);\n      res.status(500).json({ message: \"Failed to update settings\" });\n    }\n  });\n\n  // Register settings routes\n  registerSettingsRoutes(app);\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":38872},"server/settings.ts":{"content":"import { spawn } from \"child_process\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { Express, Request, Response, NextFunction } from \"express\";\nimport { storage } from \"./storage\";\nimport multer from \"multer\";\nimport { z } from \"zod\";\n\n// Define user type for TypeScript\ndeclare global {\n  namespace Express {\n    interface User {\n      id: number;\n      role: string;\n      [key: string]: any;\n    }\n  }\n}\n// Middleware to check if user is authenticated\nconst isAuthenticated = (req: Request, res: Response, next: NextFunction) => {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  res.status(401).json({ message: \"Unauthorized\" });\n};\n\n// Middleware to check if user is admin\nconst isAdmin = (req: Request, res: Response, next: NextFunction) => {\n  if (req.isAuthenticated() && req.user.role === \"admin\") {\n    return next();\n  }\n  res.status(403).json({ message: \"Forbidden\" });\n};\n\nconst backupDir = path.join(process.cwd(), \"backups\");\n\n// สร้างโฟลเดอร์สำหรับเก็บไฟล์สำรองข้อมูลถ้ายังไม่มี\nif (!fs.existsSync(backupDir)) {\n  fs.mkdirSync(backupDir, { recursive: true });\n}\n\n// ตั้งค่า Multer สำหรับรับไฟล์อัปโหลด\nconst upload = multer({\n  storage: multer.diskStorage({\n    destination: (req, file, cb) => {\n      cb(null, backupDir);\n    },\n    filename: (req, file, cb) => {\n      cb(null, `restore-${Date.now()}.sql`);\n    }\n  }),\n  limits: { fileSize: 50 * 1024 * 1024 } // จำกัดขนาดไฟล์ไม่เกิน 50MB\n});\n\n// สำหรับตรวจสอบและจัดการข้อมูลการตั้งค่า\nconst settingsSchema = z.object({\n  maintenanceMode: z.boolean().optional(),\n  maintenanceMessage: z.string().optional(),\n  allowRegistrations: z.boolean().optional(),\n  allowTrading: z.boolean().optional(),\n  siteName: z.string().optional(),\n  tradeFeePercentage: z.number().min(0).max(100).optional(),\n  withdrawalFeePercentage: z.number().min(0).max(100).optional(),\n  minDepositAmount: z.number().min(0).optional(),\n  minWithdrawalAmount: z.number().min(0).optional(),\n  tradeDurations: z.array(z.number()).optional(),\n  autoBackup: z.boolean().optional(),\n  backupFrequency: z.enum([\"hourly\", \"daily\", \"weekly\", \"monthly\"]).optional(),\n  // ข้อมูลบัญชีธนาคาร\n  bank_name: z.string().optional(),\n  bank_account_number: z.string().optional(),\n  bank_account_name: z.string().optional(),\n  // ข้อมูลพร้อมเพย์\n  promptpay_number: z.string().optional(),\n  promptpay_tax_id: z.string().optional(),\n  promptpay_name: z.string().optional(),\n});\n\nexport function registerSettingsRoutes(app: Express) {\n  // สร้างสำรองข้อมูล\n  app.post(\"/api/admin/settings/backup\", async (req: Request, res: Response) => {\n    try {\n      const timestamp = new Date().toISOString().replace(/[:.]/g, \"-\");\n      const filename = `backup-${timestamp}.sql`;\n      const filePath = path.join(backupDir, filename);\n\n      // สร้างคำสั่ง pg_dump\n      const dumpProcess = spawn(\"pg_dump\", [\n        \"--dbname=\" + process.env.DATABASE_URL,\n        \"--format=custom\",\n        \"--file=\" + filePath,\n      ]);\n\n      dumpProcess.stderr.on(\"data\", (data) => {\n        console.error(`pg_dump stderr: ${data}`);\n      });\n\n      dumpProcess.on(\"close\", (code) => {\n        if (code === 0) {\n          res.json({\n            success: true,\n            message: \"สำรองข้อมูลสำเร็จ\",\n            filename,\n            timestamp: new Date(),\n          });\n        } else {\n          res.status(500).json({\n            success: false,\n            message: \"เกิดข้อผิดพลาดในการสำรองข้อมูล\",\n          });\n        }\n      });\n    } catch (error) {\n      console.error(\"Backup error:\", error);\n      res.status(500).json({\n        success: false,\n        message: \"เกิดข้อผิดพลาดในการสำรองข้อมูล\",\n      });\n    }\n  });\n\n  // ดาวน์โหลดไฟล์สำรองข้อมูล\n  app.get(\"/api/admin/settings/backups/:filename\", isAuthenticated, isAdmin, (req: Request, res: Response) => {\n    try {\n      const filePath = path.join(backupDir, req.params.filename);\n      if (fs.existsSync(filePath)) {\n        res.download(filePath);\n      } else {\n        res.status(404).json({\n          success: false,\n          message: \"ไม่พบไฟล์สำรองข้อมูล\",\n        });\n      }\n    } catch (error) {\n      console.error(\"Error downloading backup:\", error);\n      res.status(500).json({\n        success: false,\n        message: \"เกิดข้อผิดพลาดในการดาวน์โหลดไฟล์สำรองข้อมูล\",\n      });\n    }\n  });\n\n  // กู้คืนฐานข้อมูล\n  app.post(\"/api/admin/settings/restore\", isAuthenticated, isAdmin, (req: Request, res: Response) => {\n    upload.single(\"backup\")(req, res, async (err) => {\n      if (err) {\n        return res.status(400).json({\n          success: false,\n          message: \"เกิดข้อผิดพลาดในการอัปโหลดไฟล์\",\n          error: err.message\n        });\n      }\n\n      try {\n        if (!req.file) {\n          return res.status(400).json({\n            success: false,\n            message: \"กรุณาอัปโหลดไฟล์สำรองข้อมูล\",\n          });\n        }\n\n        const filePath = req.file.path;\n\n        // ทำการคืนค่าข้อมูลด้วย pg_restore\n        const restoreProcess = spawn(\"pg_restore\", [\n          \"--dbname=\" + process.env.DATABASE_URL,\n          \"--clean\",\n          \"--if-exists\",\n          filePath,\n        ]);\n\n        let errorOutput = \"\";\n        restoreProcess.stderr.on(\"data\", (data) => {\n          errorOutput += data.toString();\n          console.error(`pg_restore stderr: ${data}`);\n        });\n\n        restoreProcess.on(\"close\", (code) => {\n          if (code === 0 || (errorOutput && errorOutput.includes(\"no matching relations\"))) {\n            res.json({\n              success: true,\n              message: \"กู้คืนข้อมูลสำเร็จ\",\n              timestamp: new Date(),\n            });\n          } else {\n            res.status(500).json({\n              success: false,\n              message: \"เกิดข้อผิดพลาดในการกู้คืนข้อมูล\",\n              error: errorOutput,\n            });\n          }\n        });\n      } catch (error) {\n        console.error(\"Restore error:\", error);\n        res.status(500).json({\n          success: false,\n          message: \"เกิดข้อผิดพลาดในการกู้คืนข้อมูล\",\n        });\n      }\n    });\n  });\n\n  // บันทึกการตั้งค่า\n  app.post(\"/api/admin/settings\", isAuthenticated, isAdmin, async (req: Request, res: Response) => {\n    try {\n      const result = settingsSchema.safeParse(req.body);\n      \n      if (!result.success) {\n        return res.status(400).json({\n          success: false,\n          message: \"ข้อมูลการตั้งค่าไม่ถูกต้อง\",\n          errors: result.error.format(),\n        });\n      }\n      \n      const data = result.data;\n      \n      // บันทึกการตั้งค่าบัญชีธนาคารและพร้อมเพย์ลงในฐานข้อมูล\n      const pool = new (await import('pg')).Pool({\n        connectionString: process.env.DATABASE_URL\n      });\n      \n      // รายการตั้งค่าที่จะบันทึก\n      const bankSettings = [\n        { key: 'bank_name', value: data.bank_name },\n        { key: 'bank_account_number', value: data.bank_account_number },\n        { key: 'bank_account_name', value: data.bank_account_name },\n        { key: 'promptpay_number', value: data.promptpay_number },\n        { key: 'promptpay_tax_id', value: data.promptpay_tax_id },\n        { key: 'promptpay_name', value: data.promptpay_name },\n      ];\n      \n      // อัปเดตทีละรายการ\n      for (const setting of bankSettings) {\n        if (setting.value) {\n          // UPSERT - อัปเดตถ้ามีอยู่แล้ว หรือเพิ่มใหม่ถ้ายังไม่มี\n          await pool.query(\n            `INSERT INTO settings (key, value, updated_at) \n             VALUES ($1, $2::jsonb, NOW()) \n             ON CONFLICT (key) \n             DO UPDATE SET value = $2::jsonb, updated_at = NOW()`,\n            [setting.key, JSON.stringify(setting.value)]\n          );\n        }\n      }\n      \n      await pool.end();\n      \n      res.json({\n        success: true,\n        message: \"บันทึกการตั้งค่าสำเร็จ\",\n        settings: data,\n      });\n    } catch (error) {\n      console.error(\"Settings update error:\", error);\n      res.status(500).json({\n        success: false,\n        message: \"เกิดข้อผิดพลาดในการบันทึกการตั้งค่า\",\n      });\n    }\n  });\n  \n  // บันทึกการตั้งค่าบัญชีธนาคารและพร้อมเพย์\n  app.post(\"/api/admin/deposit-accounts\", isAuthenticated, isAdmin, async (req: Request, res: Response) => {\n    try {\n      // ตรวจสอบข้อมูล\n      const depositAccountSchema = z.object({\n        bank: z.object({\n          name: z.string().min(1, \"โปรดระบุชื่อธนาคาร\"),\n          accountNumber: z.string().min(1, \"โปรดระบุเลขที่บัญชี\"),\n          accountName: z.string().min(1, \"โปรดระบุชื่อบัญชี\"),\n        }),\n        promptpay: z.object({\n          number: z.string(),\n          taxId: z.string(),\n          name: z.string().min(1, \"โปรดระบุชื่อบัญชีพร้อมเพย์\"),\n        }),\n      });\n      \n      const result = depositAccountSchema.safeParse(req.body);\n      \n      if (!result.success) {\n        return res.status(400).json({\n          success: false,\n          message: \"ข้อมูลบัญชีไม่ถูกต้อง\",\n          errors: result.error.format(),\n        });\n      }\n      \n      const data = result.data;\n      \n      // ตรวจสอบโหมดการทำงาน: in-memory หรือ database\n      if (process.env.NODE_ENV === 'development') {\n        // ใช้งานใน Memory Storage\n        const { memoryStorage } = await import('./memory-storage');\n        \n        // บันทึกข้อมูลในโหมด in-memory\n        await memoryStorage.saveDepositAccounts(data);\n        \n        console.log(\"บันทึกข้อมูลบัญชีธนาคารในโหมด in-memory:\", data);\n      } else {\n        // บันทึกการตั้งค่าลงในฐานข้อมูล\n        const { pool } = await import('./db');\n        \n        // รายการตั้งค่าที่จะบันทึก\n        const settings = [\n          { key: 'bank_name', value: data.bank.name },\n          { key: 'bank_account_number', value: data.bank.accountNumber },\n          { key: 'bank_account_name', value: data.bank.accountName },\n          { key: 'promptpay_number', value: data.promptpay.number },\n          { key: 'promptpay_tax_id', value: data.promptpay.taxId },\n          { key: 'promptpay_name', value: data.promptpay.name },\n        ];\n        \n        // อัปเดตทีละรายการ\n        for (const setting of settings) {\n          // UPSERT - อัปเดตถ้ามีอยู่แล้ว หรือเพิ่มใหม่ถ้ายังไม่มี\n          await pool.query(\n            `INSERT INTO settings (key, value, updated_at) \n             VALUES ($1, $2::text, NOW()) \n             ON CONFLICT (key) \n             DO UPDATE SET value = $2::text, updated_at = NOW()`,\n            [setting.key, setting.value]\n          );\n        }\n      }\n      \n      res.json({\n        success: true,\n        message: \"บันทึกข้อมูลบัญชีสำหรับฝากเงินสำเร็จ\",\n      });\n    } catch (error) {\n      console.error(\"Deposit accounts update error:\", error);\n      res.status(500).json({\n        success: false,\n        message: \"เกิดข้อผิดพลาดในการบันทึกข้อมูลบัญชี\",\n      });\n    }\n  });\n\n  // ดึงการตั้งค่าทั้งหมด\n  app.get(\"/api/admin/settings\", isAuthenticated, isAdmin, async (req: Request, res: Response) => {\n    try {\n      // ดึงข้อมูลจากตาราง settings\n      // ใช้ pool ที่มีอยู่แล้วจาก server/db.ts\n      const { pool } = await import('./db');\n      \n      const result = await pool.query('SELECT key, value FROM settings');\n      \n      // แปลงข้อมูลจาก DB เป็น object\n      const dbSettings = result.rows.reduce((acc, row) => {\n        acc[row.key] = row.value;\n        return acc;\n      }, {} as Record<string, string>);\n      \n      // จำลองการตั้งค่าเริ่มต้น\n      const settings = {\n        maintenanceMode: false,\n        maintenanceMessage: \"ระบบกำลังปิดปรับปรุงชั่วคราว กรุณากลับมาใหม่ในภายหลัง\",\n        allowRegistrations: true,\n        allowTrading: true,\n        siteName: \"Bitkub\",\n        tradeFeePercentage: 0.2,\n        withdrawalFeePercentage: 0.1,\n        minDepositAmount: 100,\n        minWithdrawalAmount: 100,\n        tradeDurations: [60, 180, 300, 600],\n        autoBackup: true,\n        backupFrequency: \"daily\",\n        // เพิ่มข้อมูลบัญชีธนาคารและพร้อมเพย์จาก DB\n        bank_name: dbSettings.bank_name || \"\",\n        bank_account_number: dbSettings.bank_account_number || \"\",\n        bank_account_name: dbSettings.bank_account_name || \"\",\n        promptpay_number: dbSettings.promptpay_number || \"\",\n        promptpay_tax_id: dbSettings.promptpay_tax_id || \"\",\n        promptpay_name: dbSettings.promptpay_name || \"\",\n      };\n      \n      // ไม่ต้อง end pool เพราะเป็น shared pool\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error fetching settings:\", error);\n      res.status(500).json({\n        success: false,\n        message: \"เกิดข้อผิดพลาดในการดึงข้อมูลการตั้งค่า\",\n      });\n    }\n  });\n  \n  // ดึงข้อมูลบัญชีธนาคารและพร้อมเพย์สำหรับการฝากเงิน (สำหรับผู้ใช้ทั่วไป)\n  app.get(\"/api/deposit-accounts\", async (req: Request, res: Response) => {\n    try {\n      let depositAccounts;\n      \n      // ตรวจสอบโหมดการทำงาน: in-memory หรือ database\n      if (process.env.NODE_ENV === 'development') {\n        // ใช้งานใน Memory Storage\n        const { memoryStorage } = await import('./memory-storage');\n        \n        // ดึงข้อมูลจาก in-memory storage\n        depositAccounts = await memoryStorage.getDepositAccounts();\n        \n        console.log(\"ดึงข้อมูลบัญชีธนาคารจากโหมด in-memory:\", depositAccounts);\n      } else {\n        // ใช้ pool ที่มีอยู่แล้วจาก server/db.ts\n        const { pool } = await import('./db');\n        \n        const result = await pool.query('SELECT key, value FROM settings WHERE key IN (\\'bank_name\\', \\'bank_account_number\\', \\'bank_account_name\\', \\'promptpay_number\\', \\'promptpay_tax_id\\', \\'promptpay_name\\')');\n        \n        // แปลงข้อมูลจาก DB เป็น object\n        const dbSettings = result.rows.reduce((acc, row) => {\n          acc[row.key] = row.value;\n          return acc;\n        }, {} as Record<string, string>);\n        \n        depositAccounts = {\n          bank: {\n            name: dbSettings.bank_name || \"\",\n            accountNumber: dbSettings.bank_account_number || \"\",\n            accountName: dbSettings.bank_account_name || \"\",\n          },\n          promptpay: {\n            number: dbSettings.promptpay_number || \"\",\n            taxId: dbSettings.promptpay_tax_id || \"\",\n            name: dbSettings.promptpay_name || \"\",\n          }\n        };\n        \n        console.log(\"ดึงข้อมูลบัญชีธนาคารจากฐานข้อมูล:\", depositAccounts);\n      }\n      \n      // ส่งข้อมูลไปยังผู้ใช้\n      res.json(depositAccounts);\n    } catch (error) {\n      console.error(\"Error fetching deposit accounts:\", error);\n      res.status(500).json({\n        success: false,\n        message: \"เกิดข้อผิดพลาดในการดึงข้อมูลบัญชีสำหรับฝากเงิน\",\n      });\n    }\n  });\n  \n  // เรียกดูรายชื่อไฟล์สำรองข้อมูลทั้งหมด\n  app.get(\"/api/admin/settings/backups\", isAuthenticated, isAdmin, (req: Request, res: Response) => {\n    try {\n      if (!fs.existsSync(backupDir)) {\n        return res.json([]);\n      }\n      \n      const files = fs.readdirSync(backupDir)\n        .filter(file => file.startsWith('backup-') && file.endsWith('.sql'))\n        .map(file => {\n          const stats = fs.statSync(path.join(backupDir, file));\n          return {\n            filename: file,\n            size: stats.size,\n            createdAt: stats.ctime,\n          };\n        })\n        .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n        \n      res.json(files);\n    } catch (error) {\n      console.error(\"Error listing backups:\", error);\n      res.status(500).json({\n        success: false,\n        message: \"เกิดข้อผิดพลาดในการดึงรายการไฟล์สำรองข้อมูล\",\n      });\n    }\n  });\n}","size_bytes":18891},"server/storage.ts":{"content":"import { \n  users, type User, type InsertUser, \n  trades, type Trade, type InsertTrade,\n  transactions, type Transaction, type InsertTransaction,\n  bankAccounts, type BankAccount, type InsertBankAccount\n} from \"@shared/schema\";\nimport { db, pool } from \"./db\";\nimport { eq, and, ne, count, sql } from \"drizzle-orm\";\nimport session from \"express-session\";\nimport MemoryStore from \"memorystore\";\n\nconst MemoryStoreSession = MemoryStore(session);\n\nexport interface IStorage {\n  // User operations\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  getAllUsers(): Promise<User[]>;\n  updateUserProfile(userId: number, profileData: Partial<User>): Promise<User | undefined>;\n  updateUserPassword(userId: number, newPassword: string): Promise<User | undefined>;\n  updateUser(userId: number, userData: Partial<User>): Promise<User | undefined>;\n  \n  // Balance operations\n  getUserBalance(userId: number): Promise<string>;\n  updateUserBalance(userId: number, newBalance: string): Promise<User | undefined>;\n  \n  // Bank account operations\n  createBankAccount(bankAccount: InsertBankAccount): Promise<BankAccount>;\n  getBankAccountsByUser(userId: number): Promise<BankAccount[]>;\n  updateBankAccountDefault(id: number, isDefault: boolean): Promise<BankAccount | undefined>;\n  updateBankAccount(id: number, bankAccountData: Partial<BankAccount>): Promise<BankAccount | undefined>;\n  deleteBankAccount(id: number): Promise<void>;\n  getBankAccountById(id: number): Promise<BankAccount | undefined>;\n  \n  // Trade operations\n  createTrade(trade: InsertTrade): Promise<Trade>;\n  getTradesByUser(userId: number): Promise<Trade[]>;\n  getAllTrades(): Promise<Trade[]>;\n  getActiveTrades(): Promise<Trade[]>;\n  updateTradeStatus(id: number, status: string, result?: string): Promise<Trade | undefined>;\n  \n  // Transaction operations\n  createTransaction(transaction: InsertTransaction): Promise<Transaction>;\n  getTransactionsByUser(userId: number): Promise<Transaction[]>;\n  getAllTransactions(): Promise<Transaction[]>;\n  updateTransactionStatus(id: number, status: string, note?: string): Promise<Transaction | undefined>;\n  \n  // Session store\n  sessionStore: session.Store;\n}\n\nexport class DatabaseStorage implements IStorage {\n  sessionStore: session.Store;\n  \n  constructor() {\n    this.sessionStore = new MemoryStoreSession({ \n      checkPeriod: 86400000 // ล้างเซสชันที่หมดอายุทุก 24 ชั่วโมง\n    });\n    console.log('✅ Using PostgreSQL database storage for persistence');\n  }\n  \n  async getUser(id: number): Promise<User | undefined> {\n    const [dbUser] = await db\n      .select({\n        id: users.id,\n        username: users.username,\n        password: users.password,\n        email: users.email,\n        fullName: users.fullName,\n        displayName: users.displayName,\n        phoneNumber: users.phoneNumber,\n        avatarUrl: users.avatarUrl,\n        role: users.role,\n        balance: users.balance,\n        createdAt: users.createdAt,\n        updatedAt: users.updatedAt\n      })\n      .from(users)\n      .where(eq(users.id, id));\n    \n    return dbUser;\n  }\n  \n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [dbUser] = await db\n      .select({\n        id: users.id,\n        username: users.username,\n        password: users.password,\n        email: users.email,\n        fullName: users.fullName,\n        displayName: users.displayName,\n        phoneNumber: users.phoneNumber,\n        avatarUrl: users.avatarUrl,\n        role: users.role,\n        balance: users.balance,\n        createdAt: users.createdAt,\n        updatedAt: users.updatedAt\n      })\n      .from(users)\n      .where(eq(users.username, username));\n    \n    return dbUser;\n  }\n  \n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [dbUser] = await db\n      .select({\n        id: users.id,\n        username: users.username,\n        password: users.password,\n        email: users.email,\n        fullName: users.fullName,\n        displayName: users.displayName,\n        phoneNumber: users.phoneNumber,\n        avatarUrl: users.avatarUrl,\n        role: users.role,\n        balance: users.balance,\n        createdAt: users.createdAt,\n        updatedAt: users.updatedAt\n      })\n      .from(users)\n      .where(eq(users.email, email));\n    \n    return dbUser;\n  }\n  \n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n  \n  async getAllUsers(): Promise<User[]> {\n    const dbUsers = await db\n      .select({\n        id: users.id,\n        username: users.username,\n        password: users.password,\n        email: users.email,\n        fullName: users.fullName,\n        displayName: users.displayName,\n        phoneNumber: users.phoneNumber,\n        avatarUrl: users.avatarUrl,\n        role: users.role,\n        balance: users.balance,\n        createdAt: users.createdAt,\n        updatedAt: users.updatedAt\n      })\n      .from(users);\n    \n    return dbUsers;\n  }\n  \n  // ฟังก์ชันสำหรับดึงข้อมูลยอดเงินของผู้ใช้\n  async getUserBalance(userId: number): Promise<string> {\n    const user = await this.getUser(userId);\n    if (!user) {\n      throw new Error(\"User not found\");\n    }\n    return user.balance;\n  }\n  \n  // ฟังก์ชันสำหรับอัพเดทยอดเงินของผู้ใช้\n  async updateUserBalance(userId: number, newBalance: string): Promise<User | undefined> {\n    const [updatedUser] = await db\n      .update(users)\n      .set({ balance: newBalance })\n      .where(eq(users.id, userId))\n      .returning();\n    return updatedUser;\n  }\n  \n  // === ฟังก์ชันเกี่ยวกับบัญชีธนาคาร ===\n  \n  // สร้างบัญชีธนาคารใหม่\n  async createBankAccount(insertBankAccount: InsertBankAccount): Promise<BankAccount> {\n    // ตรวจสอบว่าผู้ใช้มีบัญชีธนาคารไม่เกิน 2 บัญชี\n    const accountCount = await db\n      .select({ count: count() })\n      .from(bankAccounts)\n      .where(eq(bankAccounts.userId, insertBankAccount.userId));\n    \n    if (accountCount[0].count >= 2) {\n      throw new Error(\"ไม่สามารถเพิ่มบัญชีได้มากกว่า 2 บัญชี\");\n    }\n    \n    // ถ้าตั้งค่าเป็นบัญชีหลัก ให้ยกเลิกการเป็นบัญชีหลักของบัญชีอื่น\n    if (insertBankAccount.isDefault) {\n      await db\n        .update(bankAccounts)\n        .set({ isDefault: false })\n        .where(eq(bankAccounts.userId, insertBankAccount.userId));\n    }\n    \n    // ถ้าเป็นบัญชีแรก ให้ตั้งเป็นบัญชีหลักโดยอัตโนมัติ\n    if (accountCount[0].count === 0) {\n      insertBankAccount.isDefault = true;\n    }\n    \n    const [bankAccount] = await db.insert(bankAccounts).values(insertBankAccount).returning();\n    return bankAccount;\n  }\n  \n  // ดึงข้อมูลบัญชีธนาคารของผู้ใช้\n  async getBankAccountsByUser(userId: number): Promise<BankAccount[]> {\n    return db.select().from(bankAccounts).where(eq(bankAccounts.userId, userId));\n  }\n  \n  // อัพเดทสถานะบัญชีหลัก\n  async updateBankAccountDefault(id: number, isDefault: boolean): Promise<BankAccount | undefined> {\n    // ดึงข้อมูลบัญชี\n    const [bankAccount] = await db.select().from(bankAccounts).where(eq(bankAccounts.id, id));\n    if (!bankAccount) {\n      throw new Error(\"ไม่พบบัญชีธนาคาร\");\n    }\n    \n    // ถ้าตั้งเป็นบัญชีหลัก ต้องยกเลิกการเป็นบัญชีหลักของบัญชีอื่น\n    if (isDefault) {\n      await db\n        .update(bankAccounts)\n        .set({ isDefault: false })\n        .where(eq(bankAccounts.userId, bankAccount.userId));\n    }\n    \n    // อัพเดทสถานะบัญชีหลัก\n    const [updatedBankAccount] = await db\n      .update(bankAccounts)\n      .set({ isDefault, updatedAt: new Date() })\n      .where(eq(bankAccounts.id, id))\n      .returning();\n    \n    return updatedBankAccount;\n  }\n  \n  // ลบบัญชีธนาคาร\n  async deleteBankAccount(id: number): Promise<void> {\n    // ดึงข้อมูลบัญชี\n    const [bankAccount] = await db.select().from(bankAccounts).where(eq(bankAccounts.id, id));\n    if (!bankAccount) {\n      throw new Error(\"ไม่พบบัญชีธนาคาร\");\n    }\n    \n    // ตรวจสอบว่าเป็นบัญชีหลักหรือไม่\n    if (bankAccount.isDefault) {\n      // หาบัญชีอื่นของผู้ใช้\n      const otherAccounts = await db\n        .select()\n        .from(bankAccounts)\n        .where(and(\n          eq(bankAccounts.userId, bankAccount.userId),\n          ne(bankAccounts.id, id)\n        ));\n      \n      // ถ้ามีบัญชีอื่น ตั้งให้เป็นบัญชีหลักแทน\n      if (otherAccounts.length > 0) {\n        await this.updateBankAccountDefault(otherAccounts[0].id, true);\n      }\n    }\n    \n    // ลบบัญชี\n    await db.delete(bankAccounts).where(eq(bankAccounts.id, id));\n  }\n  \n  // ดึงข้อมูลบัญชีธนาคารตาม ID\n  async getBankAccountById(id: number): Promise<BankAccount | undefined> {\n    const [bankAccount] = await db.select().from(bankAccounts).where(eq(bankAccounts.id, id));\n    return bankAccount;\n  }\n  \n  // แก้ไขข้อมูลบัญชีธนาคาร\n  async updateBankAccount(id: number, bankAccountData: Partial<BankAccount>): Promise<BankAccount | undefined> {\n    // ตรวจสอบว่ามีบัญชีนี้อยู่จริงหรือไม่\n    const existingAccount = await this.getBankAccountById(id);\n    if (!existingAccount) {\n      throw new Error(\"ไม่พบบัญชีธนาคาร\");\n    }\n    \n    // อัพเดทข้อมูลบัญชี\n    const [updatedBankAccount] = await db\n      .update(bankAccounts)\n      .set({ \n        ...bankAccountData,\n        updatedAt: new Date() \n      })\n      .where(eq(bankAccounts.id, id))\n      .returning();\n    \n    return updatedBankAccount;\n  }\n  \n  async createTrade(insertTrade: InsertTrade): Promise<Trade> {\n    // ดึงยอดเงินของผู้ใช้\n    const currentBalance = await this.getUserBalance(insertTrade.userId);\n    \n    // ใช้จำนวนเงินที่ใส่โดยตรง ไม่ต้องคูณกับราคา BTC\n    const tradeValue = parseFloat(insertTrade.amount);\n    \n    // ตรวจสอบว่ามีเงินเพียงพอหรือไม่\n    if (parseFloat(currentBalance) < tradeValue) {\n      throw new Error(\"Insufficient balance\");\n    }\n    \n    // หักเงินจากบัญชี\n    const newBalance = (parseFloat(currentBalance) - tradeValue).toString();\n    await this.updateUserBalance(insertTrade.userId, newBalance);\n    \n    // บันทึกข้อมูลการเทรด\n    const [trade] = await db.insert(trades).values(insertTrade).returning();\n    return trade;\n  }\n  \n  async getTradesByUser(userId: number): Promise<Trade[]> {\n    return db.select().from(trades).where(eq(trades.userId, userId));\n  }\n  \n  async getAllTrades(): Promise<Trade[]> {\n    return db.select().from(trades);\n  }\n\n  // ฟังก์ชันสำหรับดึงการเทรดที่ยังคง active\n  async getActiveTrades(): Promise<Trade[]> {\n    return await db.select().from(trades).where(eq(trades.status, 'active'));\n  }\n  \n  async updateTradeStatus(id: number, status: string, result?: string, predeterminedResult?: string): Promise<Trade | undefined> {\n    // ดึงข้อมูลการเทรดก่อนอัพเดท\n    const [originalTrade] = await db.select().from(trades).where(eq(trades.id, id));\n    if (!originalTrade) {\n      throw new Error(\"Trade not found\");\n    }\n    \n    // ถ้ามีการกำหนดผลล่วงหน้า ให้อัพเดทผลการเทรดพร้อมกัน\n    const updateData: Partial<typeof trades.$inferSelect> = { \n      status, \n      closedAt: new Date() \n    };\n    \n    if (result) {\n      updateData.result = result;\n    }\n    \n    if (predeterminedResult) {\n      updateData.predeterminedResult = predeterminedResult;\n    }\n    \n    // อัพเดทสถานะ\n    const [trade] = await db\n      .update(trades)\n      .set(updateData)\n      .where(eq(trades.id, id))\n      .returning();\n    \n    // ถ้าเป็นการปิดการเทรดและชนะ ให้เพิ่มเงินกำไรและเงินลงทุนเข้าบัญชี\n    if (status === \"completed\" && result === \"win\") {\n      // ดึงยอดเงินปัจจุบันของผู้ใช้\n      const currentBalance = await this.getUserBalance(originalTrade.userId);\n      \n      // ใช้จำนวนเงินที่ลงทุนโดยตรง\n      const investmentValue = parseFloat(originalTrade.amount);\n      \n      // หาเปอร์เซ็นต์กำไรตามระยะเวลา\n      let profitPercentage = 0;\n      \n      // ดึงเปอร์เซ็นต์กำไรจากค่า duration ที่อาจเป็นตัวเลขหรือสตริง\n      const durationValue = originalTrade.duration;\n      \n      if (typeof durationValue === 'number') {\n        // กรณีที่ duration เป็นตัวเลขวินาที\n        if (durationValue === 60) profitPercentage = 30;\n        else if (durationValue === 120) profitPercentage = 40;\n        else if (durationValue === 300) profitPercentage = 50;\n        else profitPercentage = 30; // กรณีอื่นๆ\n      } else {\n        // กรณีที่ duration เป็นสตริง\n        switch (durationValue) {\n          case \"60S\": profitPercentage = 30; break;\n          case \"120S\": profitPercentage = 40; break;\n          case \"300S\": profitPercentage = 50; break;\n          case \"1 นาที\": profitPercentage = 30; break;\n          case \"2 นาที\": profitPercentage = 40; break;\n          case \"5 นาที\": profitPercentage = 50; break;\n          default: \n            // พยายามแปลงเป็นตัวเลขและเช็คค่า\n            const seconds = parseInt(durationValue);\n            if (!isNaN(seconds)) {\n              if (seconds === 60) profitPercentage = 30;\n              else if (seconds === 120) profitPercentage = 40;\n              else if (seconds === 300) profitPercentage = 50;\n              else profitPercentage = 30;\n            } else {\n              profitPercentage = 30; // ค่าเริ่มต้น\n            }\n        }\n      }\n      \n      // คำนวณกำไร\n      const profit = investmentValue * (profitPercentage / 100);\n      \n      // คำนวณยอดเงินใหม่ = เงินปัจจุบัน + เงินลงทุน + กำไร\n      // เมื่อเทรดชนะ จะได้รับทั้งเงินลงทุนคืนและกำไร\n      const newBalance = (parseFloat(currentBalance) + investmentValue + profit).toString();\n      \n      console.log(`การเทรดที่ชนะ: เงินลงทุน ${investmentValue}, กำไร ${profit}, ยอดเงินใหม่ ${newBalance}`);\n      \n      // อัพเดทยอดเงิน\n      await this.updateUserBalance(originalTrade.userId, newBalance);\n    }\n    \n    return trade;\n  }\n  \n  // ฟังก์ชันสำหรับสร้างธุรกรรมใหม่\n  async createTransaction(insertTransaction: InsertTransaction): Promise<Transaction> {\n    const [transaction] = await db.insert(transactions).values(insertTransaction).returning();\n    return transaction;\n  }\n  \n  // ฟังก์ชันสำหรับดึงรายการธุรกรรมของผู้ใช้\n  async getTransactionsByUser(userId: number): Promise<Transaction[]> {\n    // ดึงข้อมูลและเรียงลำดับด้วย JavaScript\n    const userTransactions = await db.select()\n      .from(transactions)\n      .where(eq(transactions.userId, userId));\n    \n    // เรียงตาม createdAt จากล่าสุดไปเก่าสุด\n    return userTransactions.sort((a, b) => \n      new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n    );\n  }\n  \n  // ฟังก์ชันสำหรับดึงรายการธุรกรรมทั้งหมด (สำหรับแอดมิน)\n  async getAllTransactions(): Promise<Transaction[]> {\n    // ดึงข้อมูลและเรียงลำดับด้วย JavaScript\n    const allTransactions = await db.select().from(transactions);\n    \n    // เรียงตาม createdAt จากล่าสุดไปเก่าสุด\n    return allTransactions.sort((a, b) => \n      new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n    );\n  }\n  \n  // ฟังก์ชันสำหรับอัพเดทสถานะธุรกรรม\n  async updateTransactionStatus(id: number, status: string, note?: string): Promise<Transaction | undefined> {\n    // ดึงข้อมูลธุรกรรมเดิม\n    const [originalTransaction] = await db.select().from(transactions).where(eq(transactions.id, id));\n    if (!originalTransaction) {\n      throw new Error(\"Transaction not found\");\n    }\n    \n    // อัพเดทสถานะ\n    const [transaction] = await db\n      .update(transactions)\n      .set({ \n        status, \n        note: note || originalTransaction.note,\n        updatedAt: new Date()\n      })\n      .where(eq(transactions.id, id))\n      .returning();\n    \n    // ถ้าเป็นการอนุมัติการฝากเงิน ให้เพิ่มเงินเข้าบัญชี\n    if (status === \"approved\" && originalTransaction.type === \"deposit\") {\n      // ดึงยอดเงินปัจจุบันของผู้ใช้\n      const currentBalance = await this.getUserBalance(originalTransaction.userId);\n      \n      // คำนวณยอดเงินใหม่\n      const newBalance = (parseFloat(currentBalance) + parseFloat(originalTransaction.amount)).toString();\n      \n      // อัพเดทยอดเงิน\n      await this.updateUserBalance(originalTransaction.userId, newBalance);\n    }\n    \n    // ถ้าเป็นการปฏิเสธการถอนเงิน ให้คืนเงินกลับเข้าบัญชี\n    if (status === \"rejected\" && originalTransaction.type === \"withdraw\") {\n      // ดึงยอดเงินปัจจุบันของผู้ใช้\n      const currentBalance = await this.getUserBalance(originalTransaction.userId);\n      \n      // คำนวณยอดเงินเมื่อคืนเงินกลับเข้าบัญชี\n      const newBalance = (parseFloat(currentBalance) + parseFloat(originalTransaction.amount)).toString();\n      \n      // อัพเดทยอดเงิน\n      await this.updateUserBalance(originalTransaction.userId, newBalance);\n    }\n    \n    // สำหรับการอายัด (frozen) เงินยังคงถูกหักอยู่ในระบบ ไม่มีการคืนเงิน\n    \n    return transaction;\n  }\n  \n  // ฟังก์ชันสำหรับอัพเดทข้อมูลโปรไฟล์ผู้ใช้\n  async updateUserProfile(userId: number, profileData: Partial<User>): Promise<User | undefined> {\n    // เตรียมข้อมูลสำหรับอัพเดท เฉพาะฟิลด์ที่มีอยู่แล้วในฐานข้อมูล\n    const updateData: Record<string, any> = {};\n    \n    if (profileData.email) {\n      updateData.email = profileData.email;\n    }\n    \n    // อัพเดทข้อมูลในฐานข้อมูล\n    const [dbUser] = await db\n      .update(users)\n      .set(updateData)\n      .where(eq(users.id, userId))\n      .returning({\n        id: users.id,\n        username: users.username,\n        password: users.password,\n        email: users.email,\n        fullName: users.fullName,\n        displayName: users.displayName,\n        phoneNumber: users.phoneNumber,\n        avatarUrl: users.avatarUrl,\n        role: users.role,\n        balance: users.balance,\n        createdAt: users.createdAt,\n        updatedAt: users.updatedAt\n      });\n    \n    if (dbUser) {\n      return dbUser;\n    }\n    \n    return undefined;\n  }\n  \n  // ฟังก์ชันสำหรับอัพเดทรหัสผ่านผู้ใช้\n  async updateUserPassword(userId: number, newPassword: string): Promise<User | undefined> {\n    // อัพเดทรหัสผ่านในฐานข้อมูล\n    const [dbUser] = await db\n      .update(users)\n      .set({ password: newPassword })\n      .where(eq(users.id, userId))\n      .returning({\n        id: users.id,\n        username: users.username,\n        password: users.password,\n        email: users.email,\n        fullName: users.fullName,\n        displayName: users.displayName,\n        phoneNumber: users.phoneNumber,\n        avatarUrl: users.avatarUrl,\n        role: users.role,\n        balance: users.balance,\n        createdAt: users.createdAt,\n        updatedAt: users.updatedAt\n      });\n    \n    if (dbUser) {\n      return dbUser;\n    }\n    \n    return undefined;\n  }\n  \n  // ฟังก์ชันสำหรับอัพเดทข้อมูลผู้ใช้ (สำหรับแอดมิน)\n  async updateUser(userId: number, userData: Partial<User>): Promise<User | undefined> {\n    // กรองเฉพาะข้อมูลที่สามารถอัพเดทได้ในฐานข้อมูล\n    const updateData: Record<string, any> = {};\n    \n    if (userData.email) updateData.email = userData.email;\n    if (userData.fullName) updateData.fullName = userData.fullName;\n    if (userData.role) updateData.role = userData.role;\n    if (userData.balance) updateData.balance = userData.balance;\n    if (userData.password) updateData.password = userData.password;\n    \n    // อัพเดทข้อมูลผู้ใช้\n    const [dbUser] = await db\n      .update(users)\n      .set(updateData)\n      .where(eq(users.id, userId))\n      .returning({\n        id: users.id,\n        username: users.username,\n        password: users.password,\n        email: users.email,\n        fullName: users.fullName,\n        displayName: users.displayName,\n        phoneNumber: users.phoneNumber,\n        avatarUrl: users.avatarUrl,\n        role: users.role,\n        balance: users.balance,\n        createdAt: users.createdAt,\n        updatedAt: users.updatedAt\n      });\n    \n    if (dbUser) {\n      return dbUser;\n    }\n    \n    return undefined;\n  }\n}\n\n// Export shared storage instance\nexport const storage = new DatabaseStorage();","size_bytes":24264},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/schema.ts":{"content":"import { pgTable, serial, text, timestamp, boolean, integer, json } from 'drizzle-orm/pg-core';\nimport { z } from 'zod';\n\n// User model\nexport const users = pgTable('users', {\n  id: serial('id').primaryKey(),\n  username: text('username').notNull().unique(),\n  email: text('email').notNull().unique(),\n  password: text('password').notNull(),\n  fullName: text('full_name'),\n  displayName: text('display_name'),\n  phoneNumber: text('phone_number'),\n  avatarUrl: text('avatar_url'),\n  role: text('role').default('user').notNull(),\n  balance: text('balance').default('0').notNull(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n});\n\n// Bank account model\nexport const bankAccounts = pgTable('bank_accounts', {\n  id: serial('id').primaryKey(),\n  userId: integer('user_id').notNull().references(() => users.id),\n  bankName: text('bank_name').notNull(),\n  accountNumber: text('account_number').notNull(),\n  accountName: text('account_name').notNull(),\n  isDefault: boolean('is_default').default(false).notNull(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n});\n\n// Trade model\nexport const trades = pgTable('trades', {\n  id: serial('id').primaryKey(),\n  userId: integer('user_id').notNull().references(() => users.id),\n  cryptoId: text('crypto_id').notNull(),\n  entryPrice: text('entry_price').notNull(),\n  amount: text('amount').notNull(),\n  direction: text('direction').notNull(), // 'up' or 'down'\n  duration: integer('duration').notNull(), // in seconds\n  status: text('status').default('active').notNull(), // 'active', 'completed', 'cancelled'\n  result: text('result'), // 'win' or 'lose'\n  predeterminedResult: text('predetermined_result'), // 'win' or 'lose'\n  profitPercentage: text('profit_percentage').notNull(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  closedAt: timestamp('closed_at'),\n  endTime: timestamp('end_time'),\n});\n\n// Transaction model\nexport const transactions = pgTable('transactions', {\n  id: serial('id').primaryKey(),\n  userId: integer('user_id').notNull().references(() => users.id),\n  type: text('type').notNull(), // 'deposit' or 'withdraw'\n  amount: text('amount').notNull(),\n  status: text('status').default('pending').notNull(), // 'pending', 'approved', 'rejected', 'frozen'\n  method: text('method'), // 'bank_transfer', 'promptpay', etc.\n  bankName: text('bank_name'),\n  bankAccount: text('bank_account'),\n  paymentProof: text('payment_proof'),\n  note: text('note'),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n});\n\n// Zod schemas for insertion\nexport const insertUserSchema = z.object({\n  username: z.string().min(1),\n  email: z.string().email(),\n  password: z.string().min(6),\n  role: z.enum(['user', 'admin', 'agent']).default('user'),\n  balance: z.string().default('0'),\n});\n\n// Login schema for authentication\nexport const loginSchema = z.object({\n  username: z.string().min(1, { message: \"กรุณากรอกชื่อผู้ใช้\" }),\n  password: z.string().min(1, { message: \"กรุณากรอกรหัสผ่าน\" }),\n});\n\nexport const insertBankAccountSchema = z.object({\n  userId: z.number(),\n  bankName: z.string(),\n  accountNumber: z.string(),\n  accountName: z.string(),\n  isDefault: z.boolean().default(false),\n});\n\nexport const insertTradeSchema = z.object({\n  userId: z.number(),\n  cryptoId: z.string(),\n  entryPrice: z.string(),\n  amount: z.string(),\n  direction: z.enum(['up', 'down']),\n  duration: z.number(),\n  profitPercentage: z.string(),\n  endTime: z.date().optional(),\n});\n\nexport const insertTransactionSchema = z.object({\n  userId: z.number(),\n  type: z.enum(['deposit', 'withdraw']),\n  amount: z.string(),\n  method: z.string().optional(),\n  bankName: z.string().optional(),\n  bankAccount: z.string().optional(),\n  paymentProof: z.string().optional(),\n  note: z.string().optional(),\n});\n\n// TypeScript types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type SelectUser = typeof users.$inferSelect;\n\nexport type BankAccount = typeof bankAccounts.$inferSelect;\nexport type InsertBankAccount = z.infer<typeof insertBankAccountSchema>;\n\nexport type Trade = typeof trades.$inferSelect;\nexport type InsertTrade = z.infer<typeof insertTradeSchema>;\n\nexport type Transaction = typeof transactions.$inferSelect;\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\n\n// Settings model\nexport const settings = pgTable('settings', {\n  id: serial('id').primaryKey(),\n  key: text('key').notNull().unique(),\n  value: json('value').notNull(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n});\n\nexport const insertSettingsSchema = z.object({\n  key: z.string(),\n  value: z.any(),\n});\n\nexport type Setting = typeof settings.$inferSelect;\nexport type InsertSetting = z.infer<typeof insertSettingsSchema>;\n\n// Additional type for cryptocurrency data\nexport type CryptoCurrency = {\n  id: string;\n  symbol: string;\n  name: string;\n  image: string;\n  current_price: number;\n  market_cap: number;\n  market_cap_rank: number;\n  price_change_percentage_24h: number;\n  price_change_percentage_7d?: number;\n  price_change_percentage_30d?: number;\n  sparkline_in_7d?: {\n    price: number[];\n  };\n  total_volume: number;\n  high_24h: number;\n  low_24h: number;\n};","size_bytes":5532},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport { ProtectedRoute, AdminRoute } from \"@/lib/protected-route\";\nimport { WebSocketProvider } from \"@/contexts/websocket-context\";\nimport { SplashScreen } from \"@/components/splash-screen\";\nimport { useState, useEffect } from \"react\";\nimport { ThemeProvider } from \"next-themes\";\n\nimport NotFound from \"@/pages/not-found\";\nimport HomePage from \"@/pages/home-page\";\nimport AuthPage from \"@/pages/auth-page\";\nimport TradingPage from \"@/pages/trading-page\";\nimport AdminPage from \"@/pages/admin-page\";\nimport AdminDashboardPage from \"@/pages/admin-dashboard-page\";\nimport AdminUsersPage from \"@/pages/admin-users-page\";\nimport AdminTransactionsPage from \"@/pages/admin-transactions-page\";\nimport AdminTradesPage from \"@/pages/admin-trades-page\";\nimport AdminReportsPage from \"@/pages/admin-reports-page\";\nimport AdminSettingsPage from \"@/pages/admin-settings-page\";\nimport WalletPage from \"@/pages/wallet-page\";\nimport ProfilePage from \"@/pages/profile-page\";\nimport NewsPage from \"@/pages/news-page\";\nimport TradeHistoryPage from \"@/pages/trade-history-page\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <ProtectedRoute path=\"/\" component={HomePage} />\n      <ProtectedRoute path=\"/trade\" component={TradingPage} />\n      <ProtectedRoute path=\"/trades/history\" component={TradeHistoryPage} />\n      <ProtectedRoute path=\"/wallet\" component={WalletPage} />\n      <ProtectedRoute path=\"/profile\" component={ProfilePage} />\n      <ProtectedRoute path=\"/news\" component={NewsPage} />\n      <AdminRoute path=\"/admin\" component={AdminDashboardPage} />\n      <AdminRoute path=\"/admin/users\" component={AdminUsersPage} />\n      <AdminRoute path=\"/admin/transactions\" component={AdminTransactionsPage} />\n      <AdminRoute path=\"/admin/trades\" component={AdminTradesPage} />\n      <AdminRoute path=\"/admin/reports\" component={AdminReportsPage} />\n      <AdminRoute path=\"/admin/settings\" component={AdminSettingsPage} />\n      <AdminRoute path=\"/admin/old\" component={AdminPage} />\n      <Route path=\"/auth\" component={AuthPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  const [showSplash, setShowSplash] = useState(true);\n\n  // แสดง splash screen ทุกครั้งที่มีการรีเฟรช\n  // ไม่มีการเช็ค session storage แล้ว\n\n  const handleSplashComplete = () => {\n    setShowSplash(false);\n    // ไม่ต้องบันทึกค่าใน sessionStorage แล้ว เพื่อให้แสดงทุกครั้งที่รีเฟรช\n  };\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider attribute=\"class\" defaultTheme=\"light\" enableSystem>\n        <AuthProvider>\n          <WebSocketProvider>\n            <TooltipProvider>\n              <Toaster />\n              {showSplash ? (\n                <SplashScreen onComplete={handleSplashComplete} />\n              ) : (\n                <>\n                  <Router />\n                </>\n              )}\n            </TooltipProvider>\n          </WebSocketProvider>\n        </AuthProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3498},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 210 20% 98%;\n    --foreground: 222.2 84% 4.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 84% 4.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 84% 4.9%;\n    --primary: 210 100% 50%;\n    --primary-foreground: 210 40% 98%;\n    --secondary: 210 40% 96.1%;\n    --secondary-foreground: 222.2 47.4% 11.2%;\n    --muted: 210 40% 96.1%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n    --accent: 210 40% 96.1%;\n    --accent-foreground: 222.2 47.4% 11.2%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 210 100% 50%;\n    --radius: 0.5rem;\n  }\n \n  .dark {\n    --background: 240 10% 3.9%;\n    --foreground: 0 0% 98%;\n    --card: 240 10% 3.9%;\n    --card-foreground: 0 0% 98%;\n    --popover: 240 10% 3.9%;\n    --popover-foreground: 0 0% 98%;\n    --primary: 210 100% 50%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 240 3.7% 15.9%;\n    --secondary-foreground: 0 0% 98%;\n    --muted: 240 3.7% 15.9%;\n    --muted-foreground: 240 5% 64.9%;\n    --accent: 240 3.7% 15.9%;\n    --accent-foreground: 0 0% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 240 3.7% 15.9%;\n    --input: 240 3.7% 15.9%;\n    --ring: 210 100% 50%;\n  }\n}\n\n/* เมื่อเปลี่ยนธีม ให้เปลี่ยนสีเนียน ๆ */\n* {\n  transition: background-color 0.25s ease-in-out, border-color 0.25s ease-in-out;\n}\n\n/* ปรับแต่งธีมกลางคืน */\n.dark body {\n  background-color: hsl(var(--background));\n  color: hsl(var(--foreground));\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n\n  /* ปิดการแสดง scrollbar แต่ยังสามารถ scroll ได้ */\n  ::-webkit-scrollbar {\n    display: none;\n  }\n  \n  /* ซ่อน scrollbar สำหรับ IE, Edge และ Firefox */\n  * {\n    -ms-overflow-style: none;  /* IE และ Edge */\n    scrollbar-width: none;  /* Firefox */\n  }\n}\n\n/* สไตล์สำหรับการ์ด */\n.crypto-card {\n  @apply bg-black border-0;\n}\n\n.crypto-card:not(:last-child) {\n  @apply border-b border-gray-800;\n}\n\n.crypto-symbol {\n  @apply font-medium text-white;\n}\n\n.crypto-pair {\n  @apply text-xs text-gray-400;\n}\n\n.crypto-price-up {\n  @apply text-green-500 font-semibold;\n}\n\n.crypto-price-down {\n  @apply text-red-500 font-semibold;\n}\n\n.dark .crypto-price-up {\n  @apply text-green-400 font-semibold;\n}\n\n.dark .crypto-price-down {\n  @apply text-red-400 font-semibold;\n}\n\n.chart-icon {\n  @apply text-blue-400;\n}\n\n/* เพิ่ม animation keyframes */\n@keyframes progressShine {\n  0% {\n    transform: translateX(-200%);\n  }\n  100% {\n    transform: translateX(200%);\n  }\n}\n\n@keyframes floatUp {\n  0% {\n    transform: translateY(0) scale(1);\n    opacity: 0.5;\n  }\n  100% {\n    transform: translateY(-1000px) scale(0);\n    opacity: 0;\n  }\n}\n\n@keyframes spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes pulse {\n  0% {\n    transform: scale(1);\n    opacity: 1;\n  }\n  50% {\n    transform: scale(1.1);\n    opacity: 0.8;\n  }\n  100% {\n    transform: scale(1);\n    opacity: 1;\n  }\n}","size_bytes":3379},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ad-slider.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport {\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselNext,\n  CarouselPrevious,\n} from \"@/components/ui/carousel\";\nimport { useEffect, useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\n// Import รูปภาพจาก assets\nimport aspSlide1 from \"@assets/ASP_1758695654331.jpg\";\nimport aspSlide2 from \"@assets/เอเซีย-พลัส_1758695663097.jpg\";\nimport aspSlide3 from \"@assets/9e580530fe2e1b35827f96b7f38b3804_1758695673871.jpg\";\nimport aspSlide4 from \"@assets/w644 (1)_1758695727957.jpg\";\nimport aspSlide5 from \"@assets/gVPK6VaFv8EDKlvFu0Ae_1758695731786.webp\";\nimport aspSlide6 from \"@assets/Asia-Plus-Securities_1758695735624.jpg\";\nimport aspSlide7 from \"@assets/cover-2025-03-12T160142.887-728x485_1758695739619.jpg\";\nimport aspSlide8 from \"@assets/maxresdefault_1758695766041.jpg\";\nimport aspSlide9 from \"@assets/dFQROr7oWzulq5Fa6rMcj3s4BADfMk6633SASIAgmAUBeoX55uRZ6D6gsPq1bLs2t84_1758695773000.jpg\";\n\nexport function AdSlider() {\n  const [api, setApi] = useState<any>();\n  const [activeIndex, setActiveIndex] = useState(0);\n  \n  // ใช้รูปภาพใหม่จาก Asia Plus Securities\n  const imageArray = [\n    { src: aspSlide1, alt: \"Asia Plus Securities - ที่ปรึกษาการลงทุนมืออาชีพ\" },\n    { src: aspSlide2, alt: \"Asia Plus Securities - เทคโนโลยีการลงทุนสมัยใหม่\" },\n    { src: aspSlide3, alt: \"Asia Plus Securities - ส่อง 15 หุ้นไทย ต่างชาติซื้อขายมากสุดในปี 67\" },\n    { src: aspSlide4, alt: \"Asia Plus Securities - เอเชียพลัส ส่องกำไรกู้วิกฤติ ซื้อเหมาะเทนตรอลหาร์ ชู Top Pick\" },\n    { src: aspSlide5, alt: \"Asia Plus Securities - การลงทุนอัจฉริยะด้วยเทคโนโลยี\" },\n    { src: aspSlide6, alt: \"Asia Plus Securities - วิเคราะห์ตลาดหุ้นด้วยข้อมูลแม่นยำ\" },\n    { src: aspSlide7, alt: \"Asia Plus Securities - ผู้บริหารมืออาชีพ\" },\n    { src: aspSlide8, alt: \"Asia Plus Securities - เปิดโอกาสการลงทุนในต่างประเทศ\" },\n    { src: aspSlide9, alt: \"Asia Plus Securities - การลงทุนในตลาดไทย\" }\n  ];\n\n  useEffect(() => {\n    if (!api) return;\n    \n    // เมื่อมีการเปลี่ยนแปลงใน active slide ของ Carousel, อัพเดท activeIndex\n    const onSelect = () => {\n      if (!api) return;\n      setActiveIndex(api.selectedScrollSnap());\n    };\n    \n    api.on(\"select\", onSelect);\n    \n    // Auto-advance slides\n    const interval = setInterval(() => {\n      api.scrollNext();\n    }, 3000);\n    \n    return () => {\n      api.off(\"select\", onSelect);\n      clearInterval(interval);\n    };\n  }, [api]);\n\n  // เมื่อ activeIndex เปลี่ยน ให้เลื่อนไปยัง slide นั้น\n  useEffect(() => {\n    if (!api) return;\n    api.scrollTo(activeIndex);\n  }, [activeIndex, api]);\n\n  return (\n    <div className=\"w-full\">\n      <Carousel\n        className=\"w-full relative\"\n        setApi={setApi}\n        opts={{ loop: true }}>\n        <CarouselContent>\n          {imageArray.map((image, index) => (\n            <CarouselItem key={index}>\n              <div className=\"overflow-hidden rounded-lg shadow-lg\">\n                <img \n                  src={image.src} \n                  alt={image.alt}\n                  className=\"w-full h-64 object-cover\"\n                  onError={(e) => {\n                    console.error(`Failed to load image: ${image.alt}`);\n                    e.currentTarget.onerror = null;\n                    e.currentTarget.src = aspSlide1; \n                  }}\n                />\n              </div>\n            </CarouselItem>\n          ))}\n        </CarouselContent>\n        \n        <div className=\"flex justify-center mt-4\">\n          <div className=\"flex space-x-1.5\">\n            {imageArray.map((_, index) => (\n              <button\n                key={index}\n                onClick={() => setActiveIndex(index)}\n                className={cn(\n                  \"w-2 h-2 rounded-full transition-all duration-300\",\n                  activeIndex === index ? \"bg-primary w-3\" : \"bg-gray-300\"\n                )}\n                aria-label={`Go to slide ${index + 1}`}\n              />\n            ))}\n          </div>\n        </div>\n        \n        {/* ปุ่มนำทางถูกลบออกตามความต้องการของผู้ใช้ */}\n      </Carousel>\n    </div>\n  );\n}","size_bytes":4882},"client/src/components/bank-account-manager.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Loader2, Plus, Check, Pencil, Trash2 } from \"lucide-react\";\nimport { BankAccount } from \"@shared/schema\";\nimport { Separator } from \"@/components/ui/separator\";\n\n// Component to add a new bank account\nexport function AddBankAccountDialog({ \n  open, \n  onOpenChange \n}: { \n  open: boolean; \n  onOpenChange: (open: boolean) => void \n}) {\n  const { toast } = useToast();\n  const [bankAccount, setBankAccount] = useState(\"\");\n  const [bankName, setBankName] = useState(\"กสิกรไทย\");\n  const [accountName, setAccountName] = useState(\"\");\n  \n  // ดึงข้อมูลบัญชีธนาคารที่ผูกไว้\n  const {\n    data: bankAccounts,\n  } = useQuery<BankAccount[]>({\n    queryKey: [\"/api/bank-accounts\"],\n  });\n  \n  // Mutation สำหรับเพิ่มบัญชีธนาคาร\n  const addBankAccountMutation = useMutation({\n    mutationFn: async (data: { \n      bankName: string; \n      accountNumber: string; \n      accountName: string;\n      isDefault: boolean;\n    }) => {\n      const res = await apiRequest(\"POST\", \"/api/bank-accounts\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bank-accounts\"] });\n      toast({\n        title: \"เพิ่มบัญชีธนาคารสำเร็จ\",\n        description: \"บัญชีธนาคารได้รับการบันทึกเรียบร้อยแล้ว\",\n      });\n      onOpenChange(false);\n      resetForm();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"เกิดข้อผิดพลาด\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n  \n  const resetForm = () => {\n    setBankAccount(\"\");\n    setBankName(\"กสิกรไทย\");\n    setAccountName(\"\");\n  };\n  \n  const handleAddBankAccount = () => {\n    if (!bankName || !bankAccount || !accountName) {\n      toast({\n        title: \"ข้อมูลไม่ครบถ้วน\",\n        description: \"กรุณาระบุชื่อธนาคาร, เลขที่บัญชี และชื่อบัญชี\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    // ตรวจสอบว่าเลขที่บัญชีเป็นตัวเลขเท่านั้น\n    if (!/^\\d+$/.test(bankAccount)) {\n      toast({\n        title: \"เลขที่บัญชีไม่ถูกต้อง\",\n        description: \"เลขที่บัญชีต้องเป็นตัวเลขเท่านั้น\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    // ตรวจสอบจำนวนบัญชีที่มีอยู่ (สูงสุดไม่เกิน 2 บัญชี)\n    if (bankAccounts && bankAccounts.length >= 2) {\n      toast({\n        title: \"ไม่สามารถเพิ่มบัญชีได้\",\n        description: \"คุณสามารถเพิ่มบัญชีได้สูงสุด 2 บัญชีเท่านั้น กรุณาลบบัญชีเดิมก่อน\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    // เช็คว่ามีบัญชีอยู่แล้วหรือไม่ ถ้าไม่มีให้ตั้งเป็นบัญชีหลัก\n    const isFirstAccount = !bankAccounts || bankAccounts.length === 0;\n    \n    addBankAccountMutation.mutate({\n      bankName,\n      accountNumber: bankAccount,\n      accountName,\n      isDefault: isFirstAccount\n    });\n  };\n  \n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>เพิ่มบัญชีธนาคาร</DialogTitle>\n          <DialogDescription>\n            เพิ่มบัญชีธนาคารสำหรับรับเงินเมื่อถอน (สูงสุด 2 บัญชี)\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"space-y-4 py-2\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"bank-name\">ธนาคาร</Label>\n            <select \n              id=\"bank-name\"\n              className=\"w-full p-2 border rounded-md\"\n              value={bankName}\n              onChange={(e) => setBankName(e.target.value)}\n            >\n              <option value=\"กสิกรไทย\">กสิกรไทย</option>\n              <option value=\"ไทยพาณิชย์\">ไทยพาณิชย์</option>\n              <option value=\"กรุงเทพ\">กรุงเทพ</option>\n              <option value=\"กรุงไทย\">กรุงไทย</option>\n              <option value=\"ทหารไทยธนชาต\">ทหารไทยธนชาต</option>\n              <option value=\"กรุงศรีอยุธยา\">กรุงศรีอยุธยา</option>\n            </select>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"account-number\">เลขที่บัญชี</Label>\n            <Input\n              id=\"account-number\"\n              type=\"text\"\n              value={bankAccount}\n              onChange={(e) => setBankAccount(e.target.value.replace(/[^0-9]/g, ''))}\n              placeholder=\"เลขที่บัญชี 10 หลัก\"\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"account-name\">ชื่อบัญชี</Label>\n            <Input\n              id=\"account-name\"\n              type=\"text\"\n              value={accountName}\n              onChange={(e) => setAccountName(e.target.value)}\n              placeholder=\"ชื่อเจ้าของบัญชี\"\n            />\n          </div>\n        </div>\n        \n        <DialogFooter>\n          <Button\n            onClick={handleAddBankAccount}\n            disabled={addBankAccountMutation.isPending}\n            className=\"w-full\"\n          >\n            {addBankAccountMutation.isPending ? (\n              <><Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> กำลังเพิ่มบัญชี</>\n            ) : (\n              \"เพิ่มบัญชีธนาคาร\"\n            )}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n// Component to edit an existing bank account\nexport function EditBankAccountDialog({ \n  open, \n  onOpenChange,\n  account\n}: { \n  open: boolean; \n  onOpenChange: (open: boolean) => void;\n  account: BankAccount | null;\n}) {\n  const { toast } = useToast();\n  const [bankAccount, setBankAccount] = useState(\"\");\n  const [bankName, setBankName] = useState(\"กสิกรไทย\");\n  const [accountName, setAccountName] = useState(\"\");\n  \n  // Update form values when account changes\n  useEffect(() => {\n    if (account) {\n      setBankName(account.bankName);\n      setBankAccount(account.accountNumber);\n      setAccountName(account.accountName);\n    }\n  }, [account]);\n  \n  // Mutation สำหรับแก้ไขบัญชีธนาคาร\n  const editBankAccountMutation = useMutation({\n    mutationFn: async (data: { \n      id: number;\n      bankName: string; \n      accountNumber: string; \n      accountName: string;\n    }) => {\n      const res = await apiRequest(\"PATCH\", `/api/bank-accounts/${data.id}`, {\n        bankName: data.bankName,\n        accountNumber: data.accountNumber,\n        accountName: data.accountName\n      });\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bank-accounts\"] });\n      toast({\n        title: \"แก้ไขบัญชีธนาคารสำเร็จ\",\n        description: \"บัญชีธนาคารได้รับการแก้ไขเรียบร้อยแล้ว\",\n      });\n      onOpenChange(false);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"เกิดข้อผิดพลาด\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n  \n  const handleEditBankAccount = () => {\n    if (!account) return;\n    \n    if (!bankName || !bankAccount || !accountName) {\n      toast({\n        title: \"ข้อมูลไม่ครบถ้วน\",\n        description: \"กรุณาระบุชื่อธนาคาร, เลขที่บัญชี และชื่อบัญชี\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    // ตรวจสอบว่าเลขที่บัญชีเป็นตัวเลขเท่านั้น\n    if (!/^\\d+$/.test(bankAccount)) {\n      toast({\n        title: \"เลขที่บัญชีไม่ถูกต้อง\",\n        description: \"เลขที่บัญชีต้องเป็นตัวเลขเท่านั้น\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    editBankAccountMutation.mutate({\n      id: account.id,\n      bankName,\n      accountNumber: bankAccount,\n      accountName\n    });\n  };\n  \n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>แก้ไขบัญชีธนาคาร</DialogTitle>\n          <DialogDescription>\n            แก้ไขข้อมูลบัญชีธนาคารของคุณ\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"space-y-4 py-2\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"bank-name\">ธนาคาร</Label>\n            <select \n              id=\"bank-name\"\n              className=\"w-full p-2 border rounded-md\"\n              value={bankName}\n              onChange={(e) => setBankName(e.target.value)}\n            >\n              <option value=\"กสิกรไทย\">กสิกรไทย</option>\n              <option value=\"ไทยพาณิชย์\">ไทยพาณิชย์</option>\n              <option value=\"กรุงเทพ\">กรุงเทพ</option>\n              <option value=\"กรุงไทย\">กรุงไทย</option>\n              <option value=\"ทหารไทยธนชาต\">ทหารไทยธนชาต</option>\n              <option value=\"กรุงศรีอยุธยา\">กรุงศรีอยุธยา</option>\n            </select>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"account-number\">เลขที่บัญชี</Label>\n            <Input\n              id=\"account-number\"\n              type=\"text\"\n              value={bankAccount}\n              onChange={(e) => setBankAccount(e.target.value.replace(/[^0-9]/g, ''))}\n              placeholder=\"เลขที่บัญชี 10 หลัก\"\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"account-name\">ชื่อบัญชี</Label>\n            <Input\n              id=\"account-name\"\n              type=\"text\"\n              value={accountName}\n              onChange={(e) => setAccountName(e.target.value)}\n              placeholder=\"ชื่อเจ้าของบัญชี\"\n            />\n          </div>\n        </div>\n        \n        <DialogFooter>\n          <Button\n            variant=\"outline\"\n            onClick={() => onOpenChange(false)}\n          >\n            ยกเลิก\n          </Button>\n          <Button\n            onClick={handleEditBankAccount}\n            disabled={editBankAccountMutation.isPending}\n          >\n            {editBankAccountMutation.isPending ? (\n              <><Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> กำลังบันทึก</>\n            ) : (\n              \"บันทึกการแก้ไข\"\n            )}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n// Component to manage bank accounts\nexport function ManageBankAccountsDialog({\n  open,\n  onOpenChange,\n  onAddNewClick\n}: {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onAddNewClick: () => void;\n}) {\n  const { toast } = useToast();\n  const [showEditDialog, setShowEditDialog] = useState(false);\n  const [selectedAccount, setSelectedAccount] = useState<BankAccount | null>(null);\n  \n  // ดึงข้อมูลบัญชีธนาคารที่ผูกไว้\n  const {\n    data: bankAccounts,\n    isLoading: isLoadingBankAccounts,\n    error: bankAccountsError,\n    refetch: refetchBankAccounts\n  } = useQuery<BankAccount[]>({\n    queryKey: [\"/api/bank-accounts\"],\n  });\n  \n  // Mutation สำหรับลบบัญชีธนาคาร\n  const deleteBankAccountMutation = useMutation({\n    mutationFn: async (bankAccountId: number) => {\n      const res = await apiRequest(\"DELETE\", `/api/bank-accounts/${bankAccountId}`);\n      return res.ok;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bank-accounts\"] });\n      toast({\n        title: \"ลบบัญชีธนาคารสำเร็จ\",\n        description: \"บัญชีธนาคารได้ถูกลบเรียบร้อยแล้ว\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"เกิดข้อผิดพลาด\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n  \n  // Mutation สำหรับตั้งบัญชีธนาคารเป็นค่าเริ่มต้น\n  const setDefaultBankAccountMutation = useMutation({\n    mutationFn: async (bankAccountId: number) => {\n      const res = await apiRequest(\"PATCH\", `/api/bank-accounts/${bankAccountId}/default`, {});\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bank-accounts\"] });\n      toast({\n        title: \"ตั้งค่าบัญชีหลักสำเร็จ\",\n        description: \"บัญชีธนาคารได้ถูกตั้งเป็นบัญชีหลักเรียบร้อยแล้ว\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"เกิดข้อผิดพลาด\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n  \n  const handleEdit = (account: BankAccount) => {\n    setSelectedAccount(account);\n    setShowEditDialog(true);\n  };\n  \n  const handleDelete = (accountId: number) => {\n    if (confirm(\"คุณต้องการลบบัญชีธนาคารนี้ใช่หรือไม่?\")) {\n      deleteBankAccountMutation.mutate(accountId);\n    }\n  };\n  \n  return (\n    <>\n      <Dialog open={open} onOpenChange={onOpenChange}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>จัดการบัญชีธนาคาร</DialogTitle>\n            <DialogDescription>\n              จัดการบัญชีธนาคารสำหรับรับเงินเมื่อถอน (สูงสุด 2 บัญชี)\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4 py-2\">\n            {isLoadingBankAccounts ? (\n              <div className=\"flex justify-center py-8\">\n                <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n              </div>\n            ) : bankAccountsError ? (\n              <div className=\"text-center text-red-500 py-6\">\n                เกิดข้อผิดพลาดในการโหลดข้อมูล กรุณาลองใหม่อีกครั้ง\n              </div>\n            ) : !bankAccounts || bankAccounts.length === 0 ? (\n              <div className=\"text-center py-6\">\n                <p className=\"text-muted-foreground mb-4\">คุณยังไม่มีบัญชีธนาคารที่บันทึกไว้</p>\n                <Button onClick={onAddNewClick}>\n                  <Plus className=\"mr-2 h-4 w-4\" /> เพิ่มบัญชีใหม่\n                </Button>\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {bankAccounts.map((account) => (\n                  <div \n                    key={account.id}\n                    className={`p-3 border rounded-lg ${account.isDefault ? 'border-primary' : ''}`}\n                  >\n                    <div className=\"flex justify-between items-start\">\n                      <div>\n                        <div className=\"font-medium flex items-center\">\n                          {account.bankName}\n                          {account.isDefault && (\n                            <span className=\"ml-2 text-xs bg-primary text-primary-foreground px-2 py-0.5 rounded-full\">\n                              บัญชีหลัก\n                            </span>\n                          )}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {account.accountNumber}\n                        </div>\n                        <div className=\"text-sm\">\n                          {account.accountName}\n                        </div>\n                      </div>\n                      <div className=\"flex space-x-1\">\n                        {!account.isDefault && (\n                          <Button\n                            variant=\"outline\"\n                            size=\"icon\"\n                            onClick={() => setDefaultBankAccountMutation.mutate(account.id)}\n                            disabled={setDefaultBankAccountMutation.isPending}\n                            title=\"ตั้งเป็นบัญชีหลัก\"\n                          >\n                            {setDefaultBankAccountMutation.isPending ? (\n                              <Loader2 className=\"h-4 w-4 animate-spin\" />\n                            ) : (\n                              <Check className=\"h-4 w-4\" />\n                            )}\n                          </Button>\n                        )}\n                        <div className=\"text-sm text-muted-foreground mt-2\">\n                          *หากต้องการแก้ไขหรือลบบัญชี กรุณาติดต่อแอดมิน\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n                \n                {bankAccounts.length < 2 && (\n                  <div className=\"text-center pt-2\">\n                    <Button \n                      variant=\"outline\" \n                      onClick={onAddNewClick}\n                      className=\"w-full\"\n                    >\n                      <Plus className=\"mr-2 h-4 w-4\" /> เพิ่มบัญชีใหม่\n                    </Button>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n      \n      <EditBankAccountDialog\n        open={showEditDialog}\n        onOpenChange={setShowEditDialog}\n        account={selectedAccount}\n      />\n    </>\n  );\n}\n\n// Component to select a bank account for withdrawal\nexport function BankAccountSelector({\n  bankAccounts,\n  selectedId,\n  onSelect,\n  onManageClick,\n  onAddNewClick\n}: {\n  bankAccounts: BankAccount[] | undefined;\n  selectedId: number | null;\n  onSelect: (id: number) => void;\n  onManageClick: () => void;\n  onAddNewClick: () => void;\n}) {\n  if (!bankAccounts || bankAccounts.length === 0) {\n    return (\n      <div className=\"text-center py-4\">\n        <p className=\"text-muted-foreground mb-3\">คุณยังไม่มีบัญชีธนาคารที่บันทึกไว้</p>\n        <Button onClick={onAddNewClick} variant=\"outline\">\n          <Plus className=\"mr-2 h-4 w-4\" /> เพิ่มบัญชีใหม่\n        </Button>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"space-y-2 mb-4\">\n      <Label>เลือกบัญชีที่บันทึกไว้</Label>\n      <div className=\"space-y-2\">\n        {bankAccounts.map((account) => (\n          <div \n            key={account.id}\n            onClick={() => onSelect(account.id)}\n            className={`p-3 border rounded-lg cursor-pointer flex justify-between items-center ${\n              selectedId === account.id ? 'border-primary bg-primary/10' : ''\n            }`}\n          >\n            <div>\n              <div className=\"font-medium\">\n                {account.bankName} \n                {account.isDefault && (\n                  <span className=\"ml-2 text-xs bg-primary text-primary-foreground px-2 py-0.5 rounded-full\">\n                    บัญชีหลัก\n                  </span>\n                )}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                {account.accountNumber} ({account.accountName})\n              </div>\n            </div>\n            {selectedId === account.id && (\n              <Check className=\"text-primary h-5 w-5\" />\n            )}\n          </div>\n        ))}\n      </div>\n      <div className=\"text-center mt-3\">\n        <Button \n          variant=\"outline\" \n          size=\"sm\"\n          type=\"button\" \n          onClick={onManageClick}\n        >\n          จัดการบัญชี\n        </Button>\n      </div>\n      \n      {selectedId && (\n        <>\n          <Separator className=\"my-4\" />\n          <div className=\"text-center text-sm text-muted-foreground\">\n            บัญชีที่เลือก: {bankAccounts.find(acc => acc.id === selectedId)?.bankName} - {bankAccounts.find(acc => acc.id === selectedId)?.accountNumber}\n          </div>\n        </>\n      )}\n    </div>\n  );\n}","size_bytes":22753},"client/src/components/crypto-chart.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { formatCurrency, formatPercentage } from \"@/lib/formatters\";\nimport { CryptoCurrency } from \"@shared/schema\";\nimport { useState, useEffect } from \"react\";\nimport { useTheme } from \"next-themes\";\nimport { Tabs, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface CryptoChartProps {\n  crypto: CryptoCurrency;\n  onBack?: () => void;\n}\n\nexport function CryptoChart({ crypto, onBack }: CryptoChartProps) {\n  const isPriceUp = crypto.price_change_percentage_24h >= 0;\n  const { theme } = useTheme();\n  const [interval, setInterval] = useState(\"D\"); // เริ่มต้นด้วยกราฟรายวัน\n  const [mounted, setMounted] = useState(false);\n  \n  // ป้องกันการเรนเดอร์ที่ไม่ตรงกันระหว่างเซิร์ฟเวอร์และไคลเอนต์\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n  \n  return (\n    <Card className=\"mb-4 w-full rounded-none border-0 shadow-none\">\n      <CardHeader className=\"flex flex-row items-center px-4 pb-2\">\n        {onBack && (\n          <button onClick={onBack} className=\"mr-3\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"w-5 h-5\">\n              <path d=\"m15 18-6-6 6-6\" />\n            </svg>\n          </button>\n        )}\n        <div className=\"flex items-center\">\n          <img \n            src={crypto.image} \n            alt={crypto.name} \n            className=\"w-8 h-8 rounded-full mr-2\"\n          />\n          <CardTitle className=\"text-base\">{crypto.symbol.toUpperCase()}/TetherUS</CardTitle>\n        </div>\n        <div className=\"ml-auto text-right\">\n          <div className=\"font-semibold\">\n            {formatCurrency(crypto.current_price)}\n          </div>\n          <div \n            className={`${\n              isPriceUp ? \"text-green-500 dark:text-green-400\" : \"text-red-500 dark:text-red-400\"\n            } text-sm flex items-center justify-end`}\n          >\n            {isPriceUp ? (\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"w-4 h-4 mr-1\">\n                <path d=\"m18 15-6-6-6 6\" />\n              </svg>\n            ) : (\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"w-4 h-4 mr-1\">\n                <path d=\"m6 9 6 6 6-6\" />\n              </svg>\n            )}\n            <span>{formatPercentage(crypto.price_change_percentage_24h)}</span>\n          </div>\n        </div>\n      </CardHeader>\n      \n      {/* ส่วนของตัวเลือกช่วงเวลา */}\n      <div className=\"px-2 py-1 border-y border-border/50 flex items-center space-x-1 overflow-x-auto scrollbar-hide\">\n        <div className=\"flex items-center space-x-1\">\n          <Button variant=\"ghost\" size=\"sm\" className={interval === \"1\" ? \"bg-muted text-xs h-7 px-2\" : \"text-xs h-7 px-2\"} onClick={() => setInterval(\"1\")}>\n            1m\n          </Button>\n          <Button variant=\"ghost\" size=\"sm\" className={interval === \"30\" ? \"bg-muted text-xs h-7 px-2\" : \"text-xs h-7 px-2\"} onClick={() => setInterval(\"30\")}>\n            30m\n          </Button>\n          <Button variant=\"ghost\" size=\"sm\" className={interval === \"60\" ? \"bg-muted text-xs h-7 px-2\" : \"text-xs h-7 px-2\"} onClick={() => setInterval(\"60\")}>\n            1h\n          </Button>\n          <Button variant=\"ghost\" size=\"sm\" className={interval === \"D\" ? \"bg-muted text-xs h-7 px-2\" : \"text-xs h-7 px-2\"} onClick={() => setInterval(\"D\")}>\n            D\n          </Button>\n          <Button variant=\"ghost\" size=\"sm\" className={interval === \"W\" ? \"bg-muted text-xs h-7 px-2\" : \"text-xs h-7 px-2\"} onClick={() => setInterval(\"W\")}>\n            W\n          </Button>\n          <Button variant=\"ghost\" size=\"sm\" className={interval === \"M\" ? \"bg-muted text-xs h-7 px-2\" : \"text-xs h-7 px-2\"} onClick={() => setInterval(\"M\")}>\n            M\n          </Button>\n        </div>\n        \n        <div className=\"flex-1\"></div>\n        \n        {/* ปุ่มเครื่องมือเพิ่มเติม */}\n        <div className=\"flex items-center space-x-1\">\n          <Button variant=\"ghost\" size=\"sm\" className=\"text-xs h-7 w-7 p-0\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n              <path d=\"M2 12h20M2 12l5-5M2 12l5 5M22 12l-5-5M22 12l-5 5\"/>\n            </svg>\n          </Button>\n          <Button variant=\"ghost\" size=\"sm\" className=\"text-xs h-7 w-7 p-0\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n              <rect width=\"18\" height=\"18\" x=\"3\" y=\"3\" rx=\"2\" ry=\"2\"></rect>\n              <path d=\"M15 9h.01M9 15h.01M21 9h.01M21 15h.01M9 3v0M9 21v0M15 3v0M15 21v0M3 9v0M21 9v0M3 15v0M21 15v0\"></path>\n            </svg>\n          </Button>\n          <Button variant=\"ghost\" size=\"sm\" className=\"text-xs h-7 w-7 p-0\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n              <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n              <path d=\"M12 8v8\"></path>\n              <path d=\"M8 12h8\"></path>\n            </svg>\n          </Button>\n          <Button variant=\"ghost\" size=\"sm\" className=\"text-xs h-7 w-7 p-0\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n              <path d=\"M15 3h6v6M14 10l7-7M9 21H3v-6M10 14l-7 7\"></path>\n            </svg>\n          </Button>\n        </div>\n      </div>\n      \n      <CardContent className=\"p-0\">\n        <div className=\"h-[450px] w-full\">\n          {mounted && (\n            <iframe\n              src={`https://s.tradingview.com/widgetembed/?frameElementId=tradingview_chart&symbol=${crypto.symbol.toUpperCase()}USDT&interval=${interval}&hidesidetoolbar=0&hideTopBar=1&symboledit=0&saveimage=1&toolbarbg=f1f3f6&studies=[%22RSI%22]&theme=${theme === 'dark' ? 'dark' : 'light'}&style=1&timezone=exchange&withdateranges=1&showpopupbutton=1&studies_overrides=%7B%7D&overrides=%7B%7D&enabled_features=%5B%5D&disabled_features=%5B%5D&showpopupbutton=1&locale=en&utm_source=&utm_medium=widget&utm_campaign=chart`}\n              style={{ width: '100%', height: '100%' }}\n              frameBorder=\"0\"\n              title=\"TradingView Chart\"\n            />\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n\n","size_bytes":7165},"client/src/components/crypto-list.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { CryptoCurrency } from \"@shared/schema\";\nimport { PriceCard } from \"@/components/ui/price-card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\n\ninterface CryptoListProps {\n  onSelectCrypto?: (crypto: CryptoCurrency) => void;\n  showCompact?: boolean;\n}\n\nexport function CryptoList({ onSelectCrypto, showCompact = false }: CryptoListProps) {\n  const { data: cryptos, isLoading, error } = useQuery<CryptoCurrency[]>({\n    queryKey: [\"/api/crypto/market\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        {Array(4).fill(0).map((_, i) => (\n          <div key={i} className=\"flex items-center space-x-4\">\n            <Skeleton className=\"h-12 w-12 rounded-full\" />\n            <div className=\"space-y-2\">\n              <Skeleton className=\"h-4 w-[100px]\" />\n              <Skeleton className=\"h-4 w-[70px]\" />\n            </div>\n            <div className=\"ml-auto space-y-2\">\n              <Skeleton className=\"h-4 w-[60px]\" />\n              <Skeleton className=\"h-4 w-[40px]\" />\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <Alert variant=\"destructive\">\n        <AlertTitle>Error</AlertTitle>\n        <AlertDescription>\n          Failed to load cryptocurrency data. Please try again later.\n        </AlertDescription>\n      </Alert>\n    );\n  }\n\n  if (!cryptos || cryptos.length === 0) {\n    return (\n      <Alert>\n        <AlertTitle>No Data</AlertTitle>\n        <AlertDescription>\n          No cryptocurrency data available at the moment.\n        </AlertDescription>\n      </Alert>\n    );\n  }\n\n  if (showCompact) {\n    return (\n      <ScrollArea className=\"pb-2\">\n        <div className=\"flex space-x-3\">\n          {cryptos.slice(0, 5).map((crypto) => (\n            <PriceCard \n              key={crypto.id} \n              crypto={crypto} \n              onClick={() => onSelectCrypto?.(crypto)}\n              compact\n            />\n          ))}\n        </div>\n      </ScrollArea>\n    );\n  }\n\n  return (\n    <div className=\"space-y-3 w-full\">\n      {cryptos.map((crypto) => (\n        <PriceCard \n          key={crypto.id} \n          crypto={crypto} \n          onClick={() => onSelectCrypto?.(crypto)}\n          className=\"w-full\"\n        />\n      ))}\n    </div>\n  );\n}\n","size_bytes":2461},"client/src/components/splash-screen.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { Loader2 } from \"lucide-react\";\nimport stockMarketGraph from \"../assets/stock_market_graph.png\";\nimport asiaLogo from \"../assets/Asia_Plus_Securities.png\";\n\ninterface SplashScreenProps {\n  onComplete: () => void;\n  minDisplayTime?: number;\n}\n\nexport function SplashScreen({\n  onComplete,\n  minDisplayTime = 2000, // ลดเวลาเหลือ 2 วินาที\n}: SplashScreenProps) {\n  const [isLoading, setIsLoading] = useState(true);\n  const [loadingProgress, setLoadingProgress] = useState(0);\n\n  useEffect(() => {\n    const startTime = Date.now();\n    \n    // จำลองการโหลดข้อมูลแบบมี Progress\n    const progressInterval = setInterval(() => {\n      setLoadingProgress(prev => {\n        const newProgress = prev + Math.random() * 15;\n        return newProgress >= 100 ? 100 : newProgress;\n      });\n    }, 200);\n    \n    // จำลองการโหลดข้อมูล\n    const timer = setTimeout(() => {\n      const elapsedTime = Date.now() - startTime;\n      const remainingTime = Math.max(0, minDisplayTime - elapsedTime);\n      \n      // ตรวจสอบว่าเวลาผ่านไปตาม minDisplayTime หรือยัง\n      setTimeout(() => {\n        setLoadingProgress(100);\n        clearInterval(progressInterval);\n        setIsLoading(false);\n        onComplete();\n      }, remainingTime);\n    }, 800); // ลดเวลาในการรอใน timeout แรก\n    \n    return () => {\n      clearTimeout(timer);\n      clearInterval(progressInterval);\n    };\n  }, [onComplete, minDisplayTime]);\n\n  return (\n    <div className=\"fixed inset-0 flex flex-col items-center justify-center z-50 overflow-hidden\">\n      <div \n        className=\"w-full h-full flex flex-col items-center justify-center relative bg-blend-overlay\"\n        style={{\n          backgroundImage: `url(${stockMarketGraph})`,\n          backgroundSize: \"cover\",\n          backgroundPosition: \"center\",\n          backgroundRepeat: \"no-repeat\",\n          filter: \"blur(1px) brightness(0.8)\"\n        }}\n      >\n        {/* พื้นหลังพิเศษมีลวดลาย */}\n        <div className=\"absolute inset-0 overflow-hidden\">\n          {/* เส้นตาราง */}\n          <div className=\"absolute inset-0 opacity-5\">\n            {Array.from({ length: 20 }).map((_, i) => (\n              <div \n                key={`h-${i}`} \n                className=\"absolute bg-white h-px w-full left-0\"\n                style={{ top: `${i * 5}%` }}\n              />\n            ))}\n            {Array.from({ length: 20 }).map((_, i) => (\n              <div \n                key={`v-${i}`} \n                className=\"absolute bg-white w-px h-full top-0\"\n                style={{ left: `${i * 5}%` }}\n              />\n            ))}\n          </div>\n          \n          {/* พาติเคิลแสงลอยขึ้น */}\n          {Array.from({ length: 20 }).map((_, index) => (\n            <div \n              key={`particle-${index}`} \n              className=\"absolute w-1 h-1 rounded-full bg-blue-500\"\n              style={{\n                left: `${Math.random() * 100}%`,\n                bottom: `-20px`,\n                opacity: Math.random() * 0.5 + 0.1,\n                transform: `scale(${Math.random() * 2 + 0.5})`,\n                animation: `floatUp ${Math.random() * 10 + 10}s linear infinite`,\n                animationDelay: `${Math.random() * 10}s`\n              }}\n            />\n          ))}\n        </div>\n        \n        {/* ลายเส้นกราฟิกแนวเฉียง */}\n        <div className=\"absolute inset-0 overflow-hidden opacity-10\">\n          {Array.from({ length: 10 }).map((_, index) => (\n            <div \n              key={index} \n              className=\"absolute bg-white\" \n              style={{\n                height: '2px',\n                width: '100%',\n                transform: `rotate(45deg) translateY(${index * 100 - 500}px)`,\n                left: 0\n              }}\n            />\n          ))}\n        </div>\n        \n        {/* เอฟเฟกต์วงกลมเรืองแสง */}\n        <div className=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-64 h-64 rounded-full bg-blue-500/10 blur-3xl animate-pulse\"></div>\n        \n        {/* โลโก้เอเซีย พลัส แบบวงกลมที่คุณต้องการ */}\n        <div className=\"relative mb-6\">\n          <div className=\"w-64 h-48 relative flex items-center justify-center\">\n            {/* เอฟเฟกต์เรืองแสงด้านหลัง */}\n            <div className=\"absolute w-full h-full rounded-full bg-blue-500/30 blur-xl animate-pulse\"></div>\n            \n            {/* โลโก้ Asia Plus Securities - ทำให้ใหญ่ขึ้นและไม่ถูกเบลอ */}\n            <div className=\"relative z-20 backdrop-filter-none\" style={{ filter: 'none' }}>\n              <img \n                src={asiaLogo} \n                alt=\"Asia Plus Securities Logo\" \n                className=\"w-64 h-32 object-contain\"\n                style={{\n                  filter: 'drop-shadow(0 0 10px rgba(30,100,200,0.7))'\n                }}\n              />\n            </div>\n            \n            {/* เอฟเฟกต์ประกายดาว */}\n            <div className=\"absolute inset-0 flex items-center justify-center z-20\">\n              <div className=\"w-2 h-2 bg-white rounded-full opacity-80 animate-ping\"></div>\n            </div>\n            \n            {/* วงแหวนเรืองแสงรอบโลโก้ */}\n            <div \n              className=\"absolute w-full h-full rounded-full border-2 border-blue-500/30\"\n              style={{\n                animation: 'pulse 2s infinite'\n              }}\n            ></div>\n            \n            {/* วงแหวนด้านนอกที่หมุน */}\n            <div \n              className=\"absolute w-36 h-36 rounded-full border border-blue-500/20\"\n              style={{\n                animation: 'spin 10s linear infinite'\n              }}\n            ></div>\n          </div>\n        </div>\n        \n        <div className=\"text-white text-center mb-8\">\n          <h1 className=\"text-4xl font-bold mb-1\" style={{ textShadow: '0 0 10px rgba(30,100,200,0.5)' }}>เอเซีย พลัส</h1>\n          <p className=\"text-sm text-gray-300 tracking-widest\">SECURITIES</p>\n        </div>\n        \n        <div className=\"mt-4 flex flex-col items-center w-80\">\n          {/* Progress bar แบบมี gradient และเอฟเฟกต์พิเศษ */}\n          <div className=\"w-full bg-black/30 backdrop-blur-sm rounded-full h-3 mb-4 overflow-hidden\" \n            style={{ boxShadow: 'inset 0 1px 2px rgba(0,0,0,0.4)' }}>\n            <div \n              className=\"h-3 rounded-full transition-all duration-300 ease-out relative overflow-hidden\"\n              style={{ \n                width: `${loadingProgress}%`,\n                background: 'linear-gradient(90deg, #1E64C8 0%, #0A4B81 100%)',\n                boxShadow: '0 0 10px rgba(30,100,200,0.7)'\n              }}\n            >\n              {/* เอฟเฟกต์เส้นแสงวิ่งผ่าน progress bar */}\n              <div \n                className=\"absolute top-0 bottom-0 right-0 w-20 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                style={{\n                  animation: 'progressShine 1.5s linear infinite'\n                }}\n              ></div>\n            </div>\n          </div>\n          \n          {/* ไอคอนโหลดและข้อความ */}\n          <div className=\"flex items-center justify-center w-full\">\n            <div className=\"relative mr-3\">\n              <Loader2 className=\"h-6 w-6 text-blue-500 animate-spin\" />\n              <div className=\"absolute inset-0 rounded-full bg-blue-500/10 blur-md\"></div>\n            </div>\n            <p className=\"text-white text-sm font-medium\">\n              กำลังโหลด... <span className=\"text-blue-500\">{Math.round(loadingProgress)}%</span>\n            </p>\n          </div>\n          \n          {/* ใช้ style ของ React แทน JSX style */}\n        </div>\n        \n        {/* เอฟเฟกต์แสงด้านล่าง */}\n        <div className=\"absolute bottom-0 w-full h-20 bg-gradient-to-t from-blue-500/20 to-transparent\"></div>\n      </div>\n    </div>\n  );\n}","size_bytes":8670},"client/src/components/theme-toggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { useTheme } from \"next-themes\";\nimport { Button } from \"@/components/ui/button\";\nimport { useEffect, useState } from \"react\";\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n  const [mounted, setMounted] = useState(false);\n  \n  // เมื่อใช้ next-themes เราต้องรอให้คอมโพเนนต์ mount ก่อน\n  // เพื่อหลีกเลี่ยงความขัดแย้งระหว่าง server/client rendering\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n  \n  if (!mounted) {\n    return null;\n  }\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={() => setTheme(theme === \"dark\" ? \"light\" : \"dark\")}\n      aria-label=\"สลับโหมดกลางวันและกลางคืน\"\n    >\n      <Sun className=\"h-4 w-4 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n      <Moon className=\"absolute h-4 w-4 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n    </Button>\n  );\n}","size_bytes":1110},"client/src/components/trade-countdown.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { Card, CardContent } from \"./ui/card\";\nimport { Progress } from \"./ui/progress\";\nimport { formatCurrency } from \"@/lib/formatters\";\n\ninterface TradeCountdownProps {\n  duration: number; // ระยะเวลาในวินาที\n  entryPrice: number; // ราคาตอนที่ซื้อ\n  currentPrice?: number; // ราคาปัจจุบัน (optional)\n  amount: number; // จำนวนเงินที่ลงทุน\n  direction: \"up\" | \"down\"; // ทิศทางที่เลือก\n  profitPercentage: number; // เปอร์เซ็นต์กำไรถ้าชนะ\n  cryptoSymbol: string; // สัญลักษณ์สกุลเงินดิจิทัล\n  onComplete?: () => void; // callback เมื่อนับถอยหลังเสร็จ\n  endTime?: Date; // เวลาที่การเทรดจะสิ้นสุด (optional)\n}\n\nexport function TradeCountdown({\n  duration,\n  entryPrice,\n  currentPrice,\n  amount,\n  direction,\n  profitPercentage,\n  cryptoSymbol,\n  onComplete,\n  endTime\n}: TradeCountdownProps) {\n  // ถ้าไม่มี endTime ให้สร้างขึ้นมาโดยใช้เวลาปัจจุบัน + duration\n  const calculatedEndTime = endTime || new Date(Date.now() + duration * 1000);\n  \n  const [timeLeft, setTimeLeft] = useState<number>(0);\n  const [isPulsing, setIsPulsing] = useState(false);\n  \n  // คำนวณเปอร์เซ็นต์ของเวลาที่เหลือ (คำนวณใหม่ทุกครั้งที่ timeLeft เปลี่ยน)\n  const progressPercentage = Math.min(100, Math.max(0, ((duration - timeLeft) / duration) * 100));\n  \n  // คำนวณผลกำไรที่อาจได้รับ\n  const potentialProfit = amount * (profitPercentage / 100);\n  \n  // ตรวจสอบว่าราคาขณะนี้สูงหรือต่ำกว่าราคาซื้อ\n  const priceChange = currentPrice ? (currentPrice - entryPrice) : 0;\n  const isPriceUp = priceChange > 0;\n  const isPriceDown = priceChange < 0;\n  \n  // คำนวณว่าเป็นไปตามทิศทางที่ทายหรือไม่\n  const isWinning = (direction === \"up\" && isPriceUp) || (direction === \"down\" && isPriceDown);\n  \n  // คำนวณเวลาที่เหลือโดยใช้ endTime\n  useEffect(() => {\n    // ฟังก์ชั่นสำหรับคำนวณเวลาที่เหลือ\n    const calculateTimeLeft = () => {\n      const now = new Date();\n      const diff = Math.max(0, Math.floor((calculatedEndTime.getTime() - now.getTime()) / 1000));\n      return diff;\n    };\n    \n    // ตั้งค่าเวลาเริ่มต้น\n    setTimeLeft(calculateTimeLeft());\n    \n    // เพิ่มเอฟเฟคที่จะทำให้การ์ดเต้นเมื่อเหลือเวลาไม่มาก\n    const pulseTimer = setInterval(() => {\n      const currentTimeLeft = calculateTimeLeft();\n      if (currentTimeLeft <= 10 && currentTimeLeft > 0) {\n        setIsPulsing(true);\n        setTimeout(() => setIsPulsing(false), 500);\n      }\n    }, 1000);\n    \n    // ตั้งเวลานับถอยหลังโดยคำนวณจากเวลาจริง\n    const timer = setInterval(() => {\n      const newTimeLeft = calculateTimeLeft();\n      setTimeLeft(newTimeLeft);\n      \n      if (newTimeLeft <= 0) {\n        clearInterval(timer);\n        clearInterval(pulseTimer);\n        if (onComplete) {\n          onComplete();\n        }\n      }\n    }, 1000);\n    \n    return () => {\n      clearInterval(timer);\n      clearInterval(pulseTimer);\n    };\n  }, [calculatedEndTime, onComplete]);\n  \n  // แปลงวินาทีเป็นรูปแบบ MM:SS\n  const formatTime = (seconds: number) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes.toString().padStart(2, \"0\")}:${remainingSeconds.toString().padStart(2, \"0\")}`;\n  };\n  \n  return (\n    <Card className={`w-full mb-4 ${isPulsing ? \"animate-pulse\" : \"\"}`}>\n      <CardContent className=\"p-4\">\n        <div className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <div className=\"text-lg font-medium\">ผลการเทรดจะรู้ใน</div>\n            <div className=\"text-xl font-bold\">{formatTime(timeLeft)}</div>\n          </div>\n          \n          <Progress value={progressPercentage} className=\"h-2\" />\n          \n          <div className=\"grid grid-cols-2 gap-4 mt-4\">\n            <div className=\"space-y-1\">\n              <div className=\"text-sm text-muted-foreground\">ราคาที่ซื้อ</div>\n              <div className=\"font-medium\">{formatCurrency(entryPrice)}</div>\n            </div>\n            \n            <div className=\"space-y-1\">\n              <div className=\"text-sm text-muted-foreground\">ราคาปัจจุบัน</div>\n              <div className={`font-medium ${isPriceUp ? \"text-green-600\" : isPriceDown ? \"text-red-600\" : \"\"}`}>\n                {currentPrice ? formatCurrency(currentPrice) : \"-\"}\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"pt-2 border-t\">\n            <div className=\"flex justify-between items-center\">\n              <div>\n                <div className=\"text-sm text-muted-foreground\">ทิศทางที่เลือก</div>\n                <div className={`font-medium ${direction === \"up\" ? \"text-green-600\" : \"text-red-600\"}`}>\n                  {direction === \"up\" ? \"ซื้อขึ้น ↑\" : \"ซื้อลง ↓\"}\n                </div>\n              </div>\n              \n              <div className=\"text-right\">\n                <div className=\"text-sm text-muted-foreground\">กำไรที่อาจได้รับ</div>\n                <div className=\"font-medium text-green-600\">\n                  {formatCurrency(potentialProfit)}\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex flex-col items-center justify-center mt-4 space-y-2\">\n            <div className=\"text-center\">\n              <span className=\"text-sm text-muted-foreground\">สถานะปัจจุบัน:</span>\n            </div>\n            <div className={`px-5 py-3 rounded-full text-white text-md font-bold shadow-lg ${\n              isWinning ? \"bg-green-600\" : \"bg-red-600\"\n            }`}>\n              {isWinning \n                ? `กำลังทำกำไร ${currentPrice ? `+${formatCurrency(Math.abs(priceChange))}` : \"\"}` \n                : `กำลังขาดทุน ${currentPrice ? `-${formatCurrency(Math.abs(priceChange))}` : \"\"}`\n              }\n            </div>\n            <div className=\"text-xs text-muted-foreground mt-1\">\n              ราคาจะต้อง{direction === \"up\" ? \"สูงกว่า\" : \"ต่ำกว่า\"}ราคาเข้าเมื่อหมดเวลาจึงจะได้กำไร\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7395},"client/src/components/trading-options-new.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { CryptoCurrency } from \"@shared/schema\";\nimport { formatCurrency } from \"@/lib/formatters\";\nimport { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Loader2 } from \"lucide-react\";\nimport { \n  Dialog, \n  DialogContent, \n  DialogHeader, \n  DialogTitle,\n  DialogFooter\n} from \"@/components/ui/dialog\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\n\ninterface TradingOptionsProps {\n  crypto: CryptoCurrency;\n}\n\ninterface TradeFormData {\n  cryptoId: string;\n  amount: string;\n  direction: \"up\" | \"down\";\n  entryPrice: string;\n  duration: string; // เพิ่มเวลาชำระราคา \n}\n\ntype TradeOption = {\n  duration: string;\n  seconds: number;\n  profit: number;\n};\n\n// ตัวเลือกระยะเวลาการลงทุนและกำไรที่จะได้รับ\nconst tradeOptions: TradeOption[] = [\n  { duration: \"60S\", seconds: 60, profit: 30 },\n  { duration: \"120S\", seconds: 120, profit: 40 },\n  { duration: \"300S\", seconds: 300, profit: 50 }\n];\n\nexport function TradingOptions({ crypto }: TradingOptionsProps) {\n  const [amount, setAmount] = useState(\"0.01\");\n  const [showDialog, setShowDialog] = useState(false);\n  const [selectedDuration, setSelectedDuration] = useState(tradeOptions[0].duration);\n  const [tradeDirection, setTradeDirection] = useState<\"up\" | \"down\">(\"up\");\n  const { user } = useAuth();\n  const { toast } = useToast();\n  \n  const estimatedValue = parseFloat(amount) * crypto.current_price;\n  const tradingFee = estimatedValue * 0.002; // 0.2% fee\n  const userBalance = 10000; // สมมติว่ามีเงิน 10,000\n  \n  const tradeMutation = useMutation({\n    mutationFn: async (data: TradeFormData) => {\n      const res = await apiRequest(\"POST\", \"/api/trades\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Trade executed\",\n        description: `Your ${crypto.symbol.toUpperCase()} trade has been placed successfully.`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/trades\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Trade failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n  \n  // ตรวจสอบข้อมูลและแสดง Dialog เมื่อกดปุ่มซื้อ\n  const handleTradeClick = (direction: \"up\" | \"down\") => {\n    if (!user) {\n      toast({\n        title: \"Authentication required\",\n        description: \"Please log in to place trades.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (isNaN(parseFloat(amount)) || parseFloat(amount) <= 0) {\n      toast({\n        title: \"Invalid amount\",\n        description: \"Please enter a valid trading amount.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // ตั้งค่าทิศทางและแสดง Dialog\n    setTradeDirection(direction);\n    setShowDialog(true);\n  };\n  \n  // ทำการสั่งซื้อจริงๆ เมื่อยืนยันใน Dialog แล้ว\n  const handleConfirmTrade = () => {\n    // หา profit percentage จาก selectedDuration\n    const selectedOption = tradeOptions.find(option => option.duration === selectedDuration);\n    const profitPercentage = selectedOption ? selectedOption.profit.toString() : \"0\";\n    \n    // แปลง duration string เป็น number ใช้ seconds จาก tradeOptions\n    const durationInSeconds = selectedOption ? selectedOption.seconds : 60;\n    \n    tradeMutation.mutate({\n      cryptoId: crypto.id,\n      amount,\n      direction: tradeDirection,\n      entryPrice: crypto.current_price.toString(),\n      duration: durationInSeconds,\n      profitPercentage: profitPercentage\n    });\n    \n    // ปิด Dialog\n    setShowDialog(false);\n  };\n  \n  return (\n    <>\n      <Card className=\"mb-4 w-full rounded-none\">\n        <CardContent className=\"p-4\">\n          <h3 className=\"font-medium mb-3\">Trade Amount</h3>\n          <div className=\"relative mb-4\">\n            <Input\n              type=\"text\"\n              className=\"pr-12\"\n              placeholder=\"Enter amount\"\n              value={amount}\n              onChange={(e) => setAmount(e.target.value)}\n            />\n            <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\">\n              {crypto.symbol.toUpperCase()}\n            </div>\n          </div>\n          \n          <div className=\"flex justify-between mb-1 text-sm\">\n            <span className=\"text-muted-foreground\">Estimated Value:</span>\n            <span>{formatCurrency(isNaN(estimatedValue) ? 0 : estimatedValue)}</span>\n          </div>\n          \n          <div className=\"flex justify-between mb-4 text-sm\">\n            <span className=\"text-muted-foreground\">Trading Fee:</span>\n            <span>{formatCurrency(isNaN(tradingFee) ? 0 : tradingFee)}</span>\n          </div>\n          \n          <div className=\"grid grid-cols-2 gap-3\">\n            <Button \n              className=\"bg-[hsl(var(--chart-1))] hover:bg-[hsl(var(--chart-1))/90]\"\n              onClick={() => handleTradeClick(\"up\")}\n              disabled={tradeMutation.isPending}\n            >\n              {tradeMutation.isPending && tradeMutation.variables?.direction === \"up\" ? (\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              ) : (\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"w-4 h-4 mr-1\">\n                  <path d=\"m18 15-6-6-6 6\" />\n                </svg>\n              )}\n              ซื้อขึ้น\n            </Button>\n            \n            <Button \n              variant=\"destructive\"\n              onClick={() => handleTradeClick(\"down\")}\n              disabled={tradeMutation.isPending}\n            >\n              {tradeMutation.isPending && tradeMutation.variables?.direction === \"down\" ? (\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              ) : (\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"w-4 h-4 mr-1\">\n                  <path d=\"m6 9 6 6 6-6\" />\n                </svg>\n              )}\n              ซื้อลง\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n      \n      <Dialog open={showDialog} onOpenChange={setShowDialog}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>ยืนยันการสั่งซื้อ {tradeDirection === \"up\" ? \"ขึ้น\" : \"ลง\"}</DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"py-4\">\n            <RadioGroup \n              value={selectedDuration} \n              onValueChange={setSelectedDuration}\n              className=\"space-y-4\"\n            >\n              {tradeOptions.map((option) => (\n                <div key={option.duration} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value={option.duration} id={`option-${option.duration}`} />\n                    <Label htmlFor={`option-${option.duration}`} className=\"cursor-pointer\">\n                      <div>\n                        <div className=\"font-medium mb-1\">เวลาชำระราคา</div>\n                        <div className=\"text-lg font-bold\">{option.duration}</div>\n                      </div>\n                    </Label>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-md font-medium text-green-600\">กำไร {option.profit}%</div>\n                  </div>\n                </div>\n              ))}\n            </RadioGroup>\n            \n            <Separator className=\"my-4\" />\n            \n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between\">\n                <span>จำนวนเงินลงทุนซื้อทั้งหมด:</span>\n                <span className=\"font-semibold\">{formatCurrency(isNaN(estimatedValue) ? 0 : estimatedValue)}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>ยอดเงินคงเหลือ:</span>\n                <span className=\"font-semibold\">{formatCurrency(userBalance - (isNaN(estimatedValue) ? 0 : estimatedValue))}</span>\n              </div>\n            </div>\n          </div>\n          \n          <DialogFooter className=\"sm:justify-center\">\n            <Button \n              onClick={handleConfirmTrade} \n              disabled={tradeMutation.isPending}\n              className=\"w-full\"\n            >\n              {tradeMutation.isPending ? (\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              ) : null}\n              ยืนยันการสั่งซื้อ\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}","size_bytes":9720},"client/src/components/trading-options.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { CryptoCurrency } from \"@shared/schema\";\nimport { formatCurrency } from \"@/lib/formatters\";\nimport { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Loader2 } from \"lucide-react\";\nimport { \n  Dialog, \n  DialogContent, \n  DialogHeader, \n  DialogTitle,\n  DialogFooter\n} from \"@/components/ui/dialog\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useActiveTrades } from \"@/hooks/use-active-trades\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { TradeCountdown } from \"@/components/trade-countdown\";\nimport { useWebSocket } from \"@/contexts/websocket-context\";\n\ninterface TradingOptionsProps {\n  crypto: CryptoCurrency;\n}\n\ninterface TradeFormData {\n  cryptoId: string;\n  amount: string;\n  direction: \"up\" | \"down\";\n  entryPrice: string;\n  duration: number; // เพิ่มเวลาชำระราคา \n  profitPercentage: string;\n}\n\ntype TradeOption = {\n  duration: string;\n  seconds: number;\n  profit: number;\n};\n\n// ตัวเลือกระยะเวลาการลงทุนและกำไรที่จะได้รับ\nconst tradeOptions: TradeOption[] = [\n  { duration: \"60S\", seconds: 60, profit: 30 },\n  { duration: \"120S\", seconds: 120, profit: 40 },\n  { duration: \"300S\", seconds: 300, profit: 50 }\n];\n\nexport function TradingOptions({ crypto }: TradingOptionsProps) {\n  const [amount, setAmount] = useState(\"0.01\");\n  const [showDialog, setShowDialog] = useState(false);\n  const [selectedDuration, setSelectedDuration] = useState(tradeOptions[0].duration);\n  const [tradeDirection, setTradeDirection] = useState<\"up\" | \"down\">(\"up\");\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const { getActiveTradeForCrypto, addActiveTrade, removeActiveTrade } = useActiveTrades();\n  const { isConnected, trades: realTimeTrades, refreshTrades } = useWebSocket();\n  \n  // ดึงข้อมูลการเทรดที่กำลังดำเนินการอยู่จาก global state\n  const activeTradeData = getActiveTradeForCrypto(crypto.id);\n  \n  // Query สำหรับดึงข้อมูลล่าสุดของ crypto ที่กำลังเทรด\n  const { data: latestCryptoData } = useQuery({\n    queryKey: [`/api/crypto/${crypto.id}`],\n    queryFn: async () => {\n      const res = await fetch(`/api/crypto/${crypto.id}`);\n      if (!res.ok) throw new Error(\"Failed to fetch latest crypto data\");\n      return res.json();\n    },\n    enabled: !!activeTradeData, // เปิดใช้งานเฉพาะเมื่อมีการเทรดที่กำลังดำเนินอยู่\n    refetchInterval: 5000, // รีเฟรชทุก 5 วินาที\n  });\n  \n  // จำกัดจำนวนที่ป้อนได้ไม่เกินยอดเงินในบัญชี\n  const validateAndSetAmount = (value: string) => {\n    const numValue = parseFloat(value);\n    \n    // ตรวจสอบว่าเป็นตัวเลขที่ถูกต้องหรือไม่\n    if (value === \"\" || isNaN(numValue)) {\n      setAmount(value);\n      return;\n    }\n    \n    // จำกัดค่าไม่เกินยอดเงินในบัญชี (ดึง userBalance จาก user object)\n    const currentBalance = user ? parseFloat(user.balance) : 0;\n    if (numValue > currentBalance) {\n      setAmount(currentBalance.toString());\n    } else {\n      setAmount(value);\n    }\n  };\n  \n  // คำนวณมูลค่าเป็นเงินบาทจากจำนวนที่ใส่ (ไม่ต้องคูณราคา BTC)\n  const estimatedValue = parseFloat(amount || \"0\");\n  const tradingFee = estimatedValue * 0.002; // 0.2% fee\n  \n  // ดึงข้อมูลยอดเงินจริงจาก user\n  const userBalance = user ? parseFloat(user.balance) : 0;\n  \n  const tradeMutation = useMutation({\n    mutationFn: async (data: TradeFormData) => {\n      const res = await apiRequest(\"POST\", \"/api/trades\", data);\n      return await res.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"การเทรดสำเร็จ\",\n        description: `เทรด ${crypto.symbol.toUpperCase()} ของคุณได้ถูกบันทึกเรียบร้อยแล้ว`,\n      });\n      // อัพเดทข้อมูลการเทรดและข้อมูลผู้ใช้ (เพื่ออัพเดทยอดเงินคงเหลือ)\n      queryClient.invalidateQueries({ queryKey: [\"/api/trades\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n      \n      // รีเฟรช real-time trades จาก WebSocket\n      refreshTrades();\n      \n      console.log(\"ข้อมูลการเทรดที่ได้รับ:\", data);\n      \n      // ดึงค่า seconds จาก tradeOptions โดยเปรียบเทียบกับ duration ที่ส่งไป\n      const durationInSeconds = parseInt(data.duration);\n      const selectedOption = tradeOptions.find(option => option.seconds === durationInSeconds);\n      const profitPercent = selectedOption ? selectedOption.profit : parseInt(data.profitPercentage);\n      \n      // สร้างข้อมูลการเทรดที่กำลังดำเนินการอยู่\n      const now = new Date();\n      const endTime = new Date(now.getTime() + durationInSeconds * 1000);\n      \n      console.log(\"กำลังเพิ่มข้อมูลการเทรด:\", {\n        id: data.id,\n        duration: durationInSeconds,\n        entryPrice: parseFloat(data.entryPrice),\n        direction: data.direction,\n        amount: data.amount,\n        profitPercentage: profitPercent,\n        endTime,\n        cryptoId: data.cryptoId,\n        cryptoSymbol: crypto.symbol.toUpperCase()\n      });\n      \n      // เพิ่มข้อมูลการเทรดเข้าไปใน global state\n      addActiveTrade({\n        id: data.id,\n        duration: durationInSeconds,\n        entryPrice: parseFloat(data.entryPrice),\n        direction: data.direction as \"up\" | \"down\",\n        amount: data.amount,\n        profitPercentage: profitPercent,\n        endTime,\n        cryptoId: data.cryptoId,\n        cryptoSymbol: crypto.symbol.toUpperCase()\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Trade failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n  \n  // ตรวจสอบข้อมูลและแสดง Dialog เมื่อกดปุ่มซื้อ\n  const handleTradeClick = (direction: \"up\" | \"down\") => {\n    if (!user) {\n      toast({\n        title: \"Authentication required\",\n        description: \"Please log in to place trades.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (isNaN(parseFloat(amount)) || parseFloat(amount) <= 0) {\n      toast({\n        title: \"Invalid amount\",\n        description: \"Please enter a valid trading amount.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // ตั้งค่าทิศทางและแสดง Dialog\n    setTradeDirection(direction);\n    setShowDialog(true);\n  };\n  \n  // จัดการเมื่อนับถอยหลังเสร็จสิ้น\n  const handleCountdownComplete = () => {\n    // ตรวจสอบว่าชนะหรือแพ้\n    if (activeTradeData && latestCryptoData) {\n      // ใช้ tradeId จาก activeTradeData แทน tradeMutation.data?.id\n      const tradeId = activeTradeData.id;\n      \n      const priceChange = latestCryptoData.current_price - activeTradeData.entryPrice;\n      const isWin = \n        (activeTradeData.direction === \"up\" && priceChange > 0) || \n        (activeTradeData.direction === \"down\" && priceChange < 0);\n      \n      // คำนวณมูลค่าการเทรดและกำไร/ขาดทุน\n      const tradeValue = parseFloat(activeTradeData.amount);\n      const profit = isWin ? tradeValue * (activeTradeData.profitPercentage / 100) : 0;\n      \n      console.log(\"Completing trade with ID:\", tradeId);\n      \n      // อัพเดทสถานะการเทรดในฐานข้อมูล\n      apiRequest(\"PATCH\", `/api/trades/${tradeId}`, {\n        status: 'completed',\n        result: isWin ? 'win' : 'lose',  // แก้จาก 'loss' เป็น 'lose' ให้ตรงกับค่าที่กำหนดในฐานข้อมูล\n      })\n      .then(async response => {\n        // อัพเดท user data เพื่อให้แสดงยอดเงินใหม่\n        queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n        \n        // ตรวจสอบผลลัพธ์จริงจากเซิร์ฟเวอร์ (อาจถูกกำหนดไว้ล่วงหน้า)\n        // แปลง response เป็น json เพื่อดึงค่า result\n        const responseData = await response.json();\n        const actualResult = responseData.result || \"lose\";  // กรณีไม่มีผลลัพธ์ ให้ถือว่าแพ้\n        const actualWin = actualResult === 'win';\n        \n        // แสดงผลลัพธ์ตามที่ได้จากเซิร์ฟเวอร์\n        toast({\n          title: actualWin ? \"ยินดีด้วย! คุณได้กำไร\" : \"เสียใจด้วย คุณขาดทุน\",\n          description: actualWin \n            ? `คุณทำกำไรได้ ${formatCurrency(profit)}`\n            : `คุณเสียเงิน ${formatCurrency(tradeValue)}`,\n          variant: actualWin ? \"default\" : \"destructive\",\n        });\n      })\n      .catch(error => {\n        console.error(\"Error updating trade status:\", error);\n        toast({\n          title: \"เกิดข้อผิดพลาด\",\n          description: \"ไม่สามารถบันทึกผลการเทรดได้\",\n          variant: \"destructive\",\n        });\n      })\n      .finally(() => {\n        // รีเซ็ตสถานะการเทรด โดยใช้ ID จาก activeTradeData\n        removeActiveTrade(activeTradeData.id);\n      });\n    }\n  };\n  \n  // ทำการสั่งซื้อจริงๆ เมื่อยืนยันใน Dialog แล้ว\n  const handleConfirmTrade = () => {\n    // หา option ที่เลือกเพื่อดึงข้อมูล seconds และ profit\n    const selectedOption = tradeOptions.find(option => option.duration === selectedDuration);\n    const durationInSeconds = selectedOption ? selectedOption.seconds : 60;\n    const profitPercentage = selectedOption ? selectedOption.profit.toString() : \"30\";\n    \n    console.log(\"ส่งข้อมูลการเทรด:\", {\n      cryptoId: crypto.id,\n      amount,\n      direction: tradeDirection,\n      entryPrice: crypto.current_price.toString(),\n      duration: durationInSeconds,\n      profitPercentage\n    });\n    \n    // ส่งข้อมูลไปยัง API\n    tradeMutation.mutate({\n      cryptoId: crypto.id,\n      amount,\n      direction: tradeDirection,\n      entryPrice: crypto.current_price.toString(),\n      duration: durationInSeconds,\n      profitPercentage,\n    });\n    \n    // ปิด Dialog\n    setShowDialog(false);\n  };\n  \n  return (\n    <>\n      {activeTradeData ? (\n        // แสดงการนับถอยหลังถ้ามีการเทรดที่กำลังดำเนินอยู่\n        <TradeCountdown \n          duration={activeTradeData.duration}\n          entryPrice={activeTradeData.entryPrice}\n          currentPrice={latestCryptoData?.current_price}\n          amount={parseFloat(activeTradeData.amount)}\n          direction={activeTradeData.direction}\n          profitPercentage={activeTradeData.profitPercentage}\n          cryptoSymbol={crypto.symbol.toUpperCase()}\n          onComplete={handleCountdownComplete}\n          endTime={activeTradeData.endTime}\n        />\n      ) : (\n        // แสดงปุ่มซื้อขึ้น/ลงตามปกติ\n        <Card className=\"mb-4 w-full rounded-none\">\n          <CardContent className=\"p-4\">\n            <div className=\"grid grid-cols-2 gap-3\">\n              <Button \n                className=\"bg-green-600 hover:bg-green-700 text-white\"\n                onClick={() => handleTradeClick(\"up\")}\n                disabled={tradeMutation.isPending}\n              >\n                {tradeMutation.isPending && tradeMutation.variables?.direction === \"up\" ? (\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                ) : (\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"w-4 h-4 mr-1\">\n                    <path d=\"m18 15-6-6-6 6\" />\n                  </svg>\n                )}\n                ซื้อขึ้น\n              </Button>\n              \n              <Button \n                variant=\"destructive\"\n                onClick={() => handleTradeClick(\"down\")}\n                disabled={tradeMutation.isPending}\n              >\n                {tradeMutation.isPending && tradeMutation.variables?.direction === \"down\" ? (\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                ) : (\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"w-4 h-4 mr-1\">\n                    <path d=\"m6 9 6 6 6-6\" />\n                  </svg>\n                )}\n                ซื้อลง\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n      \n      <Dialog open={showDialog} onOpenChange={setShowDialog}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>ยืนยันการสั่งซื้อ {tradeDirection === \"up\" ? \"ขึ้น\" : \"ลง\"}</DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"py-4\">\n            <div className=\"mb-4\">\n              <Label htmlFor=\"trade-amount\" className=\"block mb-2\">จำนวนเงินที่ต้องการลงทุน (บาท)</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"trade-amount\"\n                  type=\"text\"\n                  className=\"pr-12\"\n                  value={amount}\n                  onChange={(e) => validateAndSetAmount(e.target.value)}\n                />\n                <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\">\n                  ฿\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"space-y-2 mb-4\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">มูลค่าโดยประมาณ:</span>\n                <span>{formatCurrency(isNaN(estimatedValue) ? 0 : estimatedValue)}</span>\n              </div>\n              \n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">ค่าธรรมเนียม:</span>\n                <span>{formatCurrency(isNaN(tradingFee) ? 0 : tradingFee)}</span>\n              </div>\n            </div>\n            \n            <Separator className=\"my-4\" />\n            \n            <RadioGroup \n              value={selectedDuration} \n              onValueChange={setSelectedDuration}\n              className=\"space-y-4\"\n            >\n              {tradeOptions.map((option) => (\n                <div key={option.duration} className=\"flex items-center justify-between p-4 border rounded-lg bg-background\">\n                  <div className=\"flex items-center space-x-3\">\n                    <RadioGroupItem value={option.duration} id={`option-${option.duration}`} />\n                    <div>\n                      <div className=\"text-sm text-muted-foreground\">เวลาชำระราคา</div>\n                      <div className=\"text-xl font-bold\">{option.duration}</div>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-md font-medium text-primary\">กำไร {option.profit}%</div>\n                  </div>\n                </div>\n              ))}\n            </RadioGroup>\n            \n            <Separator className=\"my-4\" />\n            \n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between\">\n                <span>จำนวนเงินลงทุนซื้อทั้งหมด:</span>\n                <span className=\"font-semibold\">{formatCurrency(isNaN(estimatedValue) ? 0 : estimatedValue)}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>ยอดเงินคงเหลือ:</span>\n                <span className=\"font-semibold\">{formatCurrency(userBalance - (isNaN(estimatedValue) ? 0 : estimatedValue))}</span>\n              </div>\n            </div>\n          </div>\n          \n          <DialogFooter className=\"sm:justify-center\">\n            <Button \n              onClick={handleConfirmTrade} \n              disabled={tradeMutation.isPending}\n              className=\"w-full\"\n            >\n              {tradeMutation.isPending ? (\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              ) : null}\n              ยืนยันการสั่งซื้อ\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}","size_bytes":18607},"client/src/hooks/use-active-trades.tsx":{"content":"import { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"./use-auth\";\nimport { useEffect } from \"react\";\nimport { useWebSocket } from \"@/contexts/websocket-context\";\n\nexport type ActiveTradeData = {\n  id: number;\n  duration: number;\n  entryPrice: number;\n  direction: \"up\" | \"down\";\n  amount: string;\n  profitPercentage: number;\n  endTime: Date;\n  cryptoId: string;\n  cryptoSymbol: string;\n};\n\n// สร้าง key สำหรับเก็บข้อมูลการเทรดใน React Query\nconst ACTIVE_TRADES_KEY = \"active-trades\";\n\nexport function useActiveTrades() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const { socket, isConnected } = useWebSocket();\n\n  // ดึงข้อมูลการเทรดที่กำลังทำอยู่จาก cache\n  const { data: activeTrades = [] } = useQuery<ActiveTradeData[]>({\n    queryKey: [ACTIVE_TRADES_KEY],\n    // เราเก็บข้อมูลใน cache โดยไม่เรียก API ใหม่เมื่อโหลดหน้า\n    queryFn: () => [],\n    // ข้อมูลไม่มีการเปลี่ยนแปลงจาก server แต่เปลี่ยนแปลงเฉพาะใน client\n    staleTime: Infinity,\n    // เก็บข้อมูลใน cache ไว้ตลอด\n    gcTime: Infinity, \n    // แน่ใจว่าข้อมูลจะถูกเก็บไว้ระหว่างโหลดหน้าใหม่\n    enabled: !!user,\n  });\n\n  // เพิ่มข้อมูลการเทรดใหม่\n  const addActiveTrade = (trade: ActiveTradeData) => {\n    queryClient.setQueryData([ACTIVE_TRADES_KEY], (old: ActiveTradeData[] | undefined) => {\n      const newTrades = [...(old || [])];\n      // ตรวจสอบว่าไม่มีซ้ำ\n      const existingIndex = newTrades.findIndex(t => t.id === trade.id);\n      if (existingIndex >= 0) {\n        newTrades[existingIndex] = trade;\n      } else {\n        newTrades.push(trade);\n      }\n      return newTrades;\n    });\n  };\n\n  // ลบข้อมูลการเทรดที่เสร็จสิ้นแล้ว\n  const removeActiveTrade = (tradeId: number) => {\n    queryClient.setQueryData([ACTIVE_TRADES_KEY], (old: ActiveTradeData[] | undefined) => {\n      return (old || []).filter(trade => trade.id !== tradeId);\n    });\n  };\n\n  // ล้างข้อมูล active trades เก่าเมื่อผู้ใช้เข้าระบบใหม่\n  useEffect(() => {\n    if (user) {\n      // ล้าง active trades เก่าเมื่อเข้าระบบใหม่\n      queryClient.setQueryData([ACTIVE_TRADES_KEY], []);\n      console.log('Cleared old active trades for user:', user.id);\n    }\n  }, [user, queryClient]);\n\n  // Listen สำหรับการเทรดที่เสร็จสิ้นจาก WebSocket\n  useEffect(() => {\n    if (socket && isConnected) {\n      const handleTradeCompleted = (completedTradeInfo: { tradeId: number; userId: number; result: string; status: string }) => {\n        console.log('Active trades hook received trade completion:', completedTradeInfo);\n        // ลบการเทรดที่เสร็จสิ้นออกจาก active trades\n        removeActiveTrade(completedTradeInfo.tradeId);\n      };\n\n      socket.on('trade-completed', handleTradeCompleted);\n\n      return () => {\n        socket.off('trade-completed', handleTradeCompleted);\n      };\n    }\n  }, [socket, isConnected]);\n\n  // ค้นหาการเทรดที่กำลังทำอยู่ตาม cryptoId\n  const getActiveTradeForCrypto = (cryptoId: string) => {\n    return activeTrades.find(trade => trade.cryptoId === cryptoId);\n  };\n\n  return {\n    activeTrades,\n    addActiveTrade,\n    removeActiveTrade,\n    getActiveTradeForCrypto,\n  };\n}","size_bytes":3976},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { insertUserSchema, User, LoginData } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { z } from \"zod\";\n\ntype AuthContextType = {\n  user: User | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<User, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<User, Error, z.infer<typeof registerSchema>>;\n};\n\n// Extended schema with validation\nexport const registerSchema = insertUserSchema.extend({\n  password: z.string().min(8, \"Password must be at least 8 characters\"),\n  confirmPassword: z.string().min(1, \"Please confirm your password\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<User | null, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: User) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Login successful\",\n        description: `Welcome back, ${user.fullName}!`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof registerSchema>) => {\n      // Remove confirmPassword as it's not needed in the API\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { confirmPassword, ...userData } = data;\n      const res = await apiRequest(\"POST\", \"/api/register\", userData);\n      return await res.json();\n    },\n    onSuccess: (user: User) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Registration successful\",\n        description: `Welcome to CryptoTrade, ${user.fullName}!`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n      toast({\n        title: \"Logout successful\",\n        description: \"You have been logged out.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":3677},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/formatters.ts":{"content":"export function formatCurrency(value: number): string {\n  // ใช้ค่าคงที่เพื่อแก้ปัญหา maximumFractionDigits\n  return new Intl.NumberFormat('th-TH', {\n    style: 'currency',\n    currency: 'THB',\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  }).format(value);\n}\n\nexport function formatPercentage(value: number): string {\n  return new Intl.NumberFormat('en-US', {\n    style: 'percent',\n    minimumFractionDigits: 1,\n    maximumFractionDigits: 1,\n    signDisplay: 'always',\n  }).format(value / 100);\n}\n\nexport function formatShortDate(date: Date | string | null): string {\n  if (!date) return '';\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n  return new Intl.DateTimeFormat('en-US', {\n    month: 'short',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit',\n  }).format(dateObj);\n}\n\nexport function getTimeLabels(dataPoints: number): string[] {\n  const now = new Date();\n  const labels: string[] = [];\n  \n  for (let i = dataPoints - 1; i >= 0; i--) {\n    const time = new Date(now.getTime() - i * 3600000); // 1 hour intervals\n    labels.push(time.getHours().toString().padStart(2, '0') + ':00');\n  }\n  \n  return labels;\n}\n\nexport function getShortenedName(name: string, maxLength = 10): string {\n  return name.length > maxLength ? name.slice(0, maxLength) + '...' : name;\n}\n","size_bytes":1370},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  return <Route path={path} component={Component} />;\n}\n\nexport function AdminRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  if (user.role !== \"admin\" && user.role !== \"agent\") {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/\" />\n      </Route>\n    );\n  }\n\n  return <Route path={path} component={Component} />;\n}\n","size_bytes":1434},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-dashboard-page.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { User, Trade, Transaction } from \"@shared/schema\";\nimport { DesktopContainer } from \"@/components/layout/desktop-container\";\nimport { AdminSidebar } from \"@/components/layout/admin-sidebar\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  ResponsiveContainer,\n  BarChart,\n  Bar,\n  LineChart,\n  Line,\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  Tooltip,\n  CartesianGrid,\n  PieChart,\n  Pie,\n  Cell\n} from \"recharts\";\nimport { formatCurrency, formatShortDate } from \"@/lib/formatters\";\nimport {\n  Bell,\n  Wallet,\n  Users,\n  TrendingUp,\n  ArrowUpCircle,\n  ArrowDownCircle,\n  Clock,\n  ChevronRight,\n  Coins,\n  BitcoinIcon,\n  DollarSign\n} from \"lucide-react\";\n\n// Helper to get last 7 days\nconst getLast7Days = () => {\n  const result = [];\n  for (let i = 6; i >= 0; i--) {\n    const date = new Date();\n    date.setDate(date.getDate() - i);\n    result.push({\n      date: date.toISOString().slice(0, 10),\n      label: date.toLocaleDateString('th-TH', { day: 'numeric', month: 'short' })\n    });\n  }\n  return result;\n};\n\nexport default function AdminDashboardPage() {\n  // Fetch data\n  const { data: users } = useQuery<User[]>({\n    queryKey: [\"/api/admin/users\"],\n  });\n  \n  const { data: trades } = useQuery<Trade[]>({\n    queryKey: [\"/api/admin/trades\"],\n  });\n  \n  const { data: transactions } = useQuery<Transaction[]>({\n    queryKey: [\"/api/admin/transactions\"],\n  });\n\n  // Calculate summary stats\n  const totalUsers = users?.length || 0;\n  const totalActiveUsers = users?.filter(u => \n    new Date(u.lastLogin).getTime() > new Date().getTime() - 7 * 24 * 60 * 60 * 1000\n  ).length || 0;\n  \n  const totalBalance = users?.reduce((sum, user) => sum + parseFloat(user.balance || \"0\"), 0) || 0;\n  \n  const pendingTransactions = transactions?.filter(t => t.status === 'pending').length || 0;\n  const pendingDeposits = transactions?.filter(t => t.type === 'deposit' && t.status === 'pending').length || 0;\n  const pendingWithdrawals = transactions?.filter(t => t.type === 'withdraw' && t.status === 'pending').length || 0;\n  \n  const totalTrades = trades?.length || 0;\n  const totalTradeVolume = trades?.reduce((sum, t) => sum + parseFloat(t.amount), 0) || 0;\n  \n  // Prepare chart data\n  const last7Days = getLast7Days();\n  \n  // Transaction data for chart\n  const transactionData = last7Days.map(day => {\n    const dayTransactions = transactions?.filter(t => {\n      const transactionDate = new Date(t.createdAt).toISOString().slice(0, 10);\n      return transactionDate === day.date;\n    }) || [];\n    \n    const deposits = dayTransactions\n      .filter(t => t.type === 'deposit' && t.status === 'approved')\n      .reduce((sum, t) => sum + parseFloat(t.amount), 0);\n    \n    const withdrawals = dayTransactions\n      .filter(t => t.type === 'withdraw' && t.status === 'approved')\n      .reduce((sum, t) => sum + parseFloat(t.amount), 0);\n    \n    return {\n      name: day.label,\n      ฝาก: deposits,\n      ถอน: withdrawals\n    };\n  });\n  \n  // User data for chart\n  const userRegistrationData = last7Days.map(day => {\n    const newUsers = users?.filter(user => {\n      const userDate = new Date(user.createdAt).toISOString().slice(0, 10);\n      return userDate === day.date;\n    }).length || 0;\n    \n    return {\n      name: day.label,\n      'ผู้ใช้ใหม่': newUsers\n    };\n  });\n  \n  // Trade data for chart\n  const tradeData = last7Days.map(day => {\n    const dayTrades = trades?.filter(t => {\n      const tradeDate = new Date(t.createdAt).toISOString().slice(0, 10);\n      return tradeDate === day.date;\n    }) || [];\n    \n    const tradeCount = dayTrades.length;\n    const tradeVolume = dayTrades.reduce((sum, t) => sum + parseFloat(t.amount), 0);\n    \n    return {\n      name: day.label,\n      'จำนวนเทรด': tradeCount,\n      'มูลค่าเทรด': tradeVolume\n    };\n  });\n  \n  // Top cryptocurrencies data\n  const topCryptoData = [\n    { name: 'BTC', value: 45 },\n    { name: 'ETH', value: 30 },\n    { name: 'BNB', value: 15 },\n    { name: 'USDT', value: 7 },\n    { name: 'Others', value: 3 },\n  ];\n  \n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8'];\n  \n  return (\n    <DesktopContainer>\n      <div className=\"flex h-screen overflow-hidden\">\n        {/* Sidebar */}\n        <AdminSidebar />\n        \n        {/* Main Content */}\n        <div className=\"flex-1 flex flex-col overflow-hidden\">\n          {/* Top Bar */}\n          <header className=\"border-b border-border h-16 bg-card\">\n            <div className=\"flex items-center justify-between h-full px-6\">\n              <h1 className=\"text-2xl font-bold\">แดชบอร์ดผู้ดูแลระบบ</h1>\n              \n              <div className=\"flex items-center space-x-4\">\n                <Button size=\"icon\" variant=\"ghost\">\n                  <Bell className=\"h-5 w-5\" />\n                </Button>\n                \n                <div className=\"h-8 w-px bg-border mx-1\" />\n                \n                <ThemeToggle />\n              </div>\n            </div>\n          </header>\n          \n          {/* Main Content Scrollable Area */}\n          <main className=\"flex-1 overflow-y-auto p-6 bg-background\">\n            <div className=\"mb-6\">\n              <h2 className=\"text-xl font-bold\">ภาพรวมระบบ</h2>\n              <p className=\"text-muted-foreground\">ยินดีต้อนรับเข้าสู่แดชบอร์ดผู้ดูแลระบบ เอเซีย พลัส</p>\n            </div>\n            \n            {/* Stats Cards */}\n            <div className=\"grid grid-cols-4 gap-6 mb-6\">\n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">ผู้ใช้งานทั้งหมด</p>\n                      <h3 className=\"text-2xl font-bold mt-1\">{totalUsers}</h3>\n                      <p className=\"text-xs text-[hsl(var(--chart-1))] mt-1\">\n                        {totalActiveUsers} ใช้งานในช่วง 7 วันที่ผ่านมา\n                      </p>\n                    </div>\n                    <div className=\"p-3 rounded-full bg-primary/10\">\n                      <Users className=\"h-5 w-5 text-primary\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">มูลค่าทั้งหมด</p>\n                      <h3 className=\"text-2xl font-bold mt-1\">{formatCurrency(totalBalance)}</h3>\n                      <p className=\"text-xs text-green-500 mt-1\">\n                        ยอดเงินทั้งหมดในระบบ\n                      </p>\n                    </div>\n                    <div className=\"p-3 rounded-full bg-green-500/10\">\n                      <Wallet className=\"h-5 w-5 text-green-500\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">คำขอรออนุมัติ</p>\n                      <h3 className=\"text-2xl font-bold mt-1\">{pendingTransactions}</h3>\n                      <p className=\"text-xs text-amber-500 mt-1\">\n                        ฝาก {pendingDeposits} | ถอน {pendingWithdrawals}\n                      </p>\n                    </div>\n                    <div className=\"p-3 rounded-full bg-amber-500/10\">\n                      <Clock className=\"h-5 w-5 text-amber-500\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">การเทรดทั้งหมด</p>\n                      <h3 className=\"text-2xl font-bold mt-1\">{totalTrades}</h3>\n                      <p className=\"text-xs text-blue-500 mt-1\">\n                        มูลค่า {formatCurrency(totalTradeVolume)}\n                      </p>\n                    </div>\n                    <div className=\"p-3 rounded-full bg-blue-500/10\">\n                      <TrendingUp className=\"h-5 w-5 text-blue-500\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n            \n            {/* Chart Row */}\n            <div className=\"grid grid-cols-2 gap-6 mb-6\">\n              <Card>\n                <CardHeader className=\"pb-3\">\n                  <CardTitle>ธุรกรรมฝาก-ถอน (7 วันล่าสุด)</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-80\">\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <BarChart data={transactionData} margin={{ top: 10, right: 10, left: 0, bottom: 0 }}>\n                        <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\n                        <XAxis dataKey=\"name\" />\n                        <YAxis \n                          tickFormatter={(value) => value.toLocaleString('th-TH')}\n                        />\n                        <Tooltip \n                          formatter={(value: number) => [`฿${value.toLocaleString('th-TH')}`, '']}\n                          labelFormatter={(label) => `วันที่: ${label}`}\n                        />\n                        <Bar dataKey=\"ฝาก\" fill=\"#10b981\" radius={[4, 4, 0, 0]} barSize={30} />\n                        <Bar dataKey=\"ถอน\" fill=\"#ef4444\" radius={[4, 4, 0, 0]} barSize={30} />\n                      </BarChart>\n                    </ResponsiveContainer>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardHeader className=\"pb-3\">\n                  <CardTitle>จำนวนผู้ใช้ใหม่</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-80\">\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <AreaChart data={userRegistrationData} margin={{ top: 10, right: 10, left: 0, bottom: 0 }}>\n                        <defs>\n                          <linearGradient id=\"colorUsers\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                            <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8}/>\n                            <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0.1}/>\n                          </linearGradient>\n                        </defs>\n                        <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\n                        <XAxis dataKey=\"name\" />\n                        <YAxis />\n                        <Tooltip />\n                        <Area type=\"monotone\" dataKey=\"ผู้ใช้ใหม่\" stroke=\"#8884d8\" fillOpacity={1} fill=\"url(#colorUsers)\" />\n                      </AreaChart>\n                    </ResponsiveContainer>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n            \n            {/* Bottom Row */}\n            <div className=\"grid grid-cols-3 gap-6 mb-6\">\n              <Card>\n                <CardHeader className=\"pb-3\">\n                  <CardTitle>สกุลเงินที่นิยมเทรด</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-60\">\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <PieChart>\n                        <Pie\n                          data={topCryptoData}\n                          cx=\"50%\"\n                          cy=\"50%\"\n                          labelLine={false}\n                          outerRadius={80}\n                          fill=\"#8884d8\"\n                          dataKey=\"value\"\n                          nameKey=\"name\"\n                          label={(entry) => entry.name}\n                        >\n                          {topCryptoData.map((entry, index) => (\n                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                          ))}\n                        </Pie>\n                        <Tooltip formatter={(value: number) => [`${value}%`, '']} />\n                      </PieChart>\n                    </ResponsiveContainer>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"col-span-2\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle>คำขอรออนุมัติล่าสุด</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {transactions?.filter(t => t.status === 'pending').slice(0, 4).map((transaction) => (\n                      <div key={transaction.id} className=\"flex items-center justify-between p-3 rounded-lg bg-card border border-border\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"p-2 rounded-full bg-primary/10\">\n                            {transaction.type === 'deposit' ? (\n                              <ArrowUpCircle className=\"h-5 w-5 text-green-500\" />\n                            ) : (\n                              <ArrowDownCircle className=\"h-5 w-5 text-blue-500\" />\n                            )}\n                          </div>\n                          <div>\n                            <div className=\"font-medium\">\n                              {transaction.type === 'deposit' ? 'คำขอฝากเงิน' : 'คำขอถอนเงิน'}\n                            </div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              ผู้ใช้ #{transaction.userId} - {formatShortDate(transaction.createdAt)}\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"font-bold\">\n                            {formatCurrency(parseFloat(transaction.amount))}\n                          </div>\n                          <Badge variant=\"secondary\" className=\"flex items-center\">\n                            <Clock className=\"h-3 w-3 mr-1\" />\n                            รออนุมัติ\n                          </Badge>\n                          <Button variant=\"ghost\" size=\"icon\">\n                            <ChevronRight className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                    \n                    {(!transactions || transactions.filter(t => t.status === 'pending').length === 0) && (\n                      <div className=\"text-center py-6 text-muted-foreground\">\n                        ไม่มีคำขอที่รออนุมัติในขณะนี้\n                      </div>\n                    )}\n                    \n                    {transactions && transactions.filter(t => t.status === 'pending').length > 0 && (\n                      <div className=\"text-center mt-2\">\n                        <Button variant=\"link\" className=\"text-primary\">\n                          ดูคำขอทั้งหมด\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </main>\n        </div>\n      </div>\n    </DesktopContainer>\n  );\n}","size_bytes":16706},"client/src/pages/admin-page.tsx":{"content":"import { MobileContainer } from \"@/components/layout/mobile-container\";\nimport { TopNavigation } from \"@/components/layout/top-navigation\";\nimport { BottomNavigation } from \"@/components/layout/bottom-navigation\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { DataTable } from \"@/components/ui/data-table\";\nimport { User, Trade, Transaction } from \"@shared/schema\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { formatCurrency, formatShortDate } from \"@/lib/formatters\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Label } from \"@/components/ui/label\";\nimport { Button } from \"@/components/ui/button\";\nimport { CheckCircle, XCircle, ArrowUp, ArrowDown, FileText, Search, Loader2 } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogDescription } from \"@/components/ui/dialog\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Input } from \"@/components/ui/input\";\nimport { useState } from \"react\";\n\nexport default function AdminPage() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const [selectedTransaction, setSelectedTransaction] = useState<Transaction | null>(null);\n  const [showTransactionDialog, setShowTransactionDialog] = useState(false);\n  const [adminNote, setAdminNote] = useState(\"\");\n  const [loadingApproval, setLoadingApproval] = useState(false);\n  \n  const { data: users, isLoading: loadingUsers } = useQuery<User[]>({\n    queryKey: [\"/api/admin/users\"],\n  });\n  \n  const { data: trades, isLoading: loadingTrades } = useQuery<Trade[]>({\n    queryKey: [\"/api/admin/trades\"],\n  });\n  \n  const { data: transactions, isLoading: loadingTransactions } = useQuery<Transaction[]>({\n    queryKey: [\"/api/admin/transactions\"],\n    refetchInterval: 15000, // รีเฟรชทุก 15 วินาที\n  });\n\n  const userCount = users?.length || 0;\n  const activeTradesCount = trades?.filter(t => t.status === 'active').length || 0;\n  const pendingTransactionsCount = transactions?.filter(t => t.status === 'pending').length || 0;\n  const tradingVolume = trades?.reduce((sum, trade) => {\n    const amount = parseFloat(trade.amount);\n    const price = parseFloat(trade.entryPrice);\n    return sum + (amount * price);\n  }, 0) || 0;\n  \n  const lastWeekVolume = tradingVolume * 0.75; // Simulated value\n  const volumeChange = tradingVolume > 0 ? (tradingVolume - lastWeekVolume) / lastWeekVolume * 100 : 0;\n  \n  const userColumns = [\n    {\n      key: 'id',\n      header: 'ID',\n      width: '50px',\n      cell: (user: User) => <span>{user.id}</span>,\n    },\n    {\n      key: 'username',\n      header: 'Username',\n      cell: (user: User) => (\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"w-8 h-8 rounded-full bg-primary text-primary-foreground flex items-center justify-center\">\n            {user.fullName.charAt(0)}\n          </div>\n          <span>{user.username}</span>\n        </div>\n      ),\n    },\n    {\n      key: 'fullName',\n      header: 'Full Name',\n    },\n    {\n      key: 'email',\n      header: 'Email',\n    },\n    {\n      key: 'role',\n      header: 'Role',\n      cell: (user: User) => (\n        <Badge variant={user.role === 'admin' ? 'destructive' : 'secondary'}>\n          {user.role}\n        </Badge>\n      ),\n    },\n    {\n      key: 'createdAt',\n      header: 'Created',\n      cell: (user: User) => formatShortDate(user.createdAt),\n    },\n  ] as const;\n  \n  const tradeColumns = [\n    {\n      key: 'id',\n      header: 'ID',\n      width: '50px',\n    },\n    {\n      key: 'userId',\n      header: 'User',\n      cell: (trade: Trade) => {\n        const user = users?.find(u => u.id === trade.userId);\n        return user?.username || `User ${trade.userId}`;\n      },\n    },\n    {\n      key: 'cryptoId',\n      header: 'Crypto',\n      cell: (trade: Trade) => trade.cryptoId.toUpperCase(),\n    },\n    {\n      key: 'amount',\n      header: 'Amount',\n    },\n    {\n      key: 'direction',\n      header: 'Direction',\n      cell: (trade: Trade) => (\n        <Badge variant={trade.direction === 'up' ? 'default' : 'destructive'}>\n          {trade.direction.toUpperCase()}\n        </Badge>\n      ),\n    },\n    {\n      key: 'entryPrice',\n      header: 'Entry Price',\n      cell: (trade: Trade) => formatCurrency(parseFloat(trade.entryPrice)),\n    },\n    {\n      key: 'status',\n      header: 'Status',\n      cell: (trade: Trade) => (\n        <Badge variant={trade.status === 'active' ? 'default' : 'secondary'}>\n          {trade.status}\n        </Badge>\n      ),\n    },\n    {\n      key: 'createdAt',\n      header: 'Created',\n      cell: (trade: Trade) => formatShortDate(trade.createdAt),\n    },\n  ] as const;\n  \n  // คอลัมน์สำหรับตารางธุรกรรม\n  const transactionColumns = [\n    {\n      key: 'id',\n      header: 'ID',\n      width: '50px',\n    },\n    {\n      key: 'userId',\n      header: 'User',\n      cell: (transaction: Transaction) => {\n        const user = users?.find(u => u.id === transaction.userId);\n        return user?.username || `User ${transaction.userId}`;\n      },\n    },\n    {\n      key: 'type',\n      header: 'Type',\n      cell: (transaction: Transaction) => (\n        <Badge variant={transaction.type === 'deposit' ? 'default' : 'secondary'}>\n          {transaction.type === 'deposit' ? 'ฝากเงิน' : 'ถอนเงิน'}\n        </Badge>\n      ),\n    },\n    {\n      key: 'amount',\n      header: 'Amount',\n      cell: (transaction: Transaction) => formatCurrency(parseFloat(transaction.amount)),\n    },\n    {\n      key: 'status',\n      header: 'Status',\n      cell: (transaction: Transaction) => {\n        let variant = 'secondary';\n        let label = 'รออนุมัติ';\n        \n        if (transaction.status === 'approved') {\n          variant = 'default';\n          label = 'อนุมัติแล้ว';\n        } else if (transaction.status === 'rejected') {\n          variant = 'destructive';\n          label = 'ปฏิเสธแล้ว';\n        }\n        \n        return <Badge variant={variant as any}>{label}</Badge>;\n      },\n    },\n    {\n      key: 'createdAt',\n      header: 'Created',\n      cell: (transaction: Transaction) => formatShortDate(transaction.createdAt),\n    },\n    {\n      key: 'actions',\n      header: 'Actions',\n      cell: (transaction: Transaction) => {\n        // แสดงปุ่มเฉพาะรายการที่รอการอนุมัติเท่านั้น\n        if (transaction.status !== 'pending') {\n          return (\n            <div className=\"text-xs text-muted-foreground italic\">\n              {transaction.status === 'approved' ? 'อนุมัติแล้ว' : 'ปฏิเสธแล้ว'}\n            </div>\n          );\n        }\n        \n        return (\n          <div className=\"flex space-x-2\">\n            <Button \n              size=\"sm\" \n              variant=\"ghost\" \n              onClick={() => {\n                setSelectedTransaction(transaction);\n                setAdminNote(\"\");\n                setShowTransactionDialog(true);\n              }}\n            >\n              <Search className=\"h-4 w-4 mr-1\" />\n              รายละเอียด\n            </Button>\n          </div>\n        );\n      },\n    },\n  ] as const;\n\n  // Mutation เพื่ออัพเดทสถานะของธุรกรรม\n  const updateTransactionMutation = useMutation({\n    mutationFn: async ({ id, status, note }: { id: number, status: string, note?: string }) => {\n      const response = await apiRequest('PATCH', `/api/admin/transactions/${id}`, { status, note });\n      return response.json();\n    },\n    onSuccess: () => {\n      // รีเฟรชข้อมูลธุรกรรมหลังจากอัพเดทสำเร็จ\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/transactions'] });\n      // รีเฟรชข้อมูลผู้ใช้เพื่ออัพเดทยอดเงิน\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] });\n      \n      setShowTransactionDialog(false);\n      setLoadingApproval(false);\n      \n      toast({\n        title: \"อัพเดทสถานะสำเร็จ\",\n        description: \"ระบบได้อัพเดทสถานะธุรกรรมเรียบร้อยแล้ว\",\n      });\n    },\n    onError: (error: Error) => {\n      setLoadingApproval(false);\n      toast({\n        title: \"เกิดข้อผิดพลาด\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n  \n  // ฟังก์ชันสำหรับการอนุมัติหรือปฏิเสธธุรกรรม\n  const handleTransactionAction = (status: 'approved' | 'rejected') => {\n    if (!selectedTransaction) return;\n    \n    setLoadingApproval(true);\n    \n    updateTransactionMutation.mutate({\n      id: selectedTransaction.id,\n      status,\n      note: adminNote.trim() || undefined\n    });\n  };\n  \n  const handleBack = () => {\n    navigate('/');\n  };\n\n  return (\n    <MobileContainer>\n      <div className=\"pb-20\"> {/* Add padding for bottom navigation */}\n        <TopNavigation title=\"Admin Dashboard\" showBackButton onBack={handleBack} />\n        \n        <div className=\"p-4\">\n          {/* Summary Cards */}\n          <div className=\"grid grid-cols-2 gap-4 mb-6\">\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"text-muted-foreground mb-1\">Active Users</div>\n                <div className=\"text-2xl font-semibold\">{userCount}</div>\n                <div className=\"text-[hsl(var(--chart-1))] text-sm mt-1\">+12% this week</div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"text-muted-foreground mb-1\">Active Trades</div>\n                <div className=\"text-2xl font-semibold\">{activeTradesCount}</div>\n                <div className=\"text-[hsl(var(--chart-1))] text-sm mt-1\">+8% this week</div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"text-muted-foreground mb-1\">Total Volume</div>\n                <div className=\"text-2xl font-semibold\">{formatCurrency(tradingVolume)}</div>\n                <div className=\"text-[hsl(var(--chart-1))] text-sm mt-1\">\n                  {volumeChange >= 0 ? '+' : ''}{volumeChange.toFixed(1)}% this month\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"text-muted-foreground mb-1\">Revenue</div>\n                <div className=\"text-2xl font-semibold\">{formatCurrency(tradingVolume * 0.002)}</div>\n                <div className=\"text-[hsl(var(--chart-1))] text-sm mt-1\">+15% this month</div>\n              </CardContent>\n            </Card>\n          </div>\n          \n          {/* Platform Settings */}\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <CardTitle>Platform Settings</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"maintenance-mode\" className=\"font-medium\">Maintenance Mode</Label>\n                    <p className=\"text-sm text-muted-foreground\">Temporarily disable the platform</p>\n                  </div>\n                  <Switch id=\"maintenance-mode\" />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"new-registrations\" className=\"font-medium\">New Registrations</Label>\n                    <p className=\"text-sm text-muted-foreground\">Allow new user sign-ups</p>\n                  </div>\n                  <Switch id=\"new-registrations\" defaultChecked />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"trading-enabled\" className=\"font-medium\">Trading Enabled</Label>\n                    <p className=\"text-sm text-muted-foreground\">Allow users to execute trades</p>\n                  </div>\n                  <Switch id=\"trading-enabled\" defaultChecked />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Tabs defaultValue=\"transactions\">\n            <TabsList className=\"w-full mb-4\">\n              <TabsTrigger value=\"transactions\">\n                รายการธุรกรรม\n                {pendingTransactionsCount > 0 && (\n                  <Badge variant=\"destructive\" className=\"ml-2\">\n                    {pendingTransactionsCount}\n                  </Badge>\n                )}\n              </TabsTrigger>\n              <TabsTrigger value=\"users\">ผู้ใช้งาน</TabsTrigger>\n              <TabsTrigger value=\"trades\">รายการเทรด</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"transactions\">\n              <DataTable\n                columns={transactionColumns as any}\n                data={transactions || []}\n                isLoading={loadingTransactions}\n                emptyMessage=\"ไม่พบรายการธุรกรรม\"\n              />\n            </TabsContent>\n            \n            <TabsContent value=\"users\">\n              <DataTable\n                columns={userColumns as any}\n                data={users || []}\n                isLoading={loadingUsers}\n                emptyMessage=\"ไม่พบผู้ใช้งาน\"\n              />\n            </TabsContent>\n            \n            <TabsContent value=\"trades\">\n              <DataTable\n                columns={tradeColumns as any}\n                data={trades || []}\n                isLoading={loadingTrades}\n                emptyMessage=\"ไม่พบรายการเทรด\"\n              />\n            </TabsContent>\n          </Tabs>\n          \n          {/* Modal for transaction details and approval/rejection */}\n          <Dialog open={showTransactionDialog} onOpenChange={setShowTransactionDialog}>\n            <DialogContent className=\"max-w-md\">\n              <DialogHeader>\n                <DialogTitle>รายละเอียดธุรกรรม #{selectedTransaction?.id}</DialogTitle>\n                <DialogDescription>\n                  {selectedTransaction?.type === 'deposit' ? 'คำขอฝากเงิน' : 'คำขอถอนเงิน'}\n                </DialogDescription>\n              </DialogHeader>\n              \n              {selectedTransaction && (\n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                    <div className=\"text-muted-foreground\">ประเภท:</div>\n                    <div>{selectedTransaction.type === 'deposit' ? 'ฝากเงิน' : 'ถอนเงิน'}</div>\n                    \n                    <div className=\"text-muted-foreground\">จำนวนเงิน:</div>\n                    <div className=\"font-bold\">{formatCurrency(parseFloat(selectedTransaction.amount))}</div>\n                    \n                    <div className=\"text-muted-foreground\">ผู้ใช้งาน:</div>\n                    <div>{users?.find(u => u.id === selectedTransaction.userId)?.username}</div>\n                    \n                    <div className=\"text-muted-foreground\">วันที่:</div>\n                    <div>{formatShortDate(selectedTransaction.createdAt)}</div>\n                    \n                    <div className=\"text-muted-foreground\">สถานะ:</div>\n                    <div>\n                      <Badge variant=\"secondary\">รออนุมัติ</Badge>\n                    </div>\n                    \n                    <div className=\"text-muted-foreground\">วิธีการชำระเงิน:</div>\n                    <div>{selectedTransaction.method}</div>\n                    \n                    {selectedTransaction.bankAccount && (\n                      <>\n                        <div className=\"text-muted-foreground\">เลขที่บัญชี:</div>\n                        <div>{selectedTransaction.bankAccount}</div>\n                      </>\n                    )}\n                    \n                    {selectedTransaction.bankName && (\n                      <>\n                        <div className=\"text-muted-foreground\">ธนาคาร:</div>\n                        <div>{selectedTransaction.bankName}</div>\n                      </>\n                    )}\n                  </div>\n                  \n                  {selectedTransaction.note && (\n                    <div className=\"mt-4\">\n                      <div className=\"text-sm text-muted-foreground\">หมายเหตุจากผู้ใช้:</div>\n                      <div className=\"text-sm p-2 bg-muted rounded-md\">{selectedTransaction.note}</div>\n                    </div>\n                  )}\n                  \n                  {selectedTransaction.paymentProof && (\n                    <div className=\"mt-4\">\n                      <div className=\"text-sm text-muted-foreground mb-1\">หลักฐานการโอนเงิน:</div>\n                      <div className=\"border rounded-md overflow-hidden\">\n                        <img \n                          src={selectedTransaction.paymentProof} \n                          alt=\"หลักฐานการโอนเงิน\" \n                          className=\"w-full h-auto\"\n                        />\n                      </div>\n                    </div>\n                  )}\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"adminNote\">หมายเหตุสำหรับการอนุมัติ/ปฏิเสธ:</Label>\n                    <Input\n                      id=\"adminNote\"\n                      placeholder=\"ระบุหมายเหตุเพิ่มเติม (ถ้ามี)\"\n                      value={adminNote}\n                      onChange={(e) => setAdminNote(e.target.value)}\n                    />\n                  </div>\n                </div>\n              )}\n              \n              <DialogFooter className=\"flex-col sm:flex-row gap-2\">\n                <Button \n                  variant=\"outline\" \n                  disabled={loadingApproval}\n                  onClick={() => setShowTransactionDialog(false)}\n                >\n                  ยกเลิก\n                </Button>\n                <Button \n                  variant=\"destructive\" \n                  disabled={loadingApproval} \n                  className=\"w-full sm:w-auto\"\n                  onClick={() => handleTransactionAction('rejected')}\n                >\n                  {loadingApproval ? (\n                    <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  ) : (\n                    <XCircle className=\"h-4 w-4 mr-2\" />\n                  )}\n                  ปฏิเสธคำขอ\n                </Button>\n                <Button \n                  disabled={loadingApproval} \n                  className=\"w-full sm:w-auto\"\n                  onClick={() => handleTransactionAction('approved')}\n                >\n                  {loadingApproval ? (\n                    <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  ) : (\n                    <CheckCircle className=\"h-4 w-4 mr-2\" />\n                  )}\n                  อนุมัติคำขอ\n                </Button>\n              </DialogFooter>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n      \n      <BottomNavigation />\n    </MobileContainer>\n  );\n}\n","size_bytes":20471},"client/src/pages/admin-reports-page.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { User, Trade, Transaction } from \"@shared/schema\";\nimport { DesktopContainer } from \"@/components/layout/desktop-container\";\nimport { AdminSidebar } from \"@/components/layout/admin-sidebar\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport {\n  ResponsiveContainer,\n  BarChart,\n  Bar,\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  CartesianGrid,\n  PieChart,\n  Pie,\n  Cell,\n  Legend\n} from \"recharts\";\nimport { formatCurrency } from \"@/lib/formatters\";\nimport {\n  Search,\n  Bell,\n  Download,\n  Calendar,\n  FileBarChart,\n  PieChart as PieChartIcon,\n  BarChart as BarChartIcon,\n  LineChart as LineChartIcon,\n  Users,\n  TrendingUp\n} from \"lucide-react\";\n\n// Helper function to generate dates for the past N days\nconst getPastDays = (days: number) => {\n  const result = [];\n  for (let i = days - 1; i >= 0; i--) {\n    const date = new Date();\n    date.setDate(date.getDate() - i);\n    result.push({\n      date: date.toISOString().slice(0, 10),\n      label: date.toLocaleDateString('th-TH', { day: 'numeric', month: 'short' })\n    });\n  }\n  return result;\n};\n\nexport default function AdminReportsPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [dateRange, setDateRange] = useState(\"last7days\");\n  const [chartType, setChartType] = useState(\"bar\");\n  \n  // Fetch data\n  const { data: users } = useQuery<User[]>({\n    queryKey: [\"/api/admin/users\"],\n  });\n  \n  const { data: trades } = useQuery<Trade[]>({\n    queryKey: [\"/api/admin/trades\"],\n  });\n  \n  const { data: transactions } = useQuery<Transaction[]>({\n    queryKey: [\"/api/admin/transactions\"],\n  });\n\n  // Calculate metrics based on date range\n  const pastDays = dateRange === \"last7days\" ? 7 : dateRange === \"last30days\" ? 30 : 90;\n  const dateList = getPastDays(pastDays);\n  \n  // Prepare transaction data for charts\n  const getTransactionData = () => {\n    const data = dateList.map(day => {\n      const dayTransactions = transactions?.filter(t => {\n        const transactionDate = new Date(t.createdAt).toISOString().slice(0, 10);\n        return transactionDate === day.date;\n      }) || [];\n      \n      const deposits = dayTransactions\n        .filter(t => t.type === 'deposit' && t.status === 'approved')\n        .reduce((sum, t) => sum + parseFloat(t.amount), 0);\n      \n      const withdrawals = dayTransactions\n        .filter(t => t.type === 'withdraw' && t.status === 'approved')\n        .reduce((sum, t) => sum + parseFloat(t.amount), 0);\n      \n      return {\n        name: day.label,\n        ฝาก: deposits,\n        ถอน: withdrawals,\n        สุทธิ: deposits - withdrawals\n      };\n    });\n    \n    return data;\n  };\n  \n  // Prepare trade data for charts\n  const getTradeData = () => {\n    const data = dateList.map(day => {\n      const dayTrades = trades?.filter(t => {\n        const tradeDate = new Date(t.createdAt).toISOString().slice(0, 10);\n        return tradeDate === day.date;\n      }) || [];\n      \n      const upTrades = dayTrades.filter(t => t.direction === 'up');\n      const downTrades = dayTrades.filter(t => t.direction === 'down');\n      \n      const volume = dayTrades.reduce((sum, t) => sum + (parseFloat(t.amount) * parseFloat(t.entryPrice)), 0);\n      \n      return {\n        name: day.label,\n        มูลค่าการเทรด: volume,\n        ขึ้น: upTrades.length,\n        ลง: downTrades.length,\n        จำนวนการเทรด: dayTrades.length\n      };\n    });\n    \n    return data;\n  };\n  \n  // Prepare user growth data\n  const getUserGrowthData = () => {\n    if (!users) return [];\n    \n    // Sort users by creation date\n    const sortedUsers = [...users].sort(\n      (a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n    );\n    \n    // Count users by date\n    const usersByDate = dateList.map(day => {\n      const count = sortedUsers.filter(user => {\n        const userDate = new Date(user.createdAt).toISOString().slice(0, 10);\n        return userDate <= day.date;\n      }).length;\n      \n      return {\n        name: day.label,\n        ผู้ใช้: count\n      };\n    });\n    \n    return usersByDate;\n  };\n  \n  // Prepare data for pie chart\n  const getTradeDistributionData = () => {\n    if (!trades) return [];\n    \n    const cryptoTrades: Record<string, number> = {};\n    \n    trades.forEach(trade => {\n      const crypto = trade.cryptoId;\n      const amount = parseFloat(trade.amount) * parseFloat(trade.entryPrice);\n      \n      if (cryptoTrades[crypto]) {\n        cryptoTrades[crypto] += amount;\n      } else {\n        cryptoTrades[crypto] = amount;\n      }\n    });\n    \n    return Object.entries(cryptoTrades).map(([name, value]) => ({\n      name: name.toUpperCase(),\n      value\n    }));\n  };\n  \n  // Data for charts\n  const transactionData = getTransactionData();\n  const tradeData = getTradeData();\n  const userGrowthData = getUserGrowthData();\n  const tradeDistributionData = getTradeDistributionData();\n  \n  // Calculate summary metrics\n  const totalUsers = users?.length || 0;\n  const newUsers = users?.filter(\n    u => new Date(u.createdAt) > new Date(Date.now() - (pastDays * 24 * 60 * 60 * 1000))\n  ).length || 0;\n  \n  const totalTrades = trades?.length || 0;\n  const totalTradeVolume = trades?.reduce(\n    (sum, t) => sum + (parseFloat(t.amount) * parseFloat(t.entryPrice)), 0\n  ) || 0;\n  \n  const totalDeposits = transactions?.filter(\n    t => t.type === 'deposit' && t.status === 'approved'\n  ).reduce((sum, t) => sum + parseFloat(t.amount), 0) || 0;\n  \n  const totalWithdrawals = transactions?.filter(\n    t => t.type === 'withdraw' && t.status === 'approved'\n  ).reduce((sum, t) => sum + parseFloat(t.amount), 0) || 0;\n\n  // Colors for charts\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8'];\n  \n  return (\n    <DesktopContainer>\n      <div className=\"flex h-screen overflow-hidden\">\n        {/* Sidebar */}\n        <AdminSidebar />\n        \n        {/* Main Content */}\n        <div className=\"flex-1 flex flex-col overflow-hidden\">\n          {/* Top Bar */}\n          <header className=\"border-b border-border h-16 bg-card\">\n            <div className=\"flex items-center justify-between h-full px-6\">\n              <h1 className=\"text-2xl font-bold\">รายงานและวิเคราะห์</h1>\n              \n              <div className=\"flex items-center space-x-4\">\n                <div className=\"h-8 w-px bg-border mx-1\" />\n                \n                <ThemeToggle />\n              </div>\n            </div>\n          </header>\n          \n          {/* Main Content Scrollable Area */}\n          <main className=\"flex-1 overflow-y-auto p-6 bg-background\">\n            {/* Page Header with Action Buttons */}\n            <div className=\"flex justify-between items-center mb-6\">\n              <div>\n                <h2 className=\"text-xl font-bold\">ภาพรวมและข้อมูลสถิติ</h2>\n                <p className=\"text-muted-foreground\">รายงานสถิติและการวิเคราะห์ข้อมูลของระบบ</p>\n              </div>\n              \n              <div className=\"flex space-x-3 items-center\">\n                <div className=\"flex items-center space-x-2\">\n                  <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                  <Select value={dateRange} onValueChange={setDateRange}>\n                    <SelectTrigger className=\"w-[180px] h-9\">\n                      <SelectValue placeholder=\"เลือกช่วงเวลา\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"last7days\">7 วันล่าสุด</SelectItem>\n                      <SelectItem value=\"last30days\">30 วันล่าสุด</SelectItem>\n                      <SelectItem value=\"last90days\">90 วันล่าสุด</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <Button variant=\"outline\" className=\"h-9\">\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  ส่งออกรายงาน\n                </Button>\n              </div>\n            </div>\n            \n            {/* Dashboard Stats */}\n            <div className=\"grid grid-cols-4 gap-6 mb-6\">\n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">ผู้ใช้ทั้งหมด</p>\n                      <h3 className=\"text-2xl font-bold mt-1\">{totalUsers}</h3>\n                      <p className=\"text-xs text-green-500 mt-1\">\n                        +{newUsers} ผู้ใช้ใหม่ (ใน {pastDays} วัน)\n                      </p>\n                    </div>\n                    <div className=\"p-3 rounded-full bg-blue-500/10\">\n                      <Users className=\"h-5 w-5 text-blue-500\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">มูลค่าการเทรด</p>\n                      <h3 className=\"text-2xl font-bold mt-1\">{formatCurrency(totalTradeVolume)}</h3>\n                      <p className=\"text-xs text-blue-500 mt-1\">\n                        {totalTrades} รายการเทรด\n                      </p>\n                    </div>\n                    <div className=\"p-3 rounded-full bg-amber-500/10\">\n                      <TrendingUp className=\"h-5 w-5 text-amber-500\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">ยอดฝากเงิน</p>\n                      <h3 className=\"text-2xl font-bold mt-1\">{formatCurrency(totalDeposits)}</h3>\n                      <p className=\"text-xs text-green-500 mt-1\">\n                        ทั้งหมดในระบบ\n                      </p>\n                    </div>\n                    <div className=\"p-3 rounded-full bg-green-500/10\">\n                      <BarChartIcon className=\"h-5 w-5 text-green-500\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">ยอดถอนเงิน</p>\n                      <h3 className=\"text-2xl font-bold mt-1\">{formatCurrency(totalWithdrawals)}</h3>\n                      <p className=\"text-xs text-orange-500 mt-1\">\n                        ทั้งหมดในระบบ\n                      </p>\n                    </div>\n                    <div className=\"p-3 rounded-full bg-red-500/10\">\n                      <LineChartIcon className=\"h-5 w-5 text-red-500\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n            \n            {/* Main Charts */}\n            <div className=\"grid grid-cols-2 gap-6 mb-6\">\n              <Card>\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle>ธุรกรรมฝาก-ถอน</CardTitle>\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        variant={chartType === \"bar\" ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        className=\"h-8 w-8 p-0\"\n                        onClick={() => setChartType(\"bar\")}\n                      >\n                        <BarChartIcon className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant={chartType === \"line\" ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        className=\"h-8 w-8 p-0\"\n                        onClick={() => setChartType(\"line\")}\n                      >\n                        <LineChartIcon className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-80\">\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      {chartType === \"bar\" ? (\n                        <BarChart data={transactionData} margin={{ top: 10, right: 10, left: 0, bottom: 0 }}>\n                          <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\n                          <XAxis dataKey=\"name\" />\n                          <YAxis \n                            tickFormatter={(value) => value.toLocaleString('th-TH')}\n                          />\n                          <Tooltip \n                            formatter={(value: number) => [`฿${value.toLocaleString('th-TH')}`, '']}\n                            labelFormatter={(label) => `วันที่: ${label}`}\n                          />\n                          <Legend />\n                          <Bar dataKey=\"ฝาก\" fill=\"#10b981\" radius={[4, 4, 0, 0]} barSize={30} />\n                          <Bar dataKey=\"ถอน\" fill=\"#ef4444\" radius={[4, 4, 0, 0]} barSize={30} />\n                        </BarChart>\n                      ) : (\n                        <LineChart data={transactionData} margin={{ top: 10, right: 10, left: 0, bottom: 0 }}>\n                          <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\n                          <XAxis dataKey=\"name\" />\n                          <YAxis \n                            tickFormatter={(value) => value.toLocaleString('th-TH')}\n                          />\n                          <Tooltip \n                            formatter={(value: number) => [`฿${value.toLocaleString('th-TH')}`, '']}\n                            labelFormatter={(label) => `วันที่: ${label}`}\n                          />\n                          <Legend />\n                          <Line type=\"monotone\" dataKey=\"ฝาก\" stroke=\"#10b981\" activeDot={{ r: 8 }} />\n                          <Line type=\"monotone\" dataKey=\"ถอน\" stroke=\"#ef4444\" activeDot={{ r: 8 }} />\n                          <Line type=\"monotone\" dataKey=\"สุทธิ\" stroke=\"#3b82f6\" activeDot={{ r: 8 }} />\n                        </LineChart>\n                      )}\n                    </ResponsiveContainer>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardHeader className=\"pb-3\">\n                  <CardTitle>การเติบโตของผู้ใช้</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-80\">\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <LineChart data={userGrowthData} margin={{ top: 10, right: 10, left: 0, bottom: 0 }}>\n                        <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\n                        <XAxis dataKey=\"name\" />\n                        <YAxis />\n                        <Tooltip \n                          formatter={(value: number) => [value.toString(), 'จำนวนผู้ใช้']}\n                        />\n                        <Line type=\"monotone\" dataKey=\"ผู้ใช้\" stroke=\"#8884d8\" activeDot={{ r: 8 }} strokeWidth={2} />\n                      </LineChart>\n                    </ResponsiveContainer>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-6 mb-6\">\n              <Card>\n                <CardHeader className=\"pb-3\">\n                  <CardTitle>มูลค่าการเทรด</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-80\">\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <BarChart data={tradeData} margin={{ top: 10, right: 10, left: 0, bottom: 0 }}>\n                        <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\n                        <XAxis dataKey=\"name\" />\n                        <YAxis \n                          yAxisId=\"left\"\n                          orientation=\"left\"\n                          stroke=\"#8884d8\"\n                          tickFormatter={(value) => value.toLocaleString('th-TH')}\n                        />\n                        <YAxis \n                          yAxisId=\"right\"\n                          orientation=\"right\"\n                          stroke=\"#82ca9d\"\n                        />\n                        <Tooltip \n                          formatter={(value: number, name) => {\n                            if (name === \"มูลค่าการเทรด\") {\n                              return [`฿${value.toLocaleString('th-TH')}`, name];\n                            }\n                            return [value, name];\n                          }}\n                          labelFormatter={(label) => `วันที่: ${label}`}\n                        />\n                        <Legend />\n                        <Bar yAxisId=\"left\" dataKey=\"มูลค่าการเทรด\" fill=\"#8884d8\" radius={[4, 4, 0, 0]} barSize={30} />\n                        <Line yAxisId=\"right\" type=\"monotone\" dataKey=\"จำนวนการเทรด\" stroke=\"#82ca9d\" />\n                      </BarChart>\n                    </ResponsiveContainer>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardHeader className=\"pb-3\">\n                  <CardTitle>การกระจายตัวของสกุลเงินดิจิทัล</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-80\">\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <PieChart margin={{ top: 0, right: 0, left: 0, bottom: 0 }}>\n                        <Pie\n                          data={tradeDistributionData}\n                          cx=\"50%\"\n                          cy=\"50%\"\n                          labelLine={false}\n                          outerRadius={120}\n                          fill=\"#8884d8\"\n                          dataKey=\"value\"\n                          nameKey=\"name\"\n                          label={(entry) => entry.name}\n                        >\n                          {tradeDistributionData.map((entry, index) => (\n                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                          ))}\n                        </Pie>\n                        <Tooltip \n                          formatter={(value: number) => [`฿${value.toLocaleString('th-TH')}`, '']}\n                        />\n                        <Legend />\n                      </PieChart>\n                    </ResponsiveContainer>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </main>\n        </div>\n      </div>\n    </DesktopContainer>\n  );\n}","size_bytes":20470},"client/src/pages/admin-settings-page.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { DesktopContainer } from \"@/components/layout/desktop-container\";\nimport { AdminSidebar } from \"@/components/layout/admin-sidebar\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Bell,\n  Settings,\n  Save,\n  Lock,\n  CreditCard,\n  Percent,\n  Wrench,\n  Users,\n  MessageSquare,\n  Info,\n  AlertTriangle,\n  AlertCircle,\n  Shield,\n  Redo,\n  Database,\n  ServerCrash,\n  Loader2,\n  Edit,\n  Wallet,\n  Building,\n  RefreshCw\n} from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { BankAccount } from \"@shared/schema\";\n\n// กำหนดประเภทข้อมูลสำหรับบัญชีธนาคารและพร้อมเพย์\ninterface DepositAccounts {\n  bank: {\n    name: string;\n    accountNumber: string;\n    accountName: string;\n  };\n  promptpay: {\n    number: string;\n    taxId: string;\n    name: string;\n  };\n}\n\nexport default function AdminSettingsPage() {\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"general\");\n  const [maintenanceMode, setMaintenanceMode] = useState(false);\n  const [allowRegistrations, setAllowRegistrations] = useState(true);\n  const [allowTrading, setAllowTrading] = useState(true);\n  const [tradeFeePercentage, setTradeFeePercentage] = useState(0.2);\n  const [withdrawalFeePercentage, setWithdrawalFeePercentage] = useState(0.1);\n  const [minDepositAmount, setMinDepositAmount] = useState(100);\n  const [minWithdrawalAmount, setMinWithdrawalAmount] = useState(100);\n  \n  // สำหรับแก้ไขบัญชีธนาคาร\n  const [isEditBankAccountDialogOpen, setIsEditBankAccountDialogOpen] = useState(false);\n  const [selectedBankAccount, setSelectedBankAccount] = useState<BankAccount | null>(null);\n  const [editBankName, setEditBankName] = useState(\"\");\n  const [editAccountNumber, setEditAccountNumber] = useState(\"\");\n  const [editAccountName, setEditAccountName] = useState(\"\");\n  \n  // สำหรับแก้ไขบัญชีในระบบ (สำหรับการฝากเงิน)\n  const [isEditDepositAccountsDialogOpen, setIsEditDepositAccountsDialogOpen] = useState(false);\n  const [depositBankName, setDepositBankName] = useState(\"\");\n  const [depositBankAccountNumber, setDepositBankAccountNumber] = useState(\"\");\n  const [depositBankAccountName, setDepositBankAccountName] = useState(\"\");\n  const [depositPromptpayNumber, setDepositPromptpayNumber] = useState(\"\");\n  const [depositPromptpayTaxId, setDepositPromptpayTaxId] = useState(\"\");\n  const [depositPromptpayName, setDepositPromptpayName] = useState(\"\");\n  \n  // ดึงข้อมูลบัญชีธนาคารทั้งหมด\n  const { \n    data: bankAccounts,\n    isLoading: isLoadingBankAccounts,\n    error: bankAccountsError,\n    refetch: refetchBankAccounts\n  } = useQuery<(BankAccount & { user: { username: string, email: string } })[]>({\n    queryKey: [\"/api/admin/bank-accounts\"],\n    enabled: activeTab === \"bank-accounts\"\n  });\n  \n  // ดึงข้อมูลบัญชีธนาคารและพร้อมเพย์สำหรับการฝากเงิน\n  const {\n    data: depositAccounts,\n    isLoading: isLoadingDepositAccounts,\n    refetch: refetchDepositAccounts\n  } = useQuery<DepositAccounts>({\n    queryKey: ['/api/deposit-accounts'],\n    enabled: activeTab === \"system-accounts\", // ดึงข้อมูลเมื่ออยู่ที่แท็บ system-accounts เท่านั้น\n  });\n  \n  // ดึงข้อมูลการตั้งค่าทั้งหมด\n  const {\n    data: settings,\n    isLoading: isLoadingSettings\n  } = useQuery({\n    queryKey: ['/api/admin/settings'],\n    enabled: activeTab === \"general\" || activeTab === \"trading\", // ดึงข้อมูลเมื่ออยู่ที่แท็บ general หรือ trading\n  });\n\n  // ตั้งค่า state variables เมื่อได้ข้อมูลมาแล้ว\n  useEffect(() => {\n    if (settings) {\n      setAllowTrading(settings.allow_trading === 'true');\n      setAllowRegistrations(settings.allow_registrations === 'true');\n      setMaintenanceMode(settings.maintenance_mode === 'true');\n      setTradeFeePercentage(parseFloat(settings.trade_fee_percentage) || 1.5);\n      setWithdrawalFeePercentage(parseFloat(settings.withdrawal_fee_percentage) || 0.1);\n      setMinDepositAmount(parseInt(settings.min_deposit_amount) || 100);\n      setMinWithdrawalAmount(parseInt(settings.min_withdrawal_amount) || 100);\n    }\n  }, [settings]);\n  \n  // Mutation สำหรับแก้ไขบัญชีธนาคารและพร้อมเพย์สำหรับการฝากเงิน\n  const updateDepositAccountsMutation = useMutation({\n    mutationFn: async (data: {\n      bank: {\n        name: string;\n        accountNumber: string;\n        accountName: string;\n      };\n      promptpay: {\n        number: string;\n        taxId: string;\n        name: string;\n      };\n    }) => {\n      const res = await apiRequest(\"POST\", \"/api/admin/deposit-accounts\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      // ล้างแคชเพื่อดึงข้อมูลใหม่\n      queryClient.invalidateQueries({ queryKey: ['/api/deposit-accounts'] });\n      toast({\n        title: \"แก้ไขบัญชีสำหรับฝากเงินสำเร็จ\",\n        description: \"ข้อมูลบัญชีธนาคารและพร้อมเพย์สำหรับฝากเงินได้รับการแก้ไขเรียบร้อยแล้ว\",\n      });\n      setIsEditDepositAccountsDialogOpen(false);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"เกิดข้อผิดพลาด\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n  \n  // ฟังก์ชันสำหรับเปิดไดอะล็อกแก้ไขบัญชีสำหรับฝากเงิน\n  const handleOpenEditDepositAccountsDialog = () => {\n    if (depositAccounts) {\n      setDepositBankName(depositAccounts.bank.name || \"\");\n      setDepositBankAccountNumber(depositAccounts.bank.accountNumber || \"\");\n      setDepositBankAccountName(depositAccounts.bank.accountName || \"\");\n      setDepositPromptpayNumber(depositAccounts.promptpay.number || \"\");\n      setDepositPromptpayTaxId(depositAccounts.promptpay.taxId || \"\");\n      setDepositPromptpayName(depositAccounts.promptpay.name || \"\");\n    }\n    setIsEditDepositAccountsDialogOpen(true);\n  };\n  \n  // ฟังก์ชันสำหรับบันทึกการแก้ไขบัญชีสำหรับฝากเงิน\n  const handleUpdateDepositAccounts = () => {\n    if (!depositBankName || !depositBankAccountNumber || !depositBankAccountName || !depositPromptpayName) {\n      toast({\n        title: \"ข้อมูลไม่ครบถ้วน\",\n        description: \"กรุณาระบุข้อมูลบัญชีธนาคารและชื่อบัญชีพร้อมเพย์ให้ครบถ้วน\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    updateDepositAccountsMutation.mutate({\n      bank: {\n        name: depositBankName,\n        accountNumber: depositBankAccountNumber,\n        accountName: depositBankAccountName,\n      },\n      promptpay: {\n        number: depositPromptpayNumber,\n        taxId: depositPromptpayTaxId,\n        name: depositPromptpayName,\n      }\n    });\n  };\n  \n  // Mutation สำหรับแก้ไขบัญชีธนาคาร\n  const updateBankAccountMutation = useMutation({\n    mutationFn: async (data: { \n      id: number;\n      bankName: string; \n      accountNumber: string; \n      accountName: string;\n    }) => {\n      const res = await apiRequest(\"PATCH\", `/api/admin/bank-accounts/${data.id}`, {\n        bankName: data.bankName,\n        accountNumber: data.accountNumber,\n        accountName: data.accountName\n      });\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/bank-accounts\"] });\n      toast({\n        title: \"แก้ไขบัญชีธนาคารสำเร็จ\",\n        description: \"บัญชีธนาคารได้รับการแก้ไขเรียบร้อยแล้ว\",\n      });\n      setIsEditBankAccountDialogOpen(false);\n      setSelectedBankAccount(null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"เกิดข้อผิดพลาด\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n  \n  const handleOpenEditDialog = (bankAccount: BankAccount) => {\n    setSelectedBankAccount(bankAccount);\n    setEditBankName(bankAccount.bankName);\n    setEditAccountNumber(bankAccount.accountNumber);\n    setEditAccountName(bankAccount.accountName);\n    setIsEditBankAccountDialogOpen(true);\n  };\n  \n  const handleUpdateBankAccount = () => {\n    if (!selectedBankAccount) return;\n    \n    if (!editBankName || !editAccountNumber || !editAccountName) {\n      toast({\n        title: \"ข้อมูลไม่ครบถ้วน\",\n        description: \"กรุณาระบุชื่อธนาคาร, เลขที่บัญชี และชื่อบัญชี\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    // ตรวจสอบว่าเลขที่บัญชีเป็นตัวเลขเท่านั้น\n    if (!/^\\d+$/.test(editAccountNumber)) {\n      toast({\n        title: \"เลขที่บัญชีไม่ถูกต้อง\",\n        description: \"เลขที่บัญชีต้องเป็นตัวเลขเท่านั้น\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    updateBankAccountMutation.mutate({\n      id: selectedBankAccount.id,\n      bankName: editBankName,\n      accountNumber: editAccountNumber,\n      accountName: editAccountName\n    });\n  };\n  \n  // Mutation สำหรับบันทึกการตั้งค่า\n  const saveSettingsMutation = useMutation({\n    mutationFn: async (settingsData: {\n      trade_fee_percentage: number;\n      withdrawal_fee_percentage: number;\n      min_deposit_amount: number;\n      min_withdrawal_amount: number;\n      allow_trading: boolean;\n      allow_registrations: boolean;\n      maintenance_mode: boolean;\n    }) => {\n      const res = await apiRequest(\"PUT\", \"/api/admin/settings\", settingsData);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/settings'] });\n      toast({\n        title: \"การตั้งค่าถูกบันทึกแล้ว\",\n        description: \"การเปลี่ยนแปลงการตั้งค่าได้รับการบันทึกเรียบร้อยแล้ว\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"เกิดข้อผิดพลาด\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSaveSettings = () => {\n    saveSettingsMutation.mutate({\n      trade_fee_percentage: tradeFeePercentage,\n      withdrawal_fee_percentage: withdrawalFeePercentage,\n      min_deposit_amount: minDepositAmount,\n      min_withdrawal_amount: minWithdrawalAmount,\n      allow_trading: allowTrading,\n      allow_registrations: allowRegistrations,\n      maintenance_mode: maintenanceMode,\n    });\n  };\n  \n  const handleResetSettings = () => {\n    // Reset settings to defaults\n    setMaintenanceMode(false);\n    setAllowRegistrations(true);\n    setAllowTrading(true);\n    setTradeFeePercentage(0.2);\n    setWithdrawalFeePercentage(0.1);\n    setMinDepositAmount(100);\n    setMinWithdrawalAmount(100);\n    \n    toast({\n      title: \"ตั้งค่าใหม่\",\n      description: \"การตั้งค่าได้ถูกรีเซ็ตกลับเป็นค่าเริ่มต้น\",\n    });\n  };\n  \n  const handleBackupDatabase = () => {\n    toast({\n      title: \"สำรองข้อมูลสำเร็จ\",\n      description: \"ระบบได้ทำการสำรองข้อมูลเรียบร้อยแล้ว\",\n    });\n  };\n\n  return (\n    <DesktopContainer>\n      <div className=\"flex h-full\">\n        <AdminSidebar />\n        \n        <div className=\"flex-1 flex flex-col\">\n          <div className=\"border-b\">\n            <div className=\"flex h-16 items-center justify-between px-6\">\n              <h2 className=\"text-xl font-bold\">แดชบอร์ดผู้ดูแลระบบ</h2>\n              <div className=\"flex items-center gap-4\">\n                <ThemeToggle />\n              </div>\n            </div>\n          </div>\n          \n          <main className=\"flex-1 overflow-y-auto p-6 bg-background\">\n            {/* Page Header with Action Buttons */}\n            <div className=\"flex justify-between items-center mb-6\">\n              <div>\n                <h2 className=\"text-xl font-bold\">จัดการการตั้งค่าระบบ</h2>\n                <p className=\"text-muted-foreground\">กำหนดค่าและปรับแต่งแพลตฟอร์มตามความต้องการ</p>\n              </div>\n              \n              <div className=\"flex space-x-3\">\n                <Button variant=\"outline\" className=\"h-9\" onClick={handleResetSettings}>\n                  <Redo className=\"h-4 w-4 mr-2\" />\n                  รีเซ็ตค่าเริ่มต้น\n                </Button>\n                <Button className=\"h-9\" onClick={handleSaveSettings}>\n                  <Save className=\"h-4 w-4 mr-2\" />\n                  บันทึกการตั้งค่า\n                </Button>\n              </div>\n            </div>\n            \n            {/* Settings Tabs and Content */}\n            <div className=\"flex gap-6\">\n              {/* Settings Tabs */}\n              <div className=\"w-64\">\n                <Card>\n                  <CardContent className=\"p-0\">\n                    <div className=\"space-y-1 py-2\">\n                      <Button\n                        variant={activeTab === \"general\" ? \"secondary\" : \"ghost\"}\n                        className=\"w-full justify-start\"\n                        onClick={() => setActiveTab(\"general\")}\n                      >\n                        <Settings className=\"h-5 w-5 mr-3\" />\n                        ตั้งค่าทั่วไป\n                      </Button>\n                      <Button\n                        variant={activeTab === \"trading\" ? \"secondary\" : \"ghost\"}\n                        className=\"w-full justify-start\"\n                        onClick={() => setActiveTab(\"trading\")}\n                      >\n                        <CreditCard className=\"h-5 w-5 mr-3\" />\n                        การเทรดและค่าธรรมเนียม\n                      </Button>\n                      <Button\n                        variant={activeTab === \"security\" ? \"secondary\" : \"ghost\"}\n                        className=\"w-full justify-start\"\n                        onClick={() => setActiveTab(\"security\")}\n                      >\n                        <Lock className=\"h-5 w-5 mr-3\" />\n                        ความปลอดภัย\n                      </Button>\n                      <Button\n                        variant={activeTab === \"notifications\" ? \"secondary\" : \"ghost\"}\n                        className=\"w-full justify-start\"\n                        onClick={() => setActiveTab(\"notifications\")}\n                      >\n                        <MessageSquare className=\"h-5 w-5 mr-3\" />\n                        การแจ้งเตือน\n                      </Button>\n\n                      <Button\n                        variant={activeTab === \"system-accounts\" ? \"secondary\" : \"ghost\"}\n                        className=\"w-full justify-start\"\n                        onClick={() => setActiveTab(\"system-accounts\")}\n                      >\n                        <Wallet className=\"h-5 w-5 mr-3\" />\n                        บัญชีธนาคารระบบ\n                      </Button>\n                      <Button\n                        variant={activeTab === \"backup\" ? \"secondary\" : \"ghost\"}\n                        className=\"w-full justify-start\"\n                        onClick={() => setActiveTab(\"backup\")}\n                      >\n                        <Database className=\"h-5 w-5 mr-3\" />\n                        สำรองและกู้คืนข้อมูล\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n              \n              {/* Settings Content */}\n              <div className=\"flex-1\">\n                <Card className=\"mb-6\">\n\n                  \n                  {activeTab === \"system-accounts\" && (\n                    <>\n                      <CardHeader>\n                        <CardTitle>จัดการบัญชีธนาคารระบบ</CardTitle>\n                        <CardDescription>แก้ไขข้อมูลบัญชีธนาคารและพร้อมเพย์สำหรับการฝากเงิน</CardDescription>\n                      </CardHeader>\n                      <CardContent className=\"space-y-6\">\n                        {isLoadingDepositAccounts ? (\n                          <div className=\"flex justify-center py-8\">\n                            <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n                          </div>\n                        ) : !depositAccounts ? (\n                          <div className=\"text-center text-red-500 py-8\">\n                            <p>เกิดข้อผิดพลาดในการโหลดข้อมูล กรุณาลองใหม่อีกครั้ง</p>\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\" \n                              className=\"mt-2\"\n                              onClick={() => refetchDepositAccounts()}\n                            >\n                              <RefreshCw className=\"h-4 w-4 mr-2\" />\n                              โหลดข้อมูลใหม่\n                            </Button>\n                          </div>\n                        ) : (\n                          <div className=\"space-y-8\">\n                            {/* บัญชีธนาคาร */}\n                            <div className=\"bg-card border rounded-lg overflow-hidden\">\n                              <div className=\"bg-muted/50 px-4 py-3 border-b\">\n                                <h3 className=\"text-lg font-semibold\">บัญชีธนาคาร</h3>\n                                <p className=\"text-sm text-muted-foreground\">ข้อมูลบัญชีธนาคารที่แสดงในหน้าฝากเงิน</p>\n                              </div>\n                              <div className=\"p-4\">\n                                <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2\">\n                                  <div>\n                                    <Label className=\"text-muted-foreground\">ธนาคาร</Label>\n                                    <div className=\"font-medium mt-1\">{depositAccounts.bank.name || \"-\"}</div>\n                                  </div>\n                                  <div>\n                                    <Label className=\"text-muted-foreground\">เลขที่บัญชี</Label>\n                                    <div className=\"font-medium mt-1\">{depositAccounts.bank.accountNumber || \"-\"}</div>\n                                  </div>\n                                  <div className=\"sm:col-span-2\">\n                                    <Label className=\"text-muted-foreground\">ชื่อบัญชี</Label>\n                                    <div className=\"font-medium mt-1\">{depositAccounts.bank.accountName || \"-\"}</div>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                            \n                            {/* พร้อมเพย์ */}\n                            <div className=\"bg-card border rounded-lg overflow-hidden\">\n                              <div className=\"bg-muted/50 px-4 py-3 border-b\">\n                                <h3 className=\"text-lg font-semibold\">พร้อมเพย์</h3>\n                                <p className=\"text-sm text-muted-foreground\">ข้อมูลพร้อมเพย์ที่แสดงในหน้าฝากเงิน</p>\n                              </div>\n                              <div className=\"p-4\">\n                                <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2\">\n                                  <div>\n                                    <Label className=\"text-muted-foreground\">เบอร์โทรศัพท์</Label>\n                                    <div className=\"font-medium mt-1\">{depositAccounts.promptpay.number || \"-\"}</div>\n                                  </div>\n                                  <div>\n                                    <Label className=\"text-muted-foreground\">เลขประจำตัวผู้เสียภาษี</Label>\n                                    <div className=\"font-medium mt-1\">{depositAccounts.promptpay.taxId || \"-\"}</div>\n                                  </div>\n                                  <div className=\"sm:col-span-2\">\n                                    <Label className=\"text-muted-foreground\">ชื่อบัญชี</Label>\n                                    <div className=\"font-medium mt-1\">{depositAccounts.promptpay.name || \"-\"}</div>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                            \n                            <div className=\"flex flex-col sm:flex-row gap-4 items-stretch\">\n                              <Button onClick={handleOpenEditDepositAccountsDialog} className=\"w-full\">\n                                <Edit className=\"h-4 w-4 mr-2\" />\n                                แก้ไขข้อมูลบัญชีธนาคารและพร้อมเพย์\n                              </Button>\n                            </div>\n                          </div>\n                        )}\n                        \n                        <div className=\"bg-muted/30 rounded-lg p-4 text-sm\">\n                          <p>\n                            <span className=\"font-medium\">หมายเหตุ:</span> ข้อมูลบัญชีธนาคารและพร้อมเพย์นี้จะแสดงในหน้าฝากเงินสำหรับผู้ใช้ทั่วไป\n                            ควรตรวจสอบความถูกต้องของข้อมูลอย่างละเอียดเพื่อป้องกันการโอนเงินผิดบัญชี\n                          </p>\n                        </div>\n                      </CardContent>\n                    </>\n                  )}\n                  \n                  {activeTab === \"general\" && (\n                    <>\n                      <CardHeader>\n                        <CardTitle>ตั้งค่าทั่วไป</CardTitle>\n                        <CardDescription>ตั้งค่าการทำงานพื้นฐานของระบบ</CardDescription>\n                      </CardHeader>\n                      <CardContent className=\"space-y-6\">\n                        <div>\n                          <div className=\"space-y-4\">\n                            <div className=\"flex items-center justify-between space-x-2\">\n                              <div className=\"flex flex-col space-y-1\">\n                                <Label htmlFor=\"maintenance-mode\" className=\"font-medium\">โหมดปิดปรับปรุง</Label>\n                                <p className=\"text-sm text-muted-foreground\">ปิดระบบชั่วคราวเพื่อปรับปรุง</p>\n                              </div>\n                              <Switch\n                                id=\"maintenance-mode\"\n                                checked={maintenanceMode}\n                                onCheckedChange={setMaintenanceMode}\n                              />\n                            </div>\n                            \n                            {maintenanceMode && (\n                              <div className=\"space-y-2\">\n                                <Label htmlFor=\"maintenance-message\">ข้อความแจ้งระหว่างปิดปรับปรุง</Label>\n                                <Textarea \n                                  id=\"maintenance-message\" \n                                  placeholder=\"ระบบกำลังปิดปรับปรุงชั่วคราว กรุณากลับมาใหม่ในเร็วๆ นี้\"\n                                  className=\"min-h-24\"\n                                />\n                              </div>\n                            )}\n                            \n                            <Separator />\n                            \n                            <div className=\"flex items-center justify-between space-x-2\">\n                              <div className=\"flex flex-col space-y-1\">\n                                <Label htmlFor=\"new-registrations\" className=\"font-medium\">การสมัครสมาชิกใหม่</Label>\n                                <p className=\"text-sm text-muted-foreground\">อนุญาตให้ผู้ใช้ใหม่สมัครสมาชิก</p>\n                              </div>\n                              <Switch\n                                id=\"new-registrations\"\n                                checked={allowRegistrations}\n                                onCheckedChange={setAllowRegistrations}\n                              />\n                            </div>\n                            \n                            <div className=\"flex items-center justify-between space-x-2\">\n                              <div className=\"flex flex-col space-y-1\">\n                                <Label htmlFor=\"site-name\" className=\"font-medium\">ชื่อเว็บไซต์</Label>\n                                <p className=\"text-sm text-muted-foreground\">ชื่อที่แสดงในเบราว์เซอร์และระบบ</p>\n                              </div>\n                              <Input id=\"site-name\" defaultValue=\"เอเซีย พลัส\" className=\"w-60\" />\n                            </div>\n                            \n                            <div className=\"flex items-center justify-between space-x-2\">\n                              <div className=\"flex flex-col space-y-1\">\n                                <Label htmlFor=\"site-logo\" className=\"font-medium\">โลโก้</Label>\n                                <p className=\"text-sm text-muted-foreground\">เลือกไฟล์โลโก้</p>\n                              </div>\n                              <div className=\"flex items-center space-x-2\">\n                                <div className=\"h-10 w-10 rounded-full bg-primary flex items-center justify-center text-primary-foreground font-bold text-xl\">\n                                  B\n                                </div>\n                                <Button variant=\"outline\" size=\"sm\">อัปโหลด</Button>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </>\n                  )}\n                  \n                  {activeTab === \"trading\" && (\n                    <>\n                      <CardHeader>\n                        <CardTitle>การเทรดและค่าธรรมเนียม</CardTitle>\n                        <CardDescription>กำหนดค่าการเทรดและค่าธรรมเนียมต่างๆ</CardDescription>\n                      </CardHeader>\n                      <CardContent className=\"space-y-6\">\n                        <div>\n                          <div className=\"flex items-center justify-between space-x-2\">\n                            <div className=\"flex flex-col space-y-1\">\n                              <Label htmlFor=\"allow-trading\" className=\"font-medium\">อนุญาตให้เทรด</Label>\n                              <p className=\"text-sm text-muted-foreground\">เปิด/ปิดการเทรดทั้งระบบ</p>\n                            </div>\n                            <Switch\n                              id=\"allow-trading\"\n                              checked={allowTrading}\n                              onCheckedChange={setAllowTrading}\n                            />\n                          </div>\n                          \n                          <Separator className=\"my-6\" />\n                          \n                          <div className=\"space-y-4\">\n                            <h3 className=\"text-lg font-medium\">ค่าธรรมเนียม</h3>\n                            \n                            <div className=\"space-y-2\">\n                              <div className=\"flex items-center justify-between\">\n                                <Label htmlFor=\"trade-fee\" className=\"font-medium\">ค่าธรรมเนียมการเทรด (%)</Label>\n                                <span className=\"text-sm font-mono bg-muted px-2 py-1 rounded\">\n                                  {tradeFeePercentage}%\n                                </span>\n                              </div>\n                              <Slider\n                                id=\"trade-fee\"\n                                value={[tradeFeePercentage]}\n                                min={0}\n                                max={5}\n                                step={0.1}\n                                onValueChange={(value) => setTradeFeePercentage(value[0])}\n                              />\n                              <p className=\"text-xs text-muted-foreground\">\n                                ค่าธรรมเนียมที่เรียกเก็บจากทุกธุรกรรมการเทรด คิดเป็นเปอร์เซ็นต์ของมูลค่าการเทรด\n                              </p>\n                            </div>\n                            \n                            <div className=\"space-y-2\">\n                              <div className=\"flex items-center justify-between\">\n                                <Label htmlFor=\"withdrawal-fee\" className=\"font-medium\">ค่าธรรมเนียมการถอน (%)</Label>\n                                <span className=\"text-sm font-mono bg-muted px-2 py-1 rounded\">\n                                  {withdrawalFeePercentage}%\n                                </span>\n                              </div>\n                              <Slider\n                                id=\"withdrawal-fee\"\n                                value={[withdrawalFeePercentage]}\n                                min={0}\n                                max={3}\n                                step={0.1}\n                                onValueChange={(value) => setWithdrawalFeePercentage(value[0])}\n                              />\n                              <p className=\"text-xs text-muted-foreground\">\n                                ค่าธรรมเนียมที่เรียกเก็บเมื่อผู้ใช้ถอนเงิน คิดเป็นเปอร์เซ็นต์ของจำนวนเงินที่ถอน\n                              </p>\n                            </div>\n                          </div>\n                          \n                          <Separator className=\"my-6\" />\n                          \n                          <div className=\"space-y-4\">\n                            <h3 className=\"text-lg font-medium\">ข้อจำกัดการทำธุรกรรม</h3>\n                            \n                            <div className=\"space-y-2\">\n                              <Label htmlFor=\"min-deposit\">จำนวนเงินฝากขั้นต่ำ (บาท)</Label>\n                              <Input\n                                id=\"min-deposit\"\n                                type=\"number\"\n                                value={minDepositAmount}\n                                onChange={(e) => setMinDepositAmount(Number(e.target.value))}\n                                min={0}\n                              />\n                            </div>\n                            \n                            <div className=\"space-y-2\">\n                              <Label htmlFor=\"min-withdrawal\">จำนวนเงินถอนขั้นต่ำ (บาท)</Label>\n                              <Input\n                                id=\"min-withdrawal\"\n                                type=\"number\"\n                                value={minWithdrawalAmount}\n                                onChange={(e) => setMinWithdrawalAmount(Number(e.target.value))}\n                                min={0}\n                              />\n                            </div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </>\n                  )}\n                  \n                  {activeTab === \"security\" && (\n                    <>\n                      <CardHeader>\n                        <CardTitle>ความปลอดภัย</CardTitle>\n                        <CardDescription>ตั้งค่าด้านความปลอดภัยของระบบ</CardDescription>\n                      </CardHeader>\n                      <CardContent className=\"space-y-6\">\n                        <div className=\"space-y-4\">\n                          <div className=\"flex items-center justify-between space-x-2\">\n                            <div className=\"flex flex-col space-y-1\">\n                              <Label htmlFor=\"two-factor-auth\" className=\"font-medium\">\n                                บังคับใช้การยืนยันตัวตนสองชั้น\n                              </Label>\n                              <p className=\"text-sm text-muted-foreground\">\n                                ผู้ใช้ทุกคนต้องตั้งค่าการยืนยันตัวตนสองชั้น\n                              </p>\n                            </div>\n                            <Switch id=\"two-factor-auth\" />\n                          </div>\n                          \n                          <div className=\"flex items-center justify-between space-x-2\">\n                            <div className=\"flex flex-col space-y-1\">\n                              <Label htmlFor=\"session-timeout\" className=\"font-medium\">\n                                หมดเวลาเซสชัน (นาที)\n                              </Label>\n                              <p className=\"text-sm text-muted-foreground\">\n                                ระยะเวลาที่ผู้ใช้ไม่มีการใช้งานก่อนจะถูกออกจากระบบอัตโนมัติ\n                              </p>\n                            </div>\n                            <Input id=\"session-timeout\" className=\"w-20\" type=\"number\" defaultValue={30} min={1} />\n                          </div>\n                          \n                          <div className=\"flex items-center justify-between space-x-2\">\n                            <div className=\"flex flex-col space-y-1\">\n                              <Label htmlFor=\"max-login-attempts\" className=\"font-medium\">\n                                จำนวนครั้งที่ล็อกอินล้มเหลวสูงสุด\n                              </Label>\n                              <p className=\"text-sm text-muted-foreground\">\n                                จำนวนครั้งที่ผู้ใช้สามารถกรอกรหัสผ่านผิดก่อนถูกล็อคบัญชี\n                              </p>\n                            </div>\n                            <Input id=\"max-login-attempts\" className=\"w-20\" type=\"number\" defaultValue={5} min={1} />\n                          </div>\n                          \n                          <div className=\"flex items-center justify-between space-x-2\">\n                            <div className=\"flex flex-col space-y-1\">\n                              <Label htmlFor=\"password-policy\" className=\"font-medium\">\n                                นโยบายรหัสผ่าน\n                              </Label>\n                              <p className=\"text-sm text-muted-foreground\">\n                                ข้อกำหนดความซับซ้อนของรหัสผ่าน\n                              </p>\n                            </div>\n                            <Select defaultValue=\"medium\">\n                              <SelectTrigger className=\"w-40\">\n                                <SelectValue placeholder=\"เลือกระดับ\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"low\">ง่าย</SelectItem>\n                                <SelectItem value=\"medium\">ปานกลาง</SelectItem>\n                                <SelectItem value=\"high\">เข้มงวด</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </>\n                  )}\n                  \n                  {activeTab === \"notifications\" && (\n                    <>\n                      <CardHeader>\n                        <CardTitle>การแจ้งเตือน</CardTitle>\n                        <CardDescription>ตั้งค่าการแจ้งเตือนและการสื่อสารกับผู้ใช้</CardDescription>\n                      </CardHeader>\n                      <CardContent className=\"space-y-6\">\n                        <div className=\"space-y-4\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Checkbox id=\"email-deposit\" defaultChecked />\n                            <div>\n                              <Label\n                                htmlFor=\"email-deposit\"\n                                className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                              >\n                                อีเมลแจ้งเตือนเมื่อมีการฝากเงิน\n                              </Label>\n                              <p className=\"text-sm text-muted-foreground\">\n                                ส่งอีเมลถึงผู้ใช้เมื่อมีการฝากเงินเข้าบัญชี\n                              </p>\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex items-center space-x-2\">\n                            <Checkbox id=\"email-withdrawal\" defaultChecked />\n                            <div>\n                              <Label\n                                htmlFor=\"email-withdrawal\"\n                                className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                              >\n                                อีเมลแจ้งเตือนเมื่อมีการถอนเงิน\n                              </Label>\n                              <p className=\"text-sm text-muted-foreground\">\n                                ส่งอีเมลถึงผู้ใช้เมื่อมีการถอนเงินจากบัญชี\n                              </p>\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex items-center space-x-2\">\n                            <Checkbox id=\"email-trade\" defaultChecked />\n                            <div>\n                              <Label\n                                htmlFor=\"email-trade\"\n                                className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                              >\n                                อีเมลแจ้งเตือนเมื่อมีการเทรดเสร็จสิ้น\n                              </Label>\n                              <p className=\"text-sm text-muted-foreground\">\n                                ส่งอีเมลถึงผู้ใช้เมื่อการเทรดเสร็จสิ้น\n                              </p>\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex items-center space-x-2\">\n                            <Checkbox id=\"email-news\" />\n                            <div>\n                              <Label\n                                htmlFor=\"email-news\"\n                                className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                              >\n                                อีเมลข่าวสารและโปรโมชั่น\n                              </Label>\n                              <p className=\"text-sm text-muted-foreground\">\n                                ส่งอีเมลข่าวสารและโปรโมชั่นถึงผู้ใช้\n                              </p>\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex items-center space-x-2\">\n                            <Checkbox id=\"push-notifications\" defaultChecked />\n                            <div>\n                              <Label\n                                htmlFor=\"push-notifications\"\n                                className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                              >\n                                การแจ้งเตือนบนเว็บไซต์\n                              </Label>\n                              <p className=\"text-sm text-muted-foreground\">\n                                แสดงการแจ้งเตือนบนเว็บไซต์เมื่อมีเหตุการณ์สำคัญ\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </>\n                  )}\n                  \n                  {activeTab === \"backup\" && (\n                    <>\n                      <CardHeader>\n                        <CardTitle>สำรองและกู้คืนข้อมูล</CardTitle>\n                        <CardDescription>จัดการการสำรองข้อมูลและการกู้คืน</CardDescription>\n                      </CardHeader>\n                      <CardContent className=\"space-y-6\">\n                        <Alert>\n                          <Info className=\"h-4 w-4\" />\n                          <AlertTitle>คำแนะนำ</AlertTitle>\n                          <AlertDescription>\n                            การสำรองข้อมูลเป็นประจำช่วยป้องกันการสูญเสียข้อมูลในกรณีเกิดปัญหา\n                          </AlertDescription>\n                        </Alert>\n                        \n                        <div className=\"space-y-2\">\n                          <Label className=\"font-medium\">สำรองข้อมูลอัตโนมัติ</Label>\n                          <p className=\"text-sm text-muted-foreground\">ตั้งค่าการสำรองข้อมูลอัตโนมัติ</p>\n                          \n                          <div className=\"flex items-center justify-between mt-2\">\n                            <Label htmlFor=\"auto-backup\">สำรองข้อมูลอัตโนมัติ</Label>\n                            <Switch id=\"auto-backup\" defaultChecked />\n                          </div>\n                          \n                          <div className=\"mt-2\">\n                            <Label htmlFor=\"backup-frequency\">ความถี่ในการสำรองข้อมูล</Label>\n                            <Select defaultValue=\"daily\">\n                              <SelectTrigger className=\"w-full mt-1\">\n                                <SelectValue placeholder=\"เลือกความถี่\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"hourly\">ทุกชั่วโมง</SelectItem>\n                                <SelectItem value=\"daily\">ทุกวัน</SelectItem>\n                                <SelectItem value=\"weekly\">ทุกสัปดาห์</SelectItem>\n                                <SelectItem value=\"monthly\">ทุกเดือน</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                        </div>\n                        \n                        <Separator />\n                        \n                        <div className=\"space-y-2\">\n                          <Label className=\"font-medium\">สำรองข้อมูลด้วยตนเอง</Label>\n                          <p className=\"text-sm text-muted-foreground\">สร้างและดาวน์โหลดไฟล์สำรองข้อมูลทันที</p>\n                          \n                          <div className=\"mt-2\">\n                            <Button onClick={handleBackupDatabase}>\n                              <Database className=\"h-4 w-4 mr-2\" />\n                              สร้างไฟล์สำรองข้อมูลใหม่\n                            </Button>\n                          </div>\n                        </div>\n                        \n                        <Separator />\n                        \n                        <div className=\"space-y-2\">\n                          <Label className=\"font-medium\">กู้คืนข้อมูล</Label>\n                          <p className=\"text-sm text-muted-foreground\">อัปโหลดไฟล์สำรองข้อมูลเพื่อกู้คืน</p>\n                          \n                          <div className=\"flex flex-col space-y-2 mt-2\">\n                            <div className=\"flex items-center space-x-2\">\n                              <Input type=\"file\" id=\"restore-file\" />\n                              <Button variant=\"secondary\">\n                                อัปโหลด\n                              </Button>\n                            </div>\n                            \n                            <Alert variant=\"destructive\">\n                              <AlertCircle className=\"h-4 w-4\" />\n                              <AlertTitle>คำเตือน</AlertTitle>\n                              <AlertDescription>\n                                การกู้คืนข้อมูลจะแทนที่ข้อมูลปัจจุบันทั้งหมด กรุณาสำรองข้อมูลก่อนดำเนินการ\n                              </AlertDescription>\n                            </Alert>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </>\n                  )}\n                </Card>\n                \n                <div className=\"flex justify-end\">\n                  <Button className=\"w-[150px]\" onClick={handleSaveSettings}>\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    บันทึกการตั้งค่า\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </main>\n        </div>\n      </div>\n      \n      {/* ไดอะล็อกแก้ไขบัญชีธนาคาร */}\n      <Dialog open={isEditBankAccountDialogOpen} onOpenChange={setIsEditBankAccountDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>แก้ไขบัญชีธนาคาร</DialogTitle>\n            <DialogDescription>\n              แก้ไขข้อมูลบัญชีธนาคารของผู้ใช้\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4 py-2\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"bank-name\">ธนาคาร</Label>\n              <select \n                id=\"bank-name\"\n                className=\"w-full p-2 border rounded-md\"\n                value={editBankName}\n                onChange={(e) => setEditBankName(e.target.value)}\n              >\n                <option value=\"กสิกรไทย\">กสิกรไทย</option>\n                <option value=\"ไทยพาณิชย์\">ไทยพาณิชย์</option>\n                <option value=\"กรุงเทพ\">กรุงเทพ</option>\n                <option value=\"กรุงไทย\">กรุงไทย</option>\n                <option value=\"ทหารไทยธนชาต\">ทหารไทยธนชาต</option>\n                <option value=\"กรุงศรีอยุธยา\">กรุงศรีอยุธยา</option>\n              </select>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"account-number\">เลขที่บัญชี</Label>\n              <Input\n                id=\"account-number\"\n                type=\"text\"\n                value={editAccountNumber}\n                onChange={(e) => setEditAccountNumber(e.target.value.replace(/[^0-9]/g, ''))}\n                placeholder=\"เลขที่บัญชี 10 หลัก\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"account-name\">ชื่อบัญชี</Label>\n              <Input\n                id=\"account-name\"\n                type=\"text\"\n                value={editAccountName}\n                onChange={(e) => setEditAccountName(e.target.value)}\n                placeholder=\"ชื่อเจ้าของบัญชี\"\n              />\n            </div>\n          </div>\n          \n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsEditBankAccountDialogOpen(false)}>\n              ยกเลิก\n            </Button>\n            <Button\n              onClick={handleUpdateBankAccount}\n              disabled={updateBankAccountMutation.isPending}\n            >\n              {updateBankAccountMutation.isPending ? (\n                <><Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> กำลังบันทึก</>\n              ) : (\n                \"บันทึกการเปลี่ยนแปลง\"\n              )}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n      \n      {/* ไดอะล็อกแก้ไขข้อมูลบัญชีธนาคารและพร้อมเพย์สำหรับฝากเงิน */}\n      <Dialog open={isEditDepositAccountsDialogOpen} onOpenChange={setIsEditDepositAccountsDialogOpen}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          <DialogHeader>\n            <DialogTitle>แก้ไขข้อมูลบัญชีธนาคารระบบ</DialogTitle>\n            <DialogDescription>\n              แก้ไขข้อมูลบัญชีธนาคารและพร้อมเพย์สำหรับการฝากเงิน\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-6\">\n            {/* บัญชีธนาคาร */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">บัญชีธนาคาร</h3>\n              \n              <div className=\"space-y-4\">\n                <div className=\"grid w-full items-center gap-2\">\n                  <Label htmlFor=\"deposit-bank-name\">ธนาคาร</Label>\n                  <Input\n                    id=\"deposit-bank-name\"\n                    placeholder=\"ชื่อธนาคาร เช่น กสิกรไทย\"\n                    value={depositBankName}\n                    onChange={(e) => setDepositBankName(e.target.value)}\n                  />\n                </div>\n                \n                <div className=\"grid w-full items-center gap-2\">\n                  <Label htmlFor=\"deposit-bank-account-number\">เลขที่บัญชี</Label>\n                  <Input\n                    id=\"deposit-bank-account-number\"\n                    placeholder=\"เลขที่บัญชี\"\n                    value={depositBankAccountNumber}\n                    onChange={(e) => setDepositBankAccountNumber(e.target.value)}\n                  />\n                </div>\n                \n                <div className=\"grid w-full items-center gap-2\">\n                  <Label htmlFor=\"deposit-bank-account-name\">ชื่อบัญชี</Label>\n                  <Input\n                    id=\"deposit-bank-account-name\"\n                    placeholder=\"ชื่อบัญชี\"\n                    value={depositBankAccountName}\n                    onChange={(e) => setDepositBankAccountName(e.target.value)}\n                  />\n                </div>\n              </div>\n            </div>\n            \n            {/* พร้อมเพย์ */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">พร้อมเพย์</h3>\n              \n              <div className=\"space-y-4\">\n                <div className=\"grid w-full items-center gap-2\">\n                  <Label htmlFor=\"deposit-promptpay-number\">เบอร์โทรศัพท์</Label>\n                  <Input\n                    id=\"deposit-promptpay-number\"\n                    placeholder=\"เบอร์โทรศัพท์ เช่น 08xxxxxxxx\"\n                    value={depositPromptpayNumber}\n                    onChange={(e) => setDepositPromptpayNumber(e.target.value)}\n                  />\n                </div>\n                \n                <div className=\"grid w-full items-center gap-2\">\n                  <Label htmlFor=\"deposit-promptpay-tax-id\">เลขประจำตัวผู้เสียภาษี</Label>\n                  <Input\n                    id=\"deposit-promptpay-tax-id\"\n                    placeholder=\"เลขประจำตัวผู้เสียภาษี\"\n                    value={depositPromptpayTaxId}\n                    onChange={(e) => setDepositPromptpayTaxId(e.target.value)}\n                  />\n                </div>\n                \n                <div className=\"grid w-full items-center gap-2\">\n                  <Label htmlFor=\"deposit-promptpay-name\">ชื่อบัญชี</Label>\n                  <Input\n                    id=\"deposit-promptpay-name\"\n                    placeholder=\"ชื่อบัญชีพร้อมเพย์\"\n                    value={depositPromptpayName}\n                    onChange={(e) => setDepositPromptpayName(e.target.value)}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => setIsEditDepositAccountsDialogOpen(false)}\n            >\n              ยกเลิก\n            </Button>\n            <Button \n              onClick={handleUpdateDepositAccounts}\n              disabled={updateDepositAccountsMutation.isPending}\n            >\n              {updateDepositAccountsMutation.isPending && (\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              )}\n              บันทึกข้อมูล\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </DesktopContainer>\n  );\n}","size_bytes":60036},"client/src/pages/admin-trades-page.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { AdminLayout } from \"@/components/layout/admin-layout\";\nimport { Trade, User } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format } from \"date-fns\";\nimport { th } from \"date-fns/locale\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { \n  DropdownMenu, \n  DropdownMenuContent, \n  DropdownMenuItem, \n  DropdownMenuTrigger \n} from \"@/components/ui/dropdown-menu\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ArrowUpDown, ChevronDown, Search, MoreHorizontal, Trophy, X, Check, RefreshCcw } from \"lucide-react\";\n\n// ฟังก์ชันช่วยจัดรูปแบบวันที่\nconst formatDate = (date: Date | null) => {\n  if (!date) return \"-\";\n  return format(new Date(date), \"dd MMM yyyy HH:mm\", { locale: th });\n};\n\n// ฟังก์ชันช่วยจัดรูปแบบจำนวนเงิน\nconst formatCurrency = (amount: number) => {\n  return new Intl.NumberFormat(\"th-TH\", {\n    style: \"currency\",\n    currency: \"THB\",\n    minimumFractionDigits: 2,\n  }).format(amount);\n};\n\nexport default function AdminTradesPage() {\n  const { toast } = useToast();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [selectedTrade, setSelectedTrade] = useState<Trade | null>(null);\n  const [openPredeterminedDialog, setOpenPredeterminedDialog] = useState(false);\n  const [predeterminedResult, setPredeterminedResult] = useState<string | null>(null);\n\n  // ดึงข้อมูลการเทรด\n  const { data: trades, isLoading } = useQuery<Trade[]>({\n    queryKey: [\"/api/admin/trades\"],\n  });\n\n  // ดึงข้อมูลผู้ใช้ (เพื่อแสดงชื่อผู้ใช้แทน ID)\n  const { data: users } = useQuery<User[]>({\n    queryKey: [\"/api/admin/users\"],\n  });\n\n  // Mutation สำหรับอัพเดทผลลัพธ์ล่วงหน้าของการเทรด\n  const predeterminedMutation = useMutation({\n    mutationFn: async ({ tradeId, result }: { tradeId: number; result: string | null }) => {\n      const res = await apiRequest(\n        \"PATCH\",\n        `/api/admin/trades/${tradeId}/predetermined`,\n        { predeterminedResult: result }\n      );\n      return await res.json();\n    },\n    onSuccess: () => {\n      // อัพเดทข้อมูลในแคช\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/trades\"] });\n      setOpenPredeterminedDialog(false);\n      toast({\n        title: \"สำเร็จ\",\n        description: \"อัพเดทผลลัพธ์ล่วงหน้าเรียบร้อยแล้ว\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"เกิดข้อผิดพลาด\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // จัดการการเลือกผลลัพธ์ล่วงหน้า\n  const handleSetPredetermined = () => {\n    if (selectedTrade) {\n      predeterminedMutation.mutate({\n        tradeId: selectedTrade.id,\n        result: predeterminedResult,\n      });\n    }\n  };\n\n  // เปิดไดอะล็อกกำหนดผลลัพธ์ล่วงหน้า\n  const openSetPredeterminedDialog = (trade: Trade) => {\n    setSelectedTrade(trade);\n    setPredeterminedResult(trade.predeterminedResult || null);\n    setOpenPredeterminedDialog(true);\n  };\n\n  // กรองข้อมูลการเทรดตาม search query และ status filter และเรียงลำดับตามวันที่ล่าสุด\n  const filteredTrades = (trades?.filter((trade) => {\n    // กรองตาม search query\n    const matchesSearch =\n      searchQuery === \"\" ||\n      trade.id.toString().includes(searchQuery) ||\n      trade.cryptoId.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      (users?.find((u) => u.id === trade.userId)?.username || \"\")\n        .toLowerCase()\n        .includes(searchQuery.toLowerCase());\n\n    // กรองตาม status\n    const matchesStatus = statusFilter === \"all\" || trade.status === statusFilter;\n\n    return matchesSearch && matchesStatus;\n  }) || [])\n    // เรียงลำดับตามวันที่ล่าสุด\n    .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n\n  return (\n    <AdminLayout>\n      <div className=\"flex flex-col\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <div>\n            <h1 className=\"text-2xl font-bold tracking-tight\">จัดการการเทรด</h1>\n            <p className=\"text-muted-foreground\">\n              จัดการและตรวจสอบรายการเทรดทั้งหมดในระบบ\n            </p>\n          </div>\n        </div>\n\n        <div className=\"flex justify-between items-center mb-4\">\n          <div className=\"flex space-x-2\">\n            <div className=\"relative w-64\">\n              <Search className=\"absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground\" />\n              <Input\n                type=\"search\"\n                placeholder=\"ค้นหา ID, คริปโต, ผู้ใช้...\"\n                className=\"pl-8\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n              />\n            </div>\n            <Select\n              value={statusFilter}\n              onValueChange={setStatusFilter}\n            >\n              <SelectTrigger className=\"w-[180px]\">\n                <SelectValue placeholder=\"สถานะ\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">ทั้งหมด</SelectItem>\n                <SelectItem value=\"active\">กำลังดำเนินการ</SelectItem>\n                <SelectItem value=\"completed\">เสร็จสิ้น</SelectItem>\n                <SelectItem value=\"cancelled\">ยกเลิก</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          <Button\n            variant=\"outline\"\n            onClick={() => queryClient.invalidateQueries({ queryKey: [\"/api/admin/trades\"] })}\n          >\n            <RefreshCcw className=\"h-4 w-4 mr-2\" />\n            รีเฟรช\n          </Button>\n        </div>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"rounded-md border\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead className=\"w-[80px]\">ID</TableHead>\n                    <TableHead>ผู้ใช้</TableHead>\n                    <TableHead>คริปโต</TableHead>\n                    <TableHead>จำนวน</TableHead>\n                    <TableHead>ทิศทาง</TableHead>\n                    <TableHead>ราคาเข้า</TableHead>\n                    <TableHead>สถานะ</TableHead>\n                    <TableHead>ผลลัพธ์</TableHead>\n                    <TableHead>ผลที่กำหนดไว้</TableHead>\n                    <TableHead>เวลาสร้าง</TableHead>\n                    <TableHead className=\"text-right\">จัดการ</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {isLoading ? (\n                    <TableRow>\n                      <TableCell colSpan={11} className=\"text-center py-4\">\n                        กำลังโหลดข้อมูล...\n                      </TableCell>\n                    </TableRow>\n                  ) : filteredTrades.length === 0 ? (\n                    <TableRow>\n                      <TableCell colSpan={11} className=\"text-center py-4\">\n                        ไม่พบข้อมูลการเทรด\n                      </TableCell>\n                    </TableRow>\n                  ) : (\n                    filteredTrades.map((trade) => {\n                      const userName = users?.find((u) => u.id === trade.userId)?.username || `User ${trade.userId}`;\n                      return (\n                        <TableRow key={trade.id}>\n                          <TableCell>{trade.id}</TableCell>\n                          <TableCell>{userName}</TableCell>\n                          <TableCell>{trade.cryptoId.toUpperCase()}</TableCell>\n                          <TableCell>{trade.amount}</TableCell>\n                          <TableCell>\n                            <Badge variant={trade.direction === \"up\" ? \"default\" : \"destructive\"}>\n                              {trade.direction === \"up\" ? \"ขึ้น\" : \"ลง\"}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>{parseFloat(trade.entryPrice).toLocaleString()}</TableCell>\n                          <TableCell>\n                            <Badge variant={\n                              trade.status === \"active\" ? \"default\" : \n                              trade.status === \"completed\" ? \"secondary\" : \n                              \"destructive\"\n                            }>\n                              {trade.status === \"active\" ? \"กำลังเทรด\" : \n                              trade.status === \"completed\" ? \"เสร็จสิ้น\" : \n                              \"ยกเลิก\"}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            {trade.result ? (\n                              <Badge variant={trade.result === \"win\" ? \"default\" : \"destructive\"}>\n                                {trade.result === \"win\" ? \"ชนะ\" : \"แพ้\"}\n                              </Badge>\n                            ) : (\n                              \"-\"\n                            )}\n                          </TableCell>\n                          <TableCell>\n                            {trade.predeterminedResult ? (\n                              <Badge variant={trade.predeterminedResult === \"win\" ? \"default\" : \"destructive\"}>\n                                {trade.predeterminedResult === \"win\" ? \"ชนะ\" : \"แพ้\"}\n                              </Badge>\n                            ) : (\n                              \"-\"\n                            )}\n                          </TableCell>\n                          <TableCell>{formatDate(trade.createdAt)}</TableCell>\n                          <TableCell className=\"text-right\">\n                            <DropdownMenu>\n                              <DropdownMenuTrigger asChild>\n                                <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                                  <span className=\"sr-only\">เปิดเมนู</span>\n                                  <MoreHorizontal className=\"h-4 w-4\" />\n                                </Button>\n                              </DropdownMenuTrigger>\n                              <DropdownMenuContent align=\"end\">\n                                <DropdownMenuItem\n                                  onClick={() => openSetPredeterminedDialog(trade)}\n                                >\n                                  <Trophy className=\"mr-2 h-4 w-4\" />\n                                  กำหนดผลลัพธ์ล่วงหน้า\n                                </DropdownMenuItem>\n                              </DropdownMenuContent>\n                            </DropdownMenu>\n                          </TableCell>\n                        </TableRow>\n                      );\n                    })\n                  )}\n                </TableBody>\n              </Table>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* ไดอะล็อกสำหรับกำหนดผลลัพธ์ล่วงหน้า */}\n      <Dialog open={openPredeterminedDialog} onOpenChange={setOpenPredeterminedDialog}>\n        <DialogContent className=\"sm:max-w-[425px]\">\n          <DialogHeader>\n            <DialogTitle>กำหนดผลลัพธ์ล่วงหน้า</DialogTitle>\n            <DialogDescription>\n              กำหนดผลลัพธ์ล่วงหน้าสำหรับการเทรดนี้ (ID: {selectedTrade?.id})\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium\">เลือกผลลัพธ์:</h4>\n              <div className=\"flex space-x-4\">\n                <Button\n                  variant={predeterminedResult === \"win\" ? \"default\" : \"outline\"}\n                  onClick={() => setPredeterminedResult(\"win\")}\n                  className=\"flex-1\"\n                >\n                  <Check className=\"mr-2 h-4 w-4\" />\n                  ชนะ\n                </Button>\n                <Button\n                  variant={predeterminedResult === \"lose\" ? \"destructive\" : \"outline\"}\n                  onClick={() => setPredeterminedResult(\"lose\")}\n                  className=\"flex-1\"\n                >\n                  <X className=\"mr-2 h-4 w-4\" />\n                  แพ้\n                </Button>\n              </div>\n              <Button\n                variant=\"outline\"\n                onClick={() => setPredeterminedResult(null)}\n                className=\"w-full mt-2\"\n              >\n                <RefreshCcw className=\"mr-2 h-4 w-4\" />\n                ไม่กำหนด (ปล่อยให้เป็นไปตามราคาจริง)\n              </Button>\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setOpenPredeterminedDialog(false)}>\n              ยกเลิก\n            </Button>\n            <Button onClick={handleSetPredetermined} disabled={predeterminedMutation.isPending}>\n              {predeterminedMutation.isPending ? \"กำลังบันทึก...\" : \"บันทึก\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </AdminLayout>\n  );\n}","size_bytes":15186},"client/src/pages/admin-transactions-page.tsx":{"content":"import { useState, ChangeEvent } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Transaction, User } from \"@shared/schema\";\nimport { DesktopContainer } from \"@/components/layout/desktop-container\";\nimport { AdminSidebar } from \"@/components/layout/admin-sidebar\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { DataTable } from \"@/components/ui/data-table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogDescription } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from \"@/components/ui/tabs\";\nimport { formatCurrency, formatShortDate } from \"@/lib/formatters\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Search,\n  Bell,\n  CreditCard,\n  ArrowUpCircle,\n  ArrowDownCircle,\n  CheckCircle,\n  XCircle,\n  AlertCircle,\n  Clock,\n  Filter,\n  Loader2,\n  Banknote\n} from \"lucide-react\";\n\nexport default function AdminTransactionsPage() {\n  const { toast } = useToast();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedTransaction, setSelectedTransaction] = useState<Transaction | null>(null);\n  const [showTransactionDialog, setShowTransactionDialog] = useState(false);\n  const [showApproveDialog, setShowApproveDialog] = useState(false);\n  const [showFreezeDialog, setShowFreezeDialog] = useState(false);\n  const [adminNote, setAdminNote] = useState(\"\");\n  const [loadingApproval, setLoadingApproval] = useState(false);\n  const [selectedTab, setSelectedTab] = useState(\"all\");\n  \n  // Fetch transactions and users\n  const { data: transactions, isLoading: loadingTransactions } = useQuery<Transaction[]>({\n    queryKey: [\"/api/admin/transactions\"],\n    refetchInterval: 15000, // รีเฟรชทุก 15 วินาที\n  });\n  \n  const { data: users } = useQuery<User[]>({\n    queryKey: [\"/api/admin/users\"],\n  });\n\n  // Filter transactions based on search query and tab and sort by date (newest first)\n  const filteredTransactions = (transactions?.filter(transaction => {\n    // Filter by type based on selected tab\n    if (selectedTab === \"deposits\" && transaction.type !== \"deposit\") return false;\n    if (selectedTab === \"withdrawals\" && transaction.type !== \"withdraw\") return false; \n    if (selectedTab === \"pending\" && transaction.status !== \"pending\") return false;\n    \n    // Filter by search query\n    if (!searchQuery) return true;\n    \n    // Find the related user\n    const user = users?.find(u => u.id === transaction.userId);\n    \n    // Check if search query matches any relevant fields\n    return (\n      transaction.id.toString().includes(searchQuery) ||\n      user?.username.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      user?.fullName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      transaction.amount.includes(searchQuery) ||\n      transaction.type.includes(searchQuery) ||\n      transaction.status.includes(searchQuery)\n    );\n  }) || [])\n    // เรียงลำดับตามวันที่ล่าสุด\n    .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n\n  // Calculate statistics\n  const stats = {\n    totalDeposits: transactions?.filter(t => t.type === 'deposit').reduce((sum, t) => sum + parseFloat(t.amount), 0) || 0,\n    totalWithdrawals: transactions?.filter(t => t.type === 'withdraw').reduce((sum, t) => sum + parseFloat(t.amount), 0) || 0,\n    pendingCount: transactions?.filter(t => t.status === 'pending').length || 0,\n    pendingAmount: transactions?.filter(t => t.status === 'pending').reduce((sum, t) => sum + parseFloat(t.amount), 0) || 0,\n  };\n\n  // Transaction columns\n  const transactionColumns = [\n    {\n      key: 'id',\n      header: 'ID',\n      width: '70px',\n      cell: (transaction: Transaction) => <span>#{transaction.id}</span>,\n    },\n    {\n      key: 'user',\n      header: 'ผู้ใช้',\n      cell: (transaction: Transaction) => {\n        const user = users?.find(u => u.id === transaction.userId);\n        return (\n          <div className=\"flex flex-col\">\n            <span className=\"font-medium\">{user?.fullName || `ผู้ใช้ ${transaction.userId}`}</span>\n            <span className=\"text-xs text-muted-foreground\">@{user?.username}</span>\n          </div>\n        );\n      },\n    },\n    {\n      key: 'type',\n      header: 'ประเภท',\n      cell: (transaction: Transaction) => (\n        <div className=\"flex items-center\">\n          {transaction.type === 'deposit' ? (\n            <>\n              <ArrowUpCircle className=\"h-4 w-4 mr-2 text-green-500\" />\n              <span>ฝากเงิน</span>\n            </>\n          ) : (\n            <>\n              <ArrowDownCircle className=\"h-4 w-4 mr-2 text-blue-500\" />\n              <span>ถอนเงิน</span>\n            </>\n          )}\n        </div>\n      ),\n    },\n    {\n      key: 'amount',\n      header: 'จำนวนเงิน',\n      cell: (transaction: Transaction) => (\n        <div className=\"font-medium\">\n          {formatCurrency(parseFloat(transaction.amount))}\n        </div>\n      ),\n    },\n    {\n      key: 'method',\n      header: 'วิธีการ',\n      cell: (transaction: Transaction) => (\n        <div className=\"flex items-center\">\n          <Banknote className=\"h-4 w-4 mr-2 text-muted-foreground\" />\n          <span>{transaction.method === 'bank' ? 'ธนาคาร' : 'พร้อมเพย์'}</span>\n        </div>\n      ),\n    },\n    {\n      key: 'status',\n      header: 'สถานะ',\n      cell: (transaction: Transaction) => {\n        let icon;\n        let variant;\n        let label;\n        \n        switch(transaction.status) {\n          case 'pending':\n            icon = <Clock className=\"h-4 w-4 mr-1\" />;\n            variant = 'secondary';\n            label = 'รออนุมัติ';\n            break;\n          case 'approved':\n            icon = <CheckCircle className=\"h-4 w-4 mr-1\" />;\n            variant = 'default';\n            label = 'อนุมัติแล้ว';\n            break;\n          case 'rejected':\n            icon = <XCircle className=\"h-4 w-4 mr-1\" />;\n            variant = 'destructive';\n            label = 'ปฏิเสธแล้ว';\n            break;\n          case 'frozen':\n            icon = <AlertCircle className=\"h-4 w-4 mr-1\" />;\n            variant = 'warning';\n            label = 'ถูกอายัด';\n            break;\n          default:\n            icon = <AlertCircle className=\"h-4 w-4 mr-1\" />;\n            variant = 'outline';\n            label = transaction.status;\n        }\n        \n        return (\n          <Badge variant={variant as any} className=\"flex items-center\">\n            {icon}{label}\n          </Badge>\n        );\n      },\n    },\n    {\n      key: 'createdAt',\n      header: 'วันที่',\n      cell: (transaction: Transaction) => formatShortDate(transaction.createdAt),\n    },\n    {\n      key: 'actions',\n      header: 'จัดการ',\n      cell: (transaction: Transaction) => {\n        // แสดงปุ่มเฉพาะรายการที่รอการอนุมัติเท่านั้น\n        if (transaction.status !== 'pending') {\n          return (\n            <Button \n              size=\"sm\" \n              variant=\"ghost\"\n              onClick={() => {\n                setSelectedTransaction(transaction);\n                setAdminNote(\"\");\n                setShowTransactionDialog(true);\n              }}\n            >\n              <Search className=\"h-4 w-4 mr-1\" />\n              ดูรายละเอียด\n            </Button>\n          );\n        }\n        \n        return (\n          <div className=\"flex space-x-2\">\n            <Button \n              size=\"sm\" \n              variant=\"ghost\"\n              onClick={() => {\n                setSelectedTransaction(transaction);\n                setAdminNote(\"\");\n                setShowTransactionDialog(true);\n              }}\n            >\n              <Search className=\"h-4 w-4 mr-1\" />\n              รายละเอียด\n            </Button>\n            \n            <Button \n              size=\"sm\" \n              variant=\"default\"\n              className=\"bg-green-600 hover:bg-green-700 text-white\"\n              onClick={() => {\n                setSelectedTransaction(transaction);\n                setAdminNote(\"\");\n                setShowApproveDialog(true);\n              }}\n            >\n              <CheckCircle className=\"h-4 w-4 mr-1\" />\n              อนุมัติ\n            </Button>\n            \n            <Button \n              size=\"sm\" \n              variant=\"default\"\n              className=\"bg-yellow-600 hover:bg-yellow-700 text-white\"\n              onClick={() => {\n                setSelectedTransaction(transaction);\n                setAdminNote(\"\");\n                setShowFreezeDialog(true);\n              }}\n            >\n              <AlertCircle className=\"h-4 w-4 mr-1\" />\n              อายัด\n            </Button>\n          </div>\n        );\n      },\n    },\n  ] as const;\n\n  // Mutation สำหรับการอนุมัติหรือปฏิเสธธุรกรรม\n  const updateTransactionMutation = useMutation({\n    mutationFn: async ({ id, status, note }: { id: number, status: string, note?: string }) => {\n      const response = await apiRequest('PATCH', `/api/admin/transactions/${id}`, { status, note });\n      return response.json();\n    },\n    onSuccess: () => {\n      // รีเฟรชข้อมูลธุรกรรมหลังจากอัพเดทสำเร็จ\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/transactions'] });\n      // รีเฟรชข้อมูลผู้ใช้เพื่ออัพเดทยอดเงิน\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] });\n      \n      setShowTransactionDialog(false);\n      setLoadingApproval(false);\n      \n      toast({\n        title: \"อัพเดทสถานะสำเร็จ\",\n        description: \"ระบบได้อัพเดทสถานะธุรกรรมเรียบร้อยแล้ว\",\n      });\n    },\n    onError: (error: Error) => {\n      setLoadingApproval(false);\n      toast({\n        title: \"เกิดข้อผิดพลาด\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n  \n  // ฟังก์ชันสำหรับการอนุมัติ, ปฏิเสธ, หรืออายัดธุรกรรม\n  const handleTransactionAction = (status: 'approved' | 'rejected' | 'frozen') => {\n    if (!selectedTransaction) return;\n    \n    setLoadingApproval(true);\n    \n    updateTransactionMutation.mutate({\n      id: selectedTransaction.id,\n      status,\n      note: adminNote.trim() || undefined\n    });\n  };\n\n  return (\n    <DesktopContainer>\n      <div className=\"flex h-screen overflow-hidden\">\n        {/* Sidebar */}\n        <AdminSidebar />\n        \n        {/* Main Content */}\n        <div className=\"flex-1 flex flex-col overflow-hidden\">\n          {/* Top Bar */}\n          <header className=\"border-b border-border h-16 bg-card\">\n            <div className=\"flex items-center justify-between h-full px-6\">\n              <h1 className=\"text-2xl font-bold\">การทำธุรกรรม</h1>\n              \n              <div className=\"flex items-center space-x-4\">\n                <div className=\"relative\">\n                  <Input\n                    type=\"search\"\n                    placeholder=\"ค้นหาธุรกรรม...\"\n                    className=\"w-64 pl-9\"\n                    value={searchQuery}\n                    onChange={(e: ChangeEvent<HTMLInputElement>) => setSearchQuery(e.target.value)}\n                  />\n                  <Search className=\"h-4 w-4 absolute left-3 top-3 text-muted-foreground\" />\n                </div>\n                \n                <Button size=\"icon\" variant=\"ghost\">\n                  <Bell className=\"h-5 w-5\" />\n                </Button>\n                \n                <div className=\"h-8 w-px bg-border mx-1\" />\n                \n                <ThemeToggle />\n              </div>\n            </div>\n          </header>\n          \n          {/* Main Content Scrollable Area */}\n          <main className=\"flex-1 overflow-y-auto p-6 bg-background\">\n            {/* Page Header with Action Buttons */}\n            <div className=\"flex justify-between items-center mb-6\">\n              <div>\n                <h2 className=\"text-xl font-bold\">ประวัติการทำธุรกรรม</h2>\n                <p className=\"text-muted-foreground\">จัดการรายการฝาก-ถอนเงินทั้งหมดในระบบ</p>\n              </div>\n              \n              <div className=\"flex space-x-3\">\n                <Button variant=\"outline\" className=\"h-9\">\n                  <Filter className=\"h-4 w-4 mr-2\" />\n                  ตัวกรองขั้นสูง\n                </Button>\n              </div>\n            </div>\n            \n            {/* Transaction Stats */}\n            <div className=\"grid grid-cols-4 gap-6 mb-6\">\n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">การฝากเงินทั้งหมด</p>\n                      <h3 className=\"text-2xl font-bold mt-1\">{formatCurrency(stats.totalDeposits)}</h3>\n                      <p className=\"text-xs text-green-500 mt-1\">\n                        <ArrowUpCircle className=\"h-3 w-3 inline mr-1\" />\n                        ยอดรวมเงินฝาก\n                      </p>\n                    </div>\n                    <div className=\"p-3 rounded-full bg-green-500/10\">\n                      <ArrowUpCircle className=\"h-5 w-5 text-green-500\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">การถอนเงินทั้งหมด</p>\n                      <h3 className=\"text-2xl font-bold mt-1\">{formatCurrency(stats.totalWithdrawals)}</h3>\n                      <p className=\"text-xs text-blue-500 mt-1\">\n                        <ArrowDownCircle className=\"h-3 w-3 inline mr-1\" />\n                        ยอดรวมเงินถอน\n                      </p>\n                    </div>\n                    <div className=\"p-3 rounded-full bg-blue-500/10\">\n                      <ArrowDownCircle className=\"h-5 w-5 text-blue-500\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">รายการรออนุมัติ</p>\n                      <h3 className=\"text-2xl font-bold mt-1\">{stats.pendingCount}</h3>\n                      <p className=\"text-xs text-amber-500 mt-1\">\n                        <Clock className=\"h-3 w-3 inline mr-1\" />\n                        รอการตรวจสอบ\n                      </p>\n                    </div>\n                    <div className=\"p-3 rounded-full bg-amber-500/10\">\n                      <Clock className=\"h-5 w-5 text-amber-500\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">มูลค่ารออนุมัติ</p>\n                      <h3 className=\"text-2xl font-bold mt-1\">{formatCurrency(stats.pendingAmount)}</h3>\n                      <p className=\"text-xs text-orange-500 mt-1\">\n                        <AlertCircle className=\"h-3 w-3 inline mr-1\" />\n                        รอการอนุมัติ\n                      </p>\n                    </div>\n                    <div className=\"p-3 rounded-full bg-orange-500/10\">\n                      <CreditCard className=\"h-5 w-5 text-orange-500\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n            \n            {/* Transaction Tabs and Table */}\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>รายการธุรกรรม</CardTitle>\n                  <Tabs \n                    value={selectedTab} \n                    onValueChange={setSelectedTab}\n                    className=\"w-2/3\"\n                  >\n                    <TabsList className=\"w-full\">\n                      <TabsTrigger value=\"all\" className=\"flex-1\">\n                        ทั้งหมด\n                      </TabsTrigger>\n                      <TabsTrigger value=\"deposits\" className=\"flex-1\">\n                        เงินฝาก\n                        <Badge variant=\"default\" className=\"ml-2 bg-green-500\">\n                          {transactions?.filter(t => t.type === 'deposit').length || 0}\n                        </Badge>\n                      </TabsTrigger>\n                      <TabsTrigger value=\"withdrawals\" className=\"flex-1\">\n                        เงินถอน\n                        <Badge variant=\"default\" className=\"ml-2 bg-blue-500\">\n                          {transactions?.filter(t => t.type === 'withdraw').length || 0}\n                        </Badge>\n                      </TabsTrigger>\n                      <TabsTrigger value=\"pending\" className=\"flex-1\">\n                        รออนุมัติ\n                        {stats.pendingCount > 0 && (\n                          <Badge variant=\"destructive\" className=\"ml-2\">\n                            {stats.pendingCount}\n                          </Badge>\n                        )}\n                      </TabsTrigger>\n                    </TabsList>\n                  </Tabs>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <DataTable\n                  columns={transactionColumns as any}\n                  data={filteredTransactions}\n                  isLoading={loadingTransactions}\n                  emptyMessage=\"ไม่พบรายการธุรกรรม\"\n                />\n              </CardContent>\n            </Card>\n          </main>\n        </div>\n      </div>\n      \n      {/* Transaction Detail Dialog */}\n      <Dialog open={showTransactionDialog} onOpenChange={setShowTransactionDialog}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>รายละเอียดธุรกรรม #{selectedTransaction?.id}</DialogTitle>\n            <DialogDescription>\n              {selectedTransaction?.type === 'deposit' ? 'คำขอฝากเงิน' : 'คำขอถอนเงิน'}\n            </DialogDescription>\n          </DialogHeader>\n          \n          {selectedTransaction && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                <div className=\"text-muted-foreground\">ประเภท:</div>\n                <div className=\"font-medium\">\n                  {selectedTransaction.type === 'deposit' ? (\n                    <span className=\"flex items-center\">\n                      <ArrowUpCircle className=\"h-4 w-4 mr-1 text-green-500\" /> ฝากเงิน\n                    </span>\n                  ) : (\n                    <span className=\"flex items-center\">\n                      <ArrowDownCircle className=\"h-4 w-4 mr-1 text-blue-500\" /> ถอนเงิน\n                    </span>\n                  )}\n                </div>\n                \n                <div className=\"text-muted-foreground\">จำนวนเงิน:</div>\n                <div className=\"font-bold\">{formatCurrency(parseFloat(selectedTransaction.amount))}</div>\n                \n                <div className=\"text-muted-foreground\">ผู้ใช้งาน:</div>\n                <div>\n                  {users?.find(u => u.id === selectedTransaction.userId)?.username}\n                  <div className=\"text-xs text-muted-foreground\">\n                    ผู้ใช้ #{selectedTransaction.userId}\n                  </div>\n                </div>\n                \n                <div className=\"text-muted-foreground\">วันที่:</div>\n                <div>{formatShortDate(selectedTransaction.createdAt)}</div>\n                \n                <div className=\"text-muted-foreground\">สถานะ:</div>\n                <div>\n                  {selectedTransaction.status === 'pending' ? (\n                    <Badge variant=\"secondary\">รออนุมัติ</Badge>\n                  ) : selectedTransaction.status === 'approved' ? (\n                    <Badge variant=\"default\">อนุมัติแล้ว</Badge>\n                  ) : (\n                    <Badge variant=\"destructive\">ปฏิเสธแล้ว</Badge>\n                  )}\n                </div>\n                \n                <div className=\"text-muted-foreground\">วิธีการชำระเงิน:</div>\n                <div>{selectedTransaction.method === 'bank' ? 'ธนาคาร' : 'พร้อมเพย์'}</div>\n                \n                {selectedTransaction.bankAccount && (\n                  <>\n                    <div className=\"text-muted-foreground\">เลขที่บัญชี:</div>\n                    <div>{selectedTransaction.bankAccount}</div>\n                  </>\n                )}\n                \n                {selectedTransaction.bankName && (\n                  <>\n                    <div className=\"text-muted-foreground\">ธนาคาร:</div>\n                    <div>{selectedTransaction.bankName}</div>\n                  </>\n                )}\n                \n\n                \n                {selectedTransaction.note && (\n                  <>\n                    <div className=\"text-muted-foreground\">บันทึก:</div>\n                    <div>{selectedTransaction.note}</div>\n                  </>\n                )}\n              </div>\n              \n              {/* แสดงรูปภาพหลักฐานการชำระเงิน */}\n              {selectedTransaction.type === 'deposit' && selectedTransaction.paymentProof && (\n                <div className=\"mt-4\">\n                  <div className=\"text-sm font-medium mb-2\">หลักฐานการชำระเงิน:</div>\n                  <div className=\"border rounded-md overflow-hidden\">\n                    <img \n                      src={selectedTransaction.paymentProof} \n                      alt=\"หลักฐานการชำระเงิน\" \n                      className=\"w-full h-auto object-contain cursor-pointer\"\n                      onClick={() => window.open(selectedTransaction.paymentProof, '_blank')}\n                    />\n                  </div>\n                  <div className=\"text-xs text-muted-foreground text-center mt-1\">\n                    คลิกที่รูปภาพเพื่อดูขนาดเต็ม\n                  </div>\n                </div>\n              )}\n              \n              {selectedTransaction.status === 'pending' && (\n                <div className=\"space-y-2 mt-4\">\n                  <Label htmlFor=\"admin-note\">หมายเหตุของผู้ดูแล</Label>\n                  <Input\n                    id=\"admin-note\"\n                    value={adminNote}\n                    onChange={(e: ChangeEvent<HTMLInputElement>) => setAdminNote(e.target.value)}\n                    placeholder=\"เพิ่มหมายเหตุเกี่ยวกับการอนุมัติหรือปฏิเสธ (ไม่บังคับ)\"\n                  />\n                </div>\n              )}\n              \n              {selectedTransaction.status === 'pending' && (\n                <DialogFooter className=\"flex justify-between mt-4\">\n                  <Button\n                    variant=\"destructive\"\n                    onClick={() => handleTransactionAction('rejected')}\n                    disabled={loadingApproval}\n                  >\n                    {loadingApproval ? (\n                      <>\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> กำลังดำเนินการ\n                      </>\n                    ) : (\n                      <>\n                        <XCircle className=\"mr-2 h-4 w-4\" /> ปฏิเสธ\n                      </>\n                    )}\n                  </Button>\n                  \n                  <Button\n                    variant=\"default\"\n                    onClick={() => handleTransactionAction('approved')}\n                    disabled={loadingApproval}\n                  >\n                    {loadingApproval ? (\n                      <>\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> กำลังดำเนินการ\n                      </>\n                    ) : (\n                      <>\n                        <CheckCircle className=\"mr-2 h-4 w-4\" /> อนุมัติ\n                      </>\n                    )}\n                  </Button>\n                </DialogFooter>\n              )}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n      \n      {/* Approve Transaction Dialog */}\n      <Dialog open={showApproveDialog} onOpenChange={setShowApproveDialog}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>ยืนยันการอนุมัติธุรกรรม</DialogTitle>\n            <DialogDescription>\n              คุณต้องการอนุมัติรายการ {selectedTransaction?.type === 'deposit' ? 'ฝากเงิน' : 'ถอนเงิน'} นี้ใช่หรือไม่?\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4 py-4\">\n            <div className=\"rounded-lg border p-3 bg-background\">\n              <div className=\"flex items-center justify-between text-sm\">\n                <div>หมายเลขธุรกรรม:</div>\n                <div className=\"font-medium\">#{selectedTransaction?.id}</div>\n              </div>\n              <div className=\"flex items-center justify-between text-sm mt-2\">\n                <div>จำนวนเงิน:</div>\n                <div className=\"font-medium\">{formatCurrency(parseFloat(selectedTransaction?.amount || \"0\"))}</div>\n              </div>\n              {selectedTransaction?.type === 'withdraw' && (\n                <div className=\"flex items-center justify-between text-sm mt-2\">\n                  <div>ค่าธรรมเนียม (3%):</div>\n                  <div className=\"font-medium\">{formatCurrency(parseFloat(selectedTransaction?.amount || \"0\") * 0.03)}</div>\n                </div>\n              )}\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"admin-note\">บันทึกเพิ่มเติม (ถ้ามี)</Label>\n              <Textarea\n                id=\"admin-note\"\n                placeholder=\"ระบุบันทึกเพิ่มเติมหรือหมายเหตุ...\"\n                value={adminNote}\n                onChange={(e: ChangeEvent<HTMLTextAreaElement>) => setAdminNote(e.target.value)}\n              />\n            </div>\n          </div>\n          \n          <DialogFooter className=\"flex space-x-2 justify-end\">\n            <Button \n              variant=\"outline\" \n              onClick={() => setShowApproveDialog(false)}\n            >\n              ยกเลิก\n            </Button>\n            <Button \n              onClick={() => {\n                setShowApproveDialog(false);\n                handleTransactionAction('approved');\n              }}\n              disabled={loadingApproval}\n              className=\"bg-green-600 hover:bg-green-700 text-white\"\n            >\n              {loadingApproval ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> กำลังดำเนินการ\n                </>\n              ) : (\n                <>\n                  <CheckCircle className=\"mr-2 h-4 w-4\" /> ยืนยันการอนุมัติ\n                </>\n              )}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n      \n      {/* Freeze Transaction Dialog */}\n      <Dialog open={showFreezeDialog} onOpenChange={setShowFreezeDialog}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>อายัดรายการธุรกรรม</DialogTitle>\n            <DialogDescription>\n              คุณต้องการอายัดรายการ {selectedTransaction?.type === 'deposit' ? 'ฝากเงิน' : 'ถอนเงิน'} นี้ใช่หรือไม่?\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4 py-4\">\n            <div className=\"rounded-lg border p-3 bg-background\">\n              <div className=\"flex items-center justify-between text-sm\">\n                <div>หมายเลขธุรกรรม:</div>\n                <div className=\"font-medium\">#{selectedTransaction?.id}</div>\n              </div>\n              <div className=\"flex items-center justify-between text-sm mt-2\">\n                <div>จำนวนเงิน:</div>\n                <div className=\"font-medium\">{formatCurrency(parseFloat(selectedTransaction?.amount || \"0\"))}</div>\n              </div>\n              {selectedTransaction?.type === 'withdraw' && (\n                <div className=\"flex items-center justify-between text-sm mt-2\">\n                  <div>ค่าธรรมเนียม (3%):</div>\n                  <div className=\"font-medium\">{formatCurrency(parseFloat(selectedTransaction?.amount || \"0\") * 0.03)}</div>\n                </div>\n              )}\n            </div>\n            \n            <div className=\"bg-yellow-50 dark:bg-yellow-950/30 border border-yellow-200 dark:border-yellow-900 rounded-md p-3 text-yellow-800 dark:text-yellow-300\">\n              <div className=\"flex\">\n                <AlertCircle className=\"h-5 w-5 mr-2 flex-shrink-0\" />\n                <div>\n                  <h3 className=\"font-medium\">คำเตือน</h3>\n                  <p className=\"text-sm\">การอายัดเงินจะทำให้ยอดเงินถูกระงับไว้ชั่วคราว และอาจต้องมีการตรวจสอบเพิ่มเติม</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"admin-note\">เหตุผลในการอายัด (จำเป็น)</Label>\n              <Textarea\n                id=\"admin-note\"\n                placeholder=\"ระบุเหตุผลที่ต้องอายัดรายการนี้...\"\n                value={adminNote}\n                onChange={(e: ChangeEvent<HTMLTextAreaElement>) => setAdminNote(e.target.value)}\n              />\n            </div>\n          </div>\n          \n          <DialogFooter className=\"flex space-x-2 justify-end\">\n            <Button \n              variant=\"outline\" \n              onClick={() => setShowFreezeDialog(false)}\n            >\n              ยกเลิก\n            </Button>\n            <Button \n              onClick={() => {\n                if (!adminNote.trim()) {\n                  toast({\n                    title: \"กรุณาระบุเหตุผล\",\n                    description: \"โปรดระบุเหตุผลในการอายัดรายการนี้\",\n                    variant: \"destructive\",\n                  });\n                  return;\n                }\n                \n                setShowFreezeDialog(false);\n                handleTransactionAction('frozen');\n              }}\n              disabled={loadingApproval}\n              className=\"bg-yellow-600 hover:bg-yellow-700 text-white\"\n            >\n              {loadingApproval ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> กำลังดำเนินการ\n                </>\n              ) : (\n                <>\n                  <AlertCircle className=\"mr-2 h-4 w-4\" /> ยืนยันการอายัด\n                </>\n              )}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </DesktopContainer>\n  );\n}","size_bytes":34267},"client/src/pages/admin-users-page.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { User, BankAccount } from \"@shared/schema\";\nimport { DesktopContainer } from \"@/components/layout/desktop-container\";\nimport { AdminSidebar } from \"@/components/layout/admin-sidebar\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { DataTable } from \"@/components/ui/data-table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogDescription } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { formatCurrency, formatShortDate } from \"@/lib/formatters\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport {\n  Search,\n  Bell,\n  Users,\n  Plus,\n  Edit,\n  Trash2,\n  ShieldAlert,\n  Shield,\n  RefreshCw,\n  FilePenLine,\n  CreditCard,\n  Landmark\n} from \"lucide-react\";\n\nexport default function AdminUsersPage() {\n  const { toast } = useToast();\n  const { user: currentUser } = useAuth();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [showAddUserDialog, setShowAddUserDialog] = useState(false);\n  const [showEditUserDialog, setShowEditUserDialog] = useState(false);\n  const [showBankAccountsDialog, setShowBankAccountsDialog] = useState(false);\n  const [showEditBankAccountDialog, setShowEditBankAccountDialog] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedBankAccount, setSelectedBankAccount] = useState<BankAccount | null>(null);\n  \n  // Fetch users\n  const { data: users, isLoading: loadingUsers } = useQuery<User[]>({\n    queryKey: [\"/api/admin/users\"],\n  });\n  \n  // Fetch bank accounts for selected user\n  const { data: userBankAccounts, isLoading: loadingBankAccounts, refetch: refetchBankAccounts } = useQuery<BankAccount[]>({\n    queryKey: [\"/api/admin/users\", selectedUser?.id, \"bank-accounts\"],\n    queryFn: async () => {\n      if (!selectedUser) return [];\n      const response = await fetch(`/api/admin/users/${selectedUser.id}/bank-accounts`);\n      if (!response.ok) throw new Error(\"Failed to fetch bank accounts\");\n      return await response.json();\n    },\n    enabled: !!selectedUser && showBankAccountsDialog,\n  });\n\n  // Filter users based on search query\n  const filteredUsers = users?.filter(user => {\n    if (!searchQuery) return true;\n    \n    return (\n      user.id.toString().includes(searchQuery) ||\n      user.username.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      user.fullName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      user.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      user.role.toLowerCase().includes(searchQuery.toLowerCase())\n    );\n  }) || [];\n\n  // User table columns\n  const userColumns = [\n    {\n      key: 'id',\n      header: 'ID',\n      width: '70px',\n      cell: (user: User) => <span>{user.id}</span>,\n    },\n    {\n      key: 'username',\n      header: 'ชื่อผู้ใช้',\n      cell: (user: User) => (\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 rounded-full bg-primary text-primary-foreground flex items-center justify-center font-medium\">\n            {user.username.charAt(0).toUpperCase()}\n          </div>\n          <div>\n            <div className=\"font-medium\">{user.username}</div>\n            <div className=\"text-xs text-muted-foreground\">@{user.email}</div>\n          </div>\n        </div>\n      ),\n    },\n    {\n      key: 'email',\n      header: 'อีเมล',\n    },\n    {\n      key: 'balance',\n      header: 'ยอดเงิน',\n      cell: (user: User) => (\n        <div className=\"font-medium\">\n          {formatCurrency(parseFloat(user.balance || \"0\"))}\n        </div>\n      ),\n    },\n    {\n      key: 'role',\n      header: 'บทบาท',\n      cell: (user: User) => (\n        <Badge variant={user.role === 'admin' ? 'destructive' : user.role === 'agent' ? 'outline' : 'secondary'}>\n          {user.role === 'admin' ? 'แอดมิน' : user.role === 'agent' ? 'เอเจ้นต์' : 'ผู้ใช้ทั่วไป'}\n        </Badge>\n      ),\n    },\n    {\n      key: 'createdAt',\n      header: 'วันที่สมัคร',\n      cell: (user: User) => formatShortDate(user.createdAt),\n    },\n    {\n      key: 'actions',\n      header: 'จัดการ',\n      cell: (user: User) => (\n        <div className=\"flex space-x-2\">\n          <Button \n            size=\"sm\" \n            variant=\"ghost\"\n            onClick={() => {\n              setSelectedUser(user);\n              setShowEditUserDialog(true);\n            }}\n          >\n            <Edit className=\"h-4 w-4 mr-1\" />\n            แก้ไข\n          </Button>\n          \n          <Button \n            size=\"sm\" \n            variant=\"ghost\"\n            onClick={() => {\n              setSelectedUser(user);\n              setShowBankAccountsDialog(true);\n            }}\n          >\n            <CreditCard className=\"h-4 w-4 mr-1\" />\n            บัญชีธนาคาร\n          </Button>\n          \n          {user.role !== 'admin' && (\n            <Button \n              size=\"sm\" \n              variant=\"ghost\"\n              className=\"text-destructive\"\n            >\n              <Trash2 className=\"h-4 w-4 mr-1\" />\n              ระงับ\n            </Button>\n          )}\n        </div>\n      ),\n    },\n  ] as const;\n\n  const handleChangeRole = (userId: number, newRole: 'user' | 'admin') => {\n    // Implement this functionality if needed\n    toast({\n      title: \"การเปลี่ยนแปลงบทบาท\",\n      description: `เปลี่ยนบทบาทของผู้ใช้ ID ${userId} เป็น ${newRole} เรียบร้อยแล้ว`,\n    });\n  };\n\n  return (\n    <DesktopContainer>\n      <div className=\"flex h-screen overflow-hidden\">\n        {/* Sidebar */}\n        <AdminSidebar />\n        \n        {/* Main Content */}\n        <div className=\"flex-1 flex flex-col overflow-hidden\">\n          {/* Top Bar */}\n          <header className=\"border-b border-border h-16 bg-card\">\n            <div className=\"flex items-center justify-between h-full px-6\">\n              <h1 className=\"text-2xl font-bold\">จัดการผู้ใช้งาน</h1>\n              \n              <div className=\"flex items-center space-x-4\">\n                <div className=\"relative\">\n                  <Input\n                    type=\"search\"\n                    placeholder=\"ค้นหาผู้ใช้...\"\n                    className=\"w-64 pl-9\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                  />\n                  <Search className=\"h-4 w-4 absolute left-3 top-3 text-muted-foreground\" />\n                </div>\n                \n                <Button size=\"icon\" variant=\"ghost\">\n                  <Bell className=\"h-5 w-5\" />\n                </Button>\n                \n                <div className=\"h-8 w-px bg-border mx-1\" />\n                \n                <ThemeToggle />\n              </div>\n            </div>\n          </header>\n          \n          {/* Main Content Scrollable Area */}\n          <main className=\"flex-1 overflow-y-auto p-6 bg-background\">\n            {/* Page Header with Action Buttons */}\n            <div className=\"flex justify-between items-center mb-6\">\n              <div>\n                <h2 className=\"text-xl font-bold\">รายชื่อผู้ใช้ทั้งหมด</h2>\n                <p className=\"text-muted-foreground\">จัดการผู้ใช้งานทั้งหมดในระบบ</p>\n              </div>\n              \n              <div className=\"flex space-x-3\">\n                <Button variant=\"outline\" className=\"h-9\">\n                  <FilePenLine className=\"h-4 w-4 mr-2\" />\n                  ส่งออกข้อมูล\n                </Button>\n                <Button className=\"h-9\" onClick={() => setShowAddUserDialog(true)}>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  เพิ่มผู้ใช้ใหม่\n                </Button>\n              </div>\n            </div>\n            \n            {/* User Stats */}\n            <div className=\"grid grid-cols-3 gap-6 mb-6\">\n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">ผู้ใช้ทั้งหมด</p>\n                      <h3 className=\"text-2xl font-bold mt-1\">{users?.length || 0}</h3>\n                      <p className=\"text-xs text-[hsl(var(--chart-1))] mt-1\">\n                        ทั้งหมดในระบบ\n                      </p>\n                    </div>\n                    <div className=\"p-3 rounded-full bg-primary/10\">\n                      <Users className=\"h-5 w-5 text-primary\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">แอดมิน</p>\n                      <h3 className=\"text-2xl font-bold mt-1\">{users?.filter(u => u.role === 'admin' || u.role === 'agent').length || 0}</h3>\n                      <p className=\"text-xs text-amber-500 mt-1\">\n                        <ShieldAlert className=\"h-3 w-3 inline mr-1\" />\n                        ผู้ดูแลระบบ\n                      </p>\n                    </div>\n                    <div className=\"p-3 rounded-full bg-amber-500/10\">\n                      <ShieldAlert className=\"h-5 w-5 text-amber-500\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">ผู้ใช้ทั่วไป</p>\n                      <h3 className=\"text-2xl font-bold mt-1\">{users?.filter(u => u.role === 'user').length || 0}</h3>\n                      <p className=\"text-xs text-blue-500 mt-1\">\n                        <Shield className=\"h-3 w-3 inline mr-1\" />\n                        สมาชิกปกติ\n                      </p>\n                    </div>\n                    <div className=\"p-3 rounded-full bg-blue-500/10\">\n                      <Shield className=\"h-5 w-5 text-blue-500\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n            \n            {/* Users Table */}\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle>รายชื่อผู้ใช้งาน</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <DataTable\n                  columns={userColumns as any}\n                  data={filteredUsers}\n                  isLoading={loadingUsers}\n                  emptyMessage=\"ไม่พบผู้ใช้งาน\"\n                />\n              </CardContent>\n            </Card>\n          </main>\n        </div>\n      </div>\n      \n      {/* Add User Dialog */}\n      <Dialog open={showAddUserDialog} onOpenChange={setShowAddUserDialog}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>เพิ่มผู้ใช้ใหม่</DialogTitle>\n            <DialogDescription>\n              กรอกข้อมูลเพื่อสร้างบัญชีผู้ใช้ใหม่ในระบบ\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4 py-2\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\">ชื่อผู้ใช้</Label>\n              <Input id=\"username\" placeholder=\"username\" />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">อีเมล</Label>\n              <Input id=\"email\" placeholder=\"email@example.com\" type=\"email\" />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"fullName\">ชื่อ-นามสกุล</Label>\n              <Input id=\"fullName\" placeholder=\"ชื่อ นามสกุล\" />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">รหัสผ่าน</Label>\n              <Input id=\"password\" placeholder=\"รหัสผ่าน\" type=\"password\" />\n            </div>\n            \n            {/* เฉพาะ admin เท่านั้นที่สามารถกำหนดบทบาทได้ */}\n            {currentUser?.role === 'admin' && (\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"role\">บทบาท</Label>\n                <select id=\"role\" className=\"w-full h-10 px-3 rounded-md border border-input bg-background\">\n                  <option value=\"user\">ผู้ใช้ทั่วไป</option>\n                  <option value=\"agent\">เอเจ้นต์</option>\n                  <option value=\"admin\">แอดมิน</option>\n                </select>\n              </div>\n            )}\n          </div>\n          \n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowAddUserDialog(false)}>ยกเลิก</Button>\n            <Button type=\"submit\">เพิ่มผู้ใช้</Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n      \n      {/* Edit User Dialog */}\n      {selectedUser && (\n        <Dialog open={showEditUserDialog} onOpenChange={setShowEditUserDialog}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>แก้ไขข้อมูลผู้ใช้</DialogTitle>\n              <DialogDescription>\n                แก้ไขข้อมูลของ {selectedUser.fullName} (@{selectedUser.username})\n              </DialogDescription>\n            </DialogHeader>\n            \n            <div className=\"space-y-4 py-2\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-email\">อีเมล</Label>\n                <Input id=\"edit-email\" defaultValue={selectedUser.email} />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-fullName\">ชื่อ-นามสกุล</Label>\n                <Input id=\"edit-fullName\" defaultValue={selectedUser.fullName} />\n              </div>\n              \n              {/* เฉพาะ admin เท่านั้นที่สามารถแก้ไขบทบาทได้ */}\n              {currentUser?.role === 'admin' ? (\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-role\">บทบาท</Label>\n                  <select\n                    id=\"edit-role\"\n                    className=\"w-full h-10 px-3 rounded-md border border-input bg-background\"\n                    defaultValue={selectedUser.role ?? 'user'}\n                  >\n                    <option value=\"user\">ผู้ใช้ทั่วไป</option>\n                    <option value=\"agent\">เอเจ้นต์</option>\n                    <option value=\"admin\">แอดมิน</option>\n                  </select>\n                </div>\n              ) : (\n                <div className=\"space-y-2\">\n                  <Label>บทบาท</Label>\n                  <div className=\"text-sm text-muted-foreground p-2 bg-muted rounded-md\">\n                    {selectedUser.role === 'admin' ? 'แอดมิน' : selectedUser.role === 'agent' ? 'เอเจ้นต์' : 'ผู้ใช้ทั่วไป'} (ไม่สามารถแก้ไขได้)\n                  </div>\n                </div>\n              )}\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-balance\">ยอดเงิน</Label>\n                <Input\n                  id=\"edit-balance\"\n                  defaultValue={selectedUser.balance}\n                  type=\"number\"\n                  step=\"0.01\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-password\">รหัสผ่านใหม่ (เว้นว่างถ้าไม่ต้องการเปลี่ยน)</Label>\n                <Input id=\"edit-password\" type=\"password\" placeholder=\"รหัสผ่านใหม่\" />\n              </div>\n            </div>\n            \n            <DialogFooter>\n              <Button variant=\"outline\" onClick={() => setShowEditUserDialog(false)}>ยกเลิก</Button>\n              <Button \n                onClick={() => {\n                  // ดึงค่าจาก input\n                  const email = (document.getElementById('edit-email') as HTMLInputElement)?.value;\n                  const fullName = (document.getElementById('edit-fullName') as HTMLInputElement)?.value;\n                  const role = (document.getElementById('edit-role') as HTMLSelectElement)?.value;\n                  const balance = (document.getElementById('edit-balance') as HTMLInputElement)?.value;\n                  const password = (document.getElementById('edit-password') as HTMLInputElement)?.value;\n\n                  // สร้างข้อมูลสำหรับการอัพเดท\n                  const updateData: any = {\n                    email,\n                    fullName,\n                    role,\n                    balance\n                  };\n\n                  // ถ้ากรอกรหัสผ่านใหม่ ให้รวมไปด้วย\n                  if (password) {\n                    updateData.password = password;\n                  }\n\n                  // ส่งคำขอไปยัง API\n                  apiRequest('PATCH', `/api/admin/users/${selectedUser.id}`, updateData)\n                    .then(res => res.json())\n                    .then(updatedUser => {\n                      // อัพเดทข้อมูลในแคช\n                      queryClient.invalidateQueries({queryKey: ['/api/admin/users']});\n                      // ปิด dialog\n                      setShowEditUserDialog(false);\n                      // แสดงข้อความสำเร็จ\n                      toast({\n                        title: \"บันทึกเรียบร้อย\",\n                        description: `อัพเดทข้อมูลผู้ใช้ ${fullName} สำเร็จแล้ว`,\n                      });\n                    })\n                    .catch(error => {\n                      toast({\n                        title: \"เกิดข้อผิดพลาด\",\n                        description: error.message || \"ไม่สามารถอัพเดทข้อมูลผู้ใช้ได้\",\n                        variant: \"destructive\"\n                      });\n                    });\n                }}\n              >\n                บันทึกการเปลี่ยนแปลง\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      )}\n      \n      {/* Bank Accounts Dialog */}\n      {selectedUser && (\n        <Dialog open={showBankAccountsDialog} onOpenChange={setShowBankAccountsDialog}>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>จัดการบัญชีธนาคาร</DialogTitle>\n              <DialogDescription>\n                บัญชีธนาคารของ {selectedUser.fullName} (@{selectedUser.username})\n              </DialogDescription>\n            </DialogHeader>\n            \n            {loadingBankAccounts ? (\n              <div className=\"flex justify-center py-8\">\n                <div className=\"animate-spin h-8 w-8 border-4 border-primary border-t-transparent rounded-full\"></div>\n              </div>\n            ) : userBankAccounts && userBankAccounts.length > 0 ? (\n              <div className=\"space-y-4 py-2\">\n                {userBankAccounts.map((account) => (\n                  <div key={account.id} className=\"border border-border rounded-lg p-4\">\n                    <div className=\"flex justify-between items-start\">\n                      <div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Landmark className=\"h-5 w-5 text-primary\" />\n                          <h4 className=\"font-medium text-lg\">{account.bankName}</h4>\n                          {account.isDefault && (\n                            <Badge className=\"ml-2\">บัญชีหลัก</Badge>\n                          )}\n                        </div>\n                        <p className=\"text-muted-foreground mt-1\">{account.accountNumber}</p>\n                        <p className=\"mt-2 font-medium\">{account.accountName}</p>\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\"\n                          onClick={() => {\n                            setSelectedBankAccount(account);\n                            setShowEditBankAccountDialog(true);\n                          }}\n                        >\n                          <Edit className=\"h-4 w-4 mr-1\" />\n                          แก้ไข\n                        </Button>\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\" \n                          className=\"text-destructive border-destructive\"\n                          onClick={() => {\n                            if (confirm(`ต้องการลบบัญชีธนาคาร ${account.bankName} - ${account.accountNumber} ใช่หรือไม่?`)) {\n                              // ส่งคำขอไปยัง API เพื่อลบบัญชีธนาคาร\n                              apiRequest('DELETE', `/api/bank-accounts/${account.id}`)\n                                .then(res => {\n                                  if (!res.ok) throw new Error(\"Failed to delete bank account\");\n                                  // รีเฟรชข้อมูล\n                                  refetchBankAccounts();\n                                  // แสดงข้อความสำเร็จ\n                                  toast({\n                                    title: \"ลบบัญชีธนาคารสำเร็จ\",\n                                    description: `ลบบัญชีธนาคารของ ${selectedUser?.fullName} เรียบร้อยแล้ว`,\n                                  });\n                                })\n                                .catch(error => {\n                                  toast({\n                                    title: \"เกิดข้อผิดพลาด\",\n                                    description: error.message || \"ไม่สามารถลบบัญชีธนาคารได้\",\n                                    variant: \"destructive\"\n                                  });\n                                });\n                            }\n                          }}\n                        >\n                          <Trash2 className=\"h-4 w-4 mr-1\" />\n                          ลบ\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"py-8 text-center text-muted-foreground\">\n                <CreditCard className=\"h-10 w-10 mx-auto mb-3 opacity-30\" />\n                <p>ผู้ใช้งานยังไม่มีบัญชีธนาคาร</p>\n              </div>\n            )}\n            \n            <DialogFooter>\n              <Button variant=\"outline\" onClick={() => setShowBankAccountsDialog(false)}>ปิด</Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      )}\n      \n      {/* Edit Bank Account Dialog */}\n      {selectedBankAccount && (\n        <Dialog \n          open={showEditBankAccountDialog} \n          onOpenChange={(open) => {\n            setShowEditBankAccountDialog(open);\n            if (!open) {\n              // เมื่อปิด dialog ให้เปิด dialog จัดการบัญชีธนาคารไว้อยู่\n              setShowBankAccountsDialog(true);\n            }\n          }}\n        >\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>แก้ไขบัญชีธนาคาร</DialogTitle>\n              <DialogDescription>\n                แก้ไขข้อมูลบัญชีธนาคาร\n              </DialogDescription>\n            </DialogHeader>\n            \n            <div className=\"space-y-4 py-2\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-bank-name\">ชื่อธนาคาร</Label>\n                <Input id=\"edit-bank-name\" defaultValue={selectedBankAccount.bankName} />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-account-number\">เลขที่บัญชี</Label>\n                <Input id=\"edit-account-number\" defaultValue={selectedBankAccount.accountNumber} />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-account-name\">ชื่อบัญชี</Label>\n                <Input id=\"edit-account-name\" defaultValue={selectedBankAccount.accountName} />\n              </div>\n              \n              <div className=\"flex items-center space-x-2 mt-2\">\n                <input\n                  type=\"checkbox\"\n                  id=\"edit-is-default\"\n                  defaultChecked={selectedBankAccount.isDefault}\n                  className=\"h-4 w-4 border border-input rounded\"\n                />\n                <Label htmlFor=\"edit-is-default\" className=\"font-normal\">ตั้งเป็นบัญชีหลัก</Label>\n              </div>\n            </div>\n            \n            <DialogFooter>\n              <Button \n                variant=\"outline\" \n                onClick={() => {\n                  setShowEditBankAccountDialog(false);\n                  setShowBankAccountsDialog(true);\n                }}\n              >\n                ยกเลิก\n              </Button>\n              <Button \n                onClick={() => {\n                  // ดึงค่าจาก input\n                  const bankName = (document.getElementById('edit-bank-name') as HTMLInputElement)?.value;\n                  const accountNumber = (document.getElementById('edit-account-number') as HTMLInputElement)?.value;\n                  const accountName = (document.getElementById('edit-account-name') as HTMLInputElement)?.value;\n                  const isDefault = (document.getElementById('edit-is-default') as HTMLInputElement)?.checked;\n\n                  // ตรวจสอบข้อมูล\n                  if (!bankName || !accountNumber || !accountName) {\n                    toast({\n                      title: \"ข้อมูลไม่ครบถ้วน\",\n                      description: \"กรุณากรอกข้อมูลให้ครบถ้วน\",\n                      variant: \"destructive\"\n                    });\n                    return;\n                  }\n\n                  // สร้างข้อมูลสำหรับการอัพเดท\n                  const updateData = {\n                    bankName,\n                    accountNumber,\n                    accountName,\n                    isDefault\n                  };\n\n                  // ส่งคำขอไปยัง API\n                  apiRequest('PATCH', `/api/admin/bank-accounts/${selectedBankAccount.id}`, updateData)\n                    .then(res => {\n                      if (!res.ok) throw new Error(\"Failed to update bank account\");\n                      return res.json();\n                    })\n                    .then(updatedAccount => {\n                      // รีเฟรชข้อมูล\n                      refetchBankAccounts();\n                      // ปิด dialog\n                      setShowEditBankAccountDialog(false);\n                      // แสดงข้อความสำเร็จ\n                      toast({\n                        title: \"บันทึกเรียบร้อย\",\n                        description: `แก้ไขบัญชีธนาคารสำเร็จแล้ว`,\n                      });\n                    })\n                    .catch(error => {\n                      toast({\n                        title: \"เกิดข้อผิดพลาด\",\n                        description: error.message || \"ไม่สามารถแก้ไขบัญชีธนาคารได้\",\n                        variant: \"destructive\"\n                      });\n                    });\n                }}\n              >\n                บันทึกการเปลี่ยนแปลง\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      )}\n    </DesktopContainer>\n  );\n}","size_bytes":30601},"client/src/pages/auth-page.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useAuth, registerSchema } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport { loginSchema } from \"@shared/schema\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Loader2 } from \"lucide-react\";\nimport { MobileContainer } from \"@/components/layout/mobile-container\";\nimport { TopNavigation } from \"@/components/layout/top-navigation\";\n\nexport default function AuthPage() {\n  const [activeTab, setActiveTab] = useState<\"login\" | \"register\">(\"login\");\n  const { loginMutation, registerMutation, user } = useAuth();\n  const [, navigate] = useLocation();\n\n  // Redirect to home if already logged in\n  if (user) {\n    navigate(\"/\");\n    return null;\n  }\n\n  // สร้างคลาสร่วมสำหรับ Input และ FormLabel\n  const inputClasses = \"border-blue-400/50 focus-visible:ring-blue-500 bg-white/80 backdrop-blur-sm rounded-md shadow-sm\";\n  const labelClasses = \"text-blue-600 font-medium\";\n\n  return (\n    <MobileContainer>\n      <TopNavigation />\n      <div className=\"p-4 flex flex-col items-center justify-center min-h-[calc(100vh-64px)]\" \n            style={{\n              backgroundColor: \"#f5f7fa\",\n              backgroundSize: \"cover\",\n              backgroundPosition: \"center\",\n              backgroundRepeat: \"no-repeat\"\n            }}>\n        <Card className=\"w-full max-w-md mx-auto border border-blue-400/40 bg-white/90 backdrop-blur-lg shadow-xl rounded-xl\">\n          <CardHeader className=\"text-center\">\n            <div className=\"flex justify-center mb-2\">\n              <img \n                src=\"/Asia_Plus_Securities.png\" \n                alt=\"โลโก้ Asia Plus Securities\" \n                className=\"h-20\"\n              />\n            </div>\n            <CardTitle className=\"text-2xl text-blue-600\">\n              {activeTab === \"login\" ? \"ยินดีต้อนรับกลับ\" : \"สร้างบัญชีใหม่\"}\n            </CardTitle>\n            <CardDescription>\n              {activeTab === \"login\"\n                ? \"เข้าสู่ระบบเพื่อซื้อขายคริปโทเคอร์เรนซี\"\n                : \"เริ่มต้นการเดินทางในโลกคริปโทกับเรา\"}\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Tabs\n              defaultValue=\"login\"\n              value={activeTab}\n              onValueChange={(value) => setActiveTab(value as \"login\" | \"register\")}\n            >\n              <TabsList className=\"grid grid-cols-2 mb-4 bg-white/60 p-1 rounded-lg border border-blue-400/30\">\n                <TabsTrigger value=\"login\" className=\"data-[state=active]:bg-blue-600 data-[state=active]:text-white data-[state=inactive]:text-blue-600\">เข้าสู่ระบบ</TabsTrigger>\n                <TabsTrigger value=\"register\" className=\"data-[state=active]:bg-blue-600 data-[state=active]:text-white data-[state=inactive]:text-blue-600\">สมัครสมาชิก</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"login\">\n                <LoginForm \n                  isLoading={loginMutation.isPending} \n                  onSubmit={(data) => loginMutation.mutate(data)} \n                  inputClasses={inputClasses}\n                  labelClasses={labelClasses}\n                />\n              </TabsContent>\n\n              <TabsContent value=\"register\">\n                <RegisterForm \n                  isLoading={registerMutation.isPending} \n                  onSubmit={(data) => registerMutation.mutate(data)} \n                  inputClasses={inputClasses}\n                  labelClasses={labelClasses}\n                />\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n      </div>\n    </MobileContainer>\n  );\n}\n\nfunction LoginForm({ \n  onSubmit, \n  isLoading,\n  inputClasses,\n  labelClasses\n}: { \n  onSubmit: (data: z.infer<typeof loginSchema>) => void;\n  isLoading: boolean;\n  inputClasses: string;\n  labelClasses: string;\n}) {\n  const form = useForm<z.infer<typeof loginSchema>>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <FormField\n          control={form.control}\n          name=\"username\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className={labelClasses}>ชื่อผู้ใช้</FormLabel>\n              <FormControl>\n                <Input \n                  placeholder=\"กรอกชื่อผู้ใช้ของคุณ\" \n                  {...field} \n                  className={inputClasses} \n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"password\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className={labelClasses}>รหัสผ่าน</FormLabel>\n              <FormControl>\n                <Input type=\"password\" placeholder=\"••••••••\" {...field} className={inputClasses} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\" className=\"w-full bg-blue-600 hover:bg-blue-700\" disabled={isLoading}>\n          {isLoading ? (\n            <>\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              กำลังเข้าสู่ระบบ...\n            </>\n          ) : (\n            \"เข้าสู่ระบบ\"\n          )}\n        </Button>\n      </form>\n    </Form>\n  );\n}\n\nfunction RegisterForm({ \n  onSubmit, \n  isLoading,\n  inputClasses,\n  labelClasses\n}: { \n  onSubmit: (data: z.infer<typeof registerSchema>) => void;\n  isLoading: boolean;\n  inputClasses: string;\n  labelClasses: string;\n}) {\n  const form = useForm<z.infer<typeof registerSchema>>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      fullName: \"\",\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <FormField\n          control={form.control}\n          name=\"fullName\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className={labelClasses}>ชื่อ-นามสกุล</FormLabel>\n              <FormControl>\n                <Input placeholder=\"สมชาย ใจดี\" {...field} className={inputClasses} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"username\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className={labelClasses}>ชื่อผู้ใช้</FormLabel>\n              <FormControl>\n                <Input placeholder=\"somchai\" {...field} className={inputClasses} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className={labelClasses}>อีเมล</FormLabel>\n              <FormControl>\n                <Input type=\"email\" placeholder=\"somchai@example.com\" {...field} className={inputClasses} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"password\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className={labelClasses}>รหัสผ่าน</FormLabel>\n              <FormControl>\n                <Input type=\"password\" placeholder=\"••••••••\" {...field} className={inputClasses} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"confirmPassword\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className={labelClasses}>ยืนยันรหัสผ่าน</FormLabel>\n              <FormControl>\n                <Input type=\"password\" placeholder=\"••••••••\" {...field} className={inputClasses} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\" className=\"w-full bg-blue-600 hover:bg-blue-700\" disabled={isLoading}>\n          {isLoading ? (\n            <>\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              กำลังสร้างบัญชี...\n            </>\n          ) : (\n            \"สมัครสมาชิก\"\n          )}\n        </Button>\n      </form>\n    </Form>\n  );\n}\n","size_bytes":9682},"client/src/pages/home-page.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { MobileContainer } from \"@/components/layout/mobile-container\";\nimport { TopNavigation } from \"@/components/layout/top-navigation\";\nimport { BottomNavigation } from \"@/components/layout/bottom-navigation\";\nimport { useLocation } from \"wouter\";\nimport { CryptoList } from \"@/components/crypto-list\";\nimport { CryptoCurrency } from \"@shared/schema\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { format } from \"date-fns\";\nimport { motion } from \"framer-motion\";\nimport { MarketBarChart } from \"@/components/ui/market-bar-chart\";\nimport { AdSlider } from \"@/components/ad-slider\";\n\nexport default function HomePage() {\n  const [, navigate] = useLocation();\n  const [greeting, setGreeting] = useState(\"สวัสดี\");\n  \n  // กำหนดคำทักทายตามเวลา\n  useEffect(() => {\n    const hour = new Date().getHours();\n    if (hour >= 5 && hour < 12) {\n      setGreeting(\"สวัสดียามเช้า\");\n    } else if (hour >= 12 && hour < 18) {\n      setGreeting(\"สวัสดียามบ่าย\");\n    } else {\n      setGreeting(\"สวัสดียามค่ำ\");\n    }\n  }, []);\n  \n  // ดึงข้อมูล crypto จาก API\n  const { data: cryptos } = useQuery<CryptoCurrency[]>({\n    queryKey: [\"/api/crypto/market\"],\n  });\n  \n  const handleSelectCrypto = (crypto: CryptoCurrency) => {\n    navigate(`/trade?id=${crypto.id}`);\n  };\n  \n  // นับจำนวน crypto ที่ราคาขึ้น/ลง\n  const marketStats = {\n    up: cryptos?.filter(c => c.price_change_percentage_24h > 0).length || 0,\n    down: cryptos?.filter(c => c.price_change_percentage_24h < 0).length || 0,\n    total: cryptos?.length || 0\n  };\n  \n  return (\n    <MobileContainer>\n      <div className=\"pb-20\">\n        <TopNavigation />\n        \n        {/* ส่วนต้อนรับผู้ใช้ */}\n        <div className=\"bg-gradient-to-br from-primary/10 to-primary/5\">\n          {/* สไลด์โฆษณา */}\n          <motion.div \n            initial={{ y: 10, opacity: 0 }}\n            animate={{ y: 0, opacity: 1 }}\n            transition={{ duration: 0.5 }}\n            className=\"mt-3 w-full\"\n          >\n            <AdSlider />\n          </motion.div>\n        </div>\n        \n\n        \n        {/* รายชื่อคริปโตทั้งหมด */}\n        <motion.div \n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.5, delay: 0.6 }}\n          className=\"mt-6 w-full\"\n        >\n          <Separator className=\"mb-0\" />\n          <div className=\"bg-black dark:bg-gray-900 text-white p-3\">\n            <h2 className=\"font-semibold\">รายชื่อคริปโตทั้งหมด</h2>\n          </div>\n          \n          <div className=\"px-0\">\n            <CryptoList \n              onSelectCrypto={handleSelectCrypto}\n            />\n          </div>\n        </motion.div>\n      </div>\n      \n      <BottomNavigation />\n    </MobileContainer>\n  );\n}\n","size_bytes":3300},"client/src/pages/news-page.tsx":{"content":"import { useState } from \"react\";\nimport { MobileContainer } from \"@/components/layout/mobile-container\";\nimport { TopNavigation } from \"@/components/layout/top-navigation\";\nimport { BottomNavigation } from \"@/components/layout/bottom-navigation\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Clock, Share2, ChevronRight, Star, Newspaper, TrendingUp, Info, Lightbulb } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\n// รูปภาพที่ใช้ในข่าว - placeholder\nimport placeholderImage from \"@/assets/placeholder.svg\";\n\n// รูปภาพจาก Asia Plus Securities\nimport asiaPlus1 from \"@assets/462601494_2872254826265363_8039408733850352485_n.png\";\nimport asiaPlus2 from \"@assets/462884981_2876000042557508_8492050558665398215_n.jpg\";\nimport asiaPlus3 from \"@assets/463194602_2877123072445205_400290765798955497_n.png\";\nimport asiaPlus4 from \"@assets/463199942_2878974105593435_496135016965127313_n.png\";\nimport asiaPlus5 from \"@assets/463883305_2883588198465359_7359262269516360381_n.png\";\nimport asiaPlus6 from \"@assets/469260309_2928765837280928_8586244591954648374_n.png\";\nimport asiaPlus7 from \"@assets/475770537_2978550502302461_2285734999134478019_n.png\";\nimport asiaPlus8 from \"@assets/481193256_3003680446456133_1544279445465180161_n.jpg\";\nimport asiaPlus9 from \"@assets/481247539_3003680433122801_4202088951531435287_n.jpg\";\nimport asiaPlus10 from \"@assets/481265377_3001713059986205_2798521872516734220_n.jpg\";\nimport asiaPlus11 from \"@assets/485370924_3024524554371722_736050699631465514_n.jpg\";\nimport asiaPlus12 from \"@assets/35301242_1006247372866127_4893868337596989440_n.png\";\n\n// ข้อมูลข่าวสารแบบ mock ชั่วคราว\nconst mockNews = [\n  {\n    id: 1,\n    title: \"Bitcoin (BTC) ทะลุ 80,000 ดอลลาร์แล้ว นักวิเคราะห์คาดอาจแตะ 100,000 ดอลลาร์ในปีนี้\",\n    summary: \"Bitcoin ทำราคาสูงสุดใหม่ที่ 80,000 ดอลลาร์ หลังจากมีการปรับตัวในเชิงบวกอย่างต่อเนื่อง นักวิเคราะห์ชั้นนำคาดการณ์ว่าอาจจะแตะ 100,000 ดอลลาร์ภายในสิ้นปีนี้\",\n    imageUrl: asiaPlus8,\n    date: \"15 พ.ค. 2025\",\n    category: \"market\",\n    isFeatured: true,\n    isHot: true\n  },\n  {\n    id: 2,\n    title: \"Ethereum (ETH) เตรียมปรับปรุงโปรโตคอลใหญ่ คาดว่าลดค่าธรรมเนียมได้ถึง 90%\",\n    summary: \"Ethereum เตรียมอัปเดตโปรโตคอลครั้งใหญ่ซึ่งจะช่วยลดค่าธรรมเนียมการทำธุรกรรมลงได้ถึง 90% ผู้ใช้สามารถประหยัดเงินได้มากขึ้นในการใช้งานบนเครือข่าย\",\n    imageUrl: asiaPlus9,\n    date: \"14 พ.ค. 2025\",\n    category: \"tech\",\n    isFeatured: false,\n    isHot: true\n  },\n  {\n    id: 3,\n    title: \"เอเซีย พลัส เปิดตัวฟีเจอร์ใหม่ เพิ่มความปลอดภัยในการเข้าถึงบัญชี\",\n    summary: \"เอเซีย พลัส เตรียมเปิดตัวฟีเจอร์ใหม่ที่รองรับการยืนยันตัวตนด้วยเทคโนโลยีสมัยใหม่ ช่วยให้ผู้ใช้สามารถเข้าถึงบัญชีได้อย่างปลอดภัยมากขึ้น\",\n    imageUrl: asiaPlus11,\n    date: \"12 พ.ค. 2025\",\n    category: \"asiap\",\n    isFeatured: true,\n    isHot: false\n  },\n  {\n    id: 4,\n    title: \"กระทรวงการคลังไทยเตรียมออกกฎหมายภาษี NFT และสินทรัพย์ดิจิทัล\",\n    summary: \"กระทรวงการคลังไทยเตรียมออกกฎหมายภาษีสำหรับ NFT และสินทรัพย์ดิจิทัล คาดว่าจะมีผลบังคับใช้ในช่วงไตรมาสที่ 4 ของปีนี้ นักลงทุนควรเตรียมตัวรับมือ\",\n    imageUrl: asiaPlus5,\n    date: \"10 พ.ค. 2025\",\n    category: \"regulation\",\n    isFeatured: false,\n    isHot: false\n  },\n  {\n    id: 5,\n    title: \"เอเซีย พลัส Chain เปิดทดสอบการใช้ THB Programmable Payment บนบล็อกเชน\",\n    summary: \"เอเซีย พลัส Chain เปิดทดสอบการใช้ THB Programmable Payment ซึ่งเป็นสื่อกลางการชำระเงินด้วยเงินบาทบนระบบบล็อกเชน พร้อมให้ทดสอบการใช้งานภายในปี 2025\",\n    imageUrl: asiaPlus1,\n    date: \"8 พ.ค. 2025\",\n    category: \"regulation\",\n    isFeatured: false,\n    isHot: true\n  },\n  {\n    id: 6,\n    title: \"เอเซีย พลัส Exchange ประกาศเปิดเทรด Grass (GRASS) คริปโตน้องใหม่ล่าสุด\",\n    summary: \"เอเซีย พลัส Exchange ประกาศเปิดให้ฝาก-ถอน และเทรด Grass (GRASS) คริปโตเคอร์เรนซี่น้องใหม่ล่าสุด เริ่มฝาก-ถอนวันที่ 9 เมษายน และเปิดเทรด 10 เมษายน 2025\",\n    imageUrl: asiaPlus3,\n    date: \"5 พ.ค. 2025\",\n    category: \"market\",\n    isFeatured: false,\n    isHot: false\n  },\n  {\n    id: 7,\n    title: \"เอเซีย พลัส จัดงาน BLOCKATHON 2023 ชวนนักพัฒนามาร่วมสร้างนวัตกรรมบล็อกเชน\",\n    summary: \"เอเซีย พลัส จัดงาน BLOCKATHON 2023 เชิญชวนนักพัฒนาและผู้สนใจเทคโนโลยีบล็อกเชนมาร่วมสร้างสรรค์นวัตกรรมและแอปพลิเคชันบนเครือข่าย เอเซีย พลัส Chain\",\n    imageUrl: asiaPlus4,\n    date: \"3 พ.ค. 2025\",\n    category: \"asiap\",\n    isFeatured: true,\n    isHot: false\n  },\n  {\n    id: 8,\n    title: \"วิธีสมัคร เอเซีย พลัส และยืนยันตัวตนล่าสุด 2024 แบบละเอียดทุกขั้นตอน\",\n    summary: \"แนะนำวิธีการสมัครและยืนยันตัวตนบนแพลตฟอร์ม เอเซีย พลัส แบบละเอียดทุกขั้นตอน อัปเดตล่าสุดปี 2024 สำหรับผู้ที่สนใจเริ่มต้นลงทุนในคริปโตเคอร์เรนซี่\",\n    imageUrl: asiaPlus2,\n    date: \"1 พ.ค. 2025\",\n    category: \"market\",\n    isFeatured: false,\n    isHot: true\n  },\n  {\n    id: 9,\n    title: \"เอเซีย พลัส เตรียมเปิดตัวแอปพลิเคชันใหม่ ASP Smart พร้อมฟีเจอร์ที่น่าสนใจ\",\n    summary: \"เอเซีย พลัส ประกาศเตรียมเปิดตัวแอปพลิเคชันใหม่ ASP Smart ที่มีฟีเจอร์การวิเคราะห์ตลาดขั้นสูง พร้อมให้ผู้ใช้สามารถเข้าถึงการเทรดได้ทุกที่ทุกเวลา\",\n    imageUrl: asiaPlus2,\n    date: \"30 เม.ย. 2025\",\n    category: \"asiap\",\n    isFeatured: false,\n    isHot: true\n  },\n  {\n    id: 10,\n    title: \"เอเซีย พลัส NEXT เปิดตัว Digital Hub ศูนย์รวมบริการดิจิทัลครบวงจร\",\n    summary: \"เอเซีย พลัส NEXT เปิดตัวบริการ Digital Hub ศูนย์รวมบริการดิจิทัลครบวงจร ทั้งการลงทุน การเงิน และไลฟ์สไตล์ รองรับการใช้งานทั้งคริปโตและสินทรัพย์ดิจิทัลรูปแบบอื่น\",\n    imageUrl: asiaPlus6,\n    date: \"28 เม.ย. 2025\",\n    category: \"asiap\",\n    isFeatured: true,\n    isHot: false\n  }\n];\n\nexport default function NewsPage() {\n  const [activeTab, setActiveTab] = useState(\"all\");\n  \n  // กรองข่าวตามหมวดหมู่\n  const filteredNews = activeTab === \"all\" \n    ? mockNews \n    : mockNews.filter(news => news.category === activeTab);\n  \n  // แยกข่าวที่แนะนำ\n  const featuredNews = mockNews.filter(news => news.isFeatured);\n  \n  return (\n    <MobileContainer>\n      <TopNavigation />\n      \n      <div className=\"pb-20 w-full\">\n        {/* แบนเนอร์ข่าวเด่น */}\n        <div className=\"py-3 w-full\">\n          <h2 className=\"text-lg font-bold flex items-center mb-3 px-4\">\n            <Newspaper className=\"w-5 h-5 mr-2 text-primary\" />\n            ข่าวแนะนำ\n          </h2>\n          \n          <div className=\"space-y-4 px-0\">\n            {featuredNews.map(news => (\n              <Card key={news.id} className=\"overflow-hidden rounded-none border-x-0 shadow-none\">\n                <div className=\"relative h-48\">\n                  <img \n                    src={news.imageUrl} \n                    alt={news.title}\n                    className=\"absolute inset-0 w-full h-full object-cover\"\n                  />\n                  <div className=\"absolute inset-0 bg-gradient-to-t from-black/70 to-transparent\"></div>\n                  <div className=\"absolute bottom-0 left-0 right-0 p-4\">\n                    <h3 className=\"text-white font-bold text-lg line-clamp-2\">{news.title}</h3>\n                    <div className=\"flex items-center mt-2\">\n                      <Badge variant=\"secondary\" className=\"mr-2\">แนะนำ</Badge>\n                      {news.isHot && <Badge variant=\"destructive\">มาแรง</Badge>}\n                      <div className=\"flex items-center text-white/80 ml-auto text-xs\">\n                        <Clock className=\"w-3 h-3 mr-1\" />\n                        {news.date}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </Card>\n            ))}\n          </div>\n        </div>\n        \n        <Separator className=\"my-1\" />\n        \n        {/* แท็บหมวดหมู่ข่าว */}\n        <div className=\"w-full pt-2\">\n          <Tabs defaultValue=\"all\" value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n            <div className=\"px-4\">\n              <TabsList className=\"w-full flex overflow-x-auto mb-4\">\n                <TabsTrigger value=\"all\" className=\"flex-1\">ทั้งหมด</TabsTrigger>\n                <TabsTrigger value=\"market\" className=\"flex-1\">ตลาด</TabsTrigger>\n                <TabsTrigger value=\"tech\" className=\"flex-1\">เทคโนโลยี</TabsTrigger>\n                <TabsTrigger value=\"regulation\" className=\"flex-1\">กฎหมาย</TabsTrigger>\n                <TabsTrigger value=\"bitkub\" className=\"flex-1\">Bitkub</TabsTrigger>\n              </TabsList>\n            </div>\n\n            <TabsContent value={activeTab} className=\"mt-0\">\n              <div className=\"space-y-0\">\n                {filteredNews.map(news => (\n                  <Card key={news.id} className=\"overflow-hidden rounded-none border-x-0 border-t-0 shadow-none\">\n                    <div className=\"flex p-4\">\n                      <div className=\"w-1/3 pr-3\">\n                        <div className=\"relative h-24 rounded-lg overflow-hidden\">\n                          <img \n                            src={news.imageUrl} \n                            alt={news.title}\n                            className=\"absolute inset-0 w-full h-full object-cover\"\n                          />\n                        </div>\n                      </div>\n                      <div className=\"w-2/3\">\n                        <h3 className=\"font-bold line-clamp-2 text-sm\">{news.title}</h3>\n                        <p className=\"text-muted-foreground text-xs mt-1 line-clamp-2\">{news.summary}</p>\n                        <div className=\"flex items-center mt-2\">\n                          <div className=\"flex items-center text-muted-foreground text-xs\">\n                            <Clock className=\"w-3 h-3 mr-1\" />\n                            {news.date}\n                          </div>\n                          {news.isHot && (\n                            <Badge variant=\"destructive\" className=\"ml-2 text-[10px] h-5\">\n                              <TrendingUp className=\"w-3 h-3 mr-1\" /> มาแรง\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </Card>\n                ))}\n              </div>\n            </TabsContent>\n          </Tabs>\n        </div>\n        \n        <div className=\"px-4 mt-6\">\n          <Card className=\"bg-primary/5 border-primary/20\">\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm flex items-center\">\n                <Info className=\"w-4 h-4 mr-2\" />\n                เกี่ยวกับข่าวสาร\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-xs text-muted-foreground\">\n                ข่าวสารจะได้รับการอัพเดททุกวัน เพื่อให้คุณได้ทันต่อสถานการณ์ตลาดคริปโตเคอร์เรนซี่และข่าวสารล่าสุดเกี่ยวกับ Bitkub\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n        \n        <div className=\"px-4 mt-4 mb-6\">\n          <Card className=\"bg-yellow-50 border-yellow-200\">\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm flex items-center text-yellow-700\">\n                <Lightbulb className=\"w-4 h-4 mr-2\" />\n                คำแนะนำสำหรับนักลงทุน\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-xs text-yellow-700/80\">\n                ควรศึกษาข้อมูลและข่าวสารให้รอบด้านก่อนตัดสินใจลงทุน การลงทุนมีความเสี่ยง ผู้ลงทุนควรทำความเข้าใจก่อนตัดสินใจลงทุน\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n      \n      <BottomNavigation />\n    </MobileContainer>\n  );\n}","size_bytes":16058},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/profile-page.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { useEffect, useState } from \"react\";\nimport { TopNavigation } from \"@/components/layout/top-navigation\";\nimport { MobileContainer } from \"@/components/layout/mobile-container\";\nimport { BottomNavigation } from \"@/components/layout/bottom-navigation\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Loader2, User, Lock, ChevronRight, ChevronDown, Mail, Shield, History, CreditCard, \n  Gift, Users, Crown, Calendar, Newspaper, LogOut\n} from \"lucide-react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from \"@/components/ui/tabs\";\nimport { formatCurrency } from \"@/lib/formatters\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Trade } from \"@shared/schema\";\n\nexport default function ProfilePage() {\n  const { user, logoutMutation } = useAuth();\n  const { toast } = useToast();\n  const [isPasswordDialogOpen, setIsPasswordDialogOpen] = useState(false);\n  const [currentPassword, setCurrentPassword] = useState(\"\");\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  \n  // สถานะสำหรับการแก้ไขข้อมูลโปรไฟล์\n  const [isEditing, setIsEditing] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const [displayName, setDisplayName] = useState(\"\");\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  \n  // ดึงข้อมูลบัญชีธนาคาร\n  const { data: bankAccounts, isLoading: isBankAccountsLoading } = useQuery({\n    queryKey: [\"/api/bank-accounts\"],\n    queryFn: async () => {\n      const res = await fetch(\"/api/bank-accounts\");\n      if (!res.ok) return [];\n      return res.json();\n    }\n  });\n  \n  // เมื่อผู้ใช้เข้าสู่ระบบแล้ว ดึงข้อมูลโปรไฟล์มาแสดง\n  useEffect(() => {\n    if (user) {\n      setEmail(user.email || \"\");\n      setDisplayName(user.displayName || \"\");\n      setPhoneNumber(user.phoneNumber || \"\");\n    }\n  }, [user]);\n  \n  // Mutation สำหรับเปลี่ยนรหัสผ่าน\n  const changePasswordMutation = useMutation({\n    mutationFn: async (data: { currentPassword: string; newPassword: string }) => {\n      const res = await apiRequest(\"POST\", \"/api/user/change-password\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"เปลี่ยนรหัสผ่านสำเร็จ\",\n        description: \"รหัสผ่านของคุณได้รับการเปลี่ยนเรียบร้อยแล้ว\",\n      });\n      setIsPasswordDialogOpen(false);\n      resetPasswordForm();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"เกิดข้อผิดพลาด\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n  \n  // Mutation สำหรับอัพเดทข้อมูลโปรไฟล์\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: { email: string; displayName: string; phoneNumber: string }) => {\n      const res = await apiRequest(\"PATCH\", \"/api/user/profile\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n      toast({\n        title: \"อัพเดทโปรไฟล์สำเร็จ\",\n        description: \"ข้อมูลโปรไฟล์ของคุณได้รับการอัพเดทเรียบร้อยแล้ว\",\n      });\n      setIsEditing(false);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"เกิดข้อผิดพลาด\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n  \n  const handleChangePassword = () => {\n    // ตรวจสอบความถูกต้องของข้อมูล\n    if (!currentPassword || !newPassword || !confirmPassword) {\n      toast({\n        title: \"ข้อมูลไม่ครบถ้วน\",\n        description: \"กรุณากรอกข้อมูลให้ครบทุกช่อง\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (newPassword !== confirmPassword) {\n      toast({\n        title: \"รหัสผ่านไม่ตรงกัน\",\n        description: \"รหัสผ่านใหม่และยืนยันรหัสผ่านไม่ตรงกัน กรุณาตรวจสอบอีกครั้ง\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (newPassword.length < 6) {\n      toast({\n        title: \"รหัสผ่านสั้นเกินไป\",\n        description: \"รหัสผ่านต้องมีความยาวอย่างน้อย 6 ตัวอักษร\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    changePasswordMutation.mutate({\n      currentPassword,\n      newPassword,\n    });\n  };\n  \n  const handleUpdateProfile = () => {\n    if (!email) {\n      toast({\n        title: \"ข้อมูลไม่ครบถ้วน\",\n        description: \"กรุณากรอกอีเมล\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    // ตรวจสอบรูปแบบอีเมล\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(email)) {\n      toast({\n        title: \"อีเมลไม่ถูกต้อง\",\n        description: \"กรุณากรอกอีเมลให้ถูกต้อง\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    updateProfileMutation.mutate({\n      email,\n      displayName,\n      phoneNumber,\n    });\n  };\n  \n  const resetPasswordForm = () => {\n    setCurrentPassword(\"\");\n    setNewPassword(\"\");\n    setConfirmPassword(\"\");\n  };\n  \n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  if (!user) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  return (\n    <MobileContainer>\n      <TopNavigation />\n      \n      {/* ส่วนแสดงข้อมูลโปรไฟล์พร้อมพื้นหลัง */}\n      <div className=\"relative overflow-hidden\">\n        {/* ภาพพื้นหลัง */}\n        <div className=\"absolute inset-0 w-full h-full\">\n          <img \n            src=\"https://img.freepik.com/premium-photo/bitcoin-blockchain-crypto-currency-digital-encryption-digital-money-exchange-technology-network-connections_24070-1004.jpg\" \n            alt=\"Crypto Background\" \n            className=\"w-full h-full object-cover\"\n          />\n          <div className=\"absolute inset-0 bg-gradient-to-b from-black/10 to-black/60\"></div>\n        </div>\n        \n        {/* ข้อมูลโปรไฟล์ */}\n        <div className=\"relative z-10 flex flex-col items-center py-8 px-4\">\n          <Avatar className=\"h-24 w-24 mb-3 ring-4 ring-primary/30 shadow-lg\">\n            <AvatarImage src={user.avatarUrl || undefined} alt={user.username} />\n            <AvatarFallback className=\"text-2xl bg-primary/80 text-primary-foreground\">\n              {user.username?.charAt(0).toUpperCase() || \"U\"}\n            </AvatarFallback>\n          </Avatar>\n          <h2 className=\"text-xl font-bold text-white mt-2 drop-shadow-md\">{user.username}</h2>\n          <p className=\"text-white/90 drop-shadow-md\">{user.email || \"ไม่ได้ระบุอีเมล\"}</p>\n          {user.role === \"admin\" && (\n            <div className=\"mt-2 bg-gradient-to-r from-primary to-primary/80 text-primary-foreground px-4 py-1 rounded-full text-xs font-medium shadow-lg border border-primary/30 flex items-center\">\n              <Shield className=\"h-3 w-3 mr-1\" />\n              ผู้ดูแลระบบ\n            </div>\n          )}\n        </div>\n      </div>\n      \n      <div className=\"px-4 pb-20 mt-4\">\n        <Separator className=\"mb-4\" />\n        \n        {/* ส่วนแสดงข้อมูลต่างๆในรูปแบบ Accordion */}\n        <Accordion type=\"single\" collapsible className=\"w-full\">\n          {/* ส่วนข้อมูลสมาชิก */}\n          <AccordionItem value=\"user-info\">\n            <AccordionTrigger className=\"px-3 py-3 bg-muted-foreground/5 rounded-lg font-medium\">\n              <div className=\"flex items-center\">\n                <User className=\"mr-2 h-5 w-5\" />\n                <span>ข้อมูลสมาชิก</span>\n              </div>\n            </AccordionTrigger>\n            <AccordionContent className=\"pt-3\">\n              <div className=\"rounded-lg border overflow-hidden\">\n                <div className=\"bg-muted py-2 px-3 flex justify-between items-center\">\n                  <span className=\"font-medium\">ข้อมูลส่วนตัว</span>\n                  <Button \n                    variant={isEditing ? \"default\" : \"outline\"} \n                    size=\"sm\"\n                    onClick={() => setIsEditing(!isEditing)}\n                  >\n                    {isEditing ? \"บันทึก\" : \"แก้ไข\"}\n                  </Button>\n                </div>\n                \n                <div className=\"p-3\">\n                  {isEditing ? (\n                    <div className=\"space-y-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"email\">อีเมล</Label>\n                        <Input\n                          id=\"email\"\n                          type=\"email\"\n                          value={email}\n                          onChange={(e) => setEmail(e.target.value)}\n                          placeholder=\"อีเมล\"\n                        />\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"username\">ชื่อผู้ใช้</Label>\n                        <Input\n                          id=\"username\"\n                          type=\"text\"\n                          value={user.username}\n                          disabled\n                          className=\"bg-muted\"\n                        />\n                        <p className=\"text-xs text-muted-foreground\">ไม่สามารถเปลี่ยนแปลงได้</p>\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"displayName\">ชื่อที่แสดง</Label>\n                        <Input\n                          id=\"displayName\"\n                          type=\"text\"\n                          value={displayName}\n                          onChange={(e) => setDisplayName(e.target.value)}\n                          placeholder=\"ชื่อที่แสดง\"\n                        />\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"phoneNumber\">เบอร์โทรศัพท์</Label>\n                        <Input\n                          id=\"phoneNumber\"\n                          type=\"tel\"\n                          value={phoneNumber}\n                          onChange={(e) => setPhoneNumber(e.target.value.replace(/[^0-9]/g, ''))}\n                          placeholder=\"เบอร์โทรศัพท์\"\n                        />\n                      </div>\n                      \n                      <div className=\"flex justify-end space-x-2 mt-4\">\n                        <Button variant=\"outline\" onClick={() => setIsEditing(false)}>\n                          ยกเลิก\n                        </Button>\n                        <Button \n                          onClick={handleUpdateProfile}\n                          disabled={updateProfileMutation.isPending}\n                        >\n                          {updateProfileMutation.isPending ? (\n                            <><Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> กำลังบันทึก</>\n                          ) : (\n                            \"บันทึกข้อมูล\"\n                          )}\n                        </Button>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center\">\n                        <User className=\"h-5 w-5 mr-3 text-muted-foreground\" />\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">ชื่อผู้ใช้</p>\n                          <p>{user.username}</p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center\">\n                        <Mail className=\"h-5 w-5 mr-3 text-muted-foreground\" />\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">อีเมล</p>\n                          <p>{user.email || \"ไม่ได้ระบุ\"}</p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center\">\n                        <User className=\"h-5 w-5 mr-3 text-muted-foreground\" />\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">ชื่อที่แสดง</p>\n                          <p>{user.displayName || \"ไม่ได้ระบุ\"}</p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center\">\n                        <Mail className=\"h-5 w-5 mr-3 text-muted-foreground\" />\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">เบอร์โทรศัพท์</p>\n                          <p>{user.phoneNumber || \"ไม่ได้ระบุ\"}</p>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </AccordionContent>\n          </AccordionItem>\n\n          {/* ส่วนบัญชีธนาคาร */}\n          <AccordionItem value=\"bank-info\" className=\"mt-2\">\n            <AccordionTrigger className=\"px-3 py-3 bg-muted-foreground/5 rounded-lg font-medium\">\n              <div className=\"flex items-center\">\n                <CreditCard className=\"mr-2 h-5 w-5\" />\n                <span>บัญชีธนาคาร</span>\n              </div>\n            </AccordionTrigger>\n            <AccordionContent>\n              <div className=\"space-y-4\">\n                {/* ดึงข้อมูลบัญชีธนาคารจาก API */}\n                <div className=\"rounded-lg border overflow-hidden\">\n                  <div className=\"bg-muted py-2 px-3 flex justify-between items-center\">\n                    <span className=\"font-medium\">บัญชีธนาคารที่ลงทะเบียน</span>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => window.location.href = \"/wallet\"}\n                    >\n                      จัดการ\n                    </Button>\n                  </div>\n                  \n                  {isBankAccountsLoading ? (\n                    <div className=\"p-8 flex justify-center\">\n                      <Loader2 className=\"h-6 w-6 animate-spin text-muted-foreground\" />\n                    </div>\n                  ) : !bankAccounts || bankAccounts.length === 0 ? (\n                    <div className=\"p-4 text-center text-muted-foreground\">\n                      <p>ยังไม่มีบัญชีธนาคารที่ลงทะเบียน</p>\n                    </div>\n                  ) : (\n                    <div className=\"p-3 divide-y\">\n                      {bankAccounts.map((account: any) => (\n                        <div className=\"py-2\" key={account.id}>\n                          <div className=\"font-medium\">{account.bankName}</div>\n                          <div className=\"text-sm text-muted-foreground\">{account.accountNumber}</div>\n                          {account.isDefault && (\n                            <Badge variant=\"outline\" className=\"mt-1\">บัญชีหลัก</Badge>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n                \n                <div className=\"text-sm text-muted-foreground\">\n                  <p>คุณสามารถลงทะเบียนบัญชีธนาคารได้สูงสุด 2 บัญชี</p>\n                  <p>หากต้องการเปลี่ยนแปลงข้อมูลบัญชี กรุณาติดต่อเจ้าหน้าที่</p>\n                </div>\n                \n                <Button \n                  variant=\"outline\" \n                  className=\"w-full\"\n                  onClick={() => window.location.href = \"/wallet\"}\n                >\n                  เพิ่ม/แก้ไขบัญชีธนาคาร\n                </Button>\n              </div>\n            </AccordionContent>\n          </AccordionItem>\n          \n          {/* ส่วนความปลอดภัย */}\n          <AccordionItem value=\"security\" className=\"mt-2\">\n            <AccordionTrigger className=\"px-3 py-3 bg-muted-foreground/5 rounded-lg font-medium\">\n              <div className=\"flex items-center\">\n                <Lock className=\"mr-2 h-5 w-5\" />\n                <span>ความปลอดภัย</span>\n              </div>\n            </AccordionTrigger>\n            <AccordionContent>\n              <div className=\"rounded-lg border overflow-hidden\">\n                <div className=\"divide-y\">\n                  <div \n                    className=\"flex justify-between items-center p-3 cursor-pointer\"\n                    onClick={() => setIsPasswordDialogOpen(true)}\n                  >\n                    <div className=\"flex items-center\">\n                      <Lock className=\"h-5 w-5 mr-3 text-muted-foreground\" />\n                      <span>เปลี่ยนรหัสผ่าน</span>\n                    </div>\n                    <ChevronRight className=\"h-5 w-5 text-muted-foreground\" />\n                  </div>\n                  \n                  {user.role === \"admin\" && (\n                    <div \n                      className=\"flex justify-between items-center p-3 cursor-pointer\"\n                      onClick={() => window.location.href = \"/admin\"}\n                    >\n                      <div className=\"flex items-center\">\n                        <Shield className=\"h-5 w-5 mr-3 text-muted-foreground\" />\n                        <span>หน้าผู้ดูแลระบบ</span>\n                      </div>\n                      <ChevronRight className=\"h-5 w-5 text-muted-foreground\" />\n                    </div>\n                  )}\n                </div>\n              </div>\n            </AccordionContent>\n          </AccordionItem>\n        \n          {/* ส่วนประวัติการเทรด */}\n          <AccordionItem value=\"trades\" className=\"mt-2\">\n            <AccordionTrigger className=\"px-3 py-3 bg-muted-foreground/5 rounded-lg font-medium\">\n              <div className=\"flex items-center\">\n                <History className=\"mr-2 h-5 w-5\" />\n                <span>ประวัติการเทรด</span>\n              </div>\n            </AccordionTrigger>\n            <AccordionContent>\n              <div className=\"rounded-lg border overflow-hidden\">\n                <div className=\"bg-muted py-2 px-3\">\n                  <span className=\"font-medium\">รายการล่าสุด</span>\n                </div>\n                \n                <div className=\"divide-y\">\n                  {/* ทดสอบแสดงข้อมูล */}\n                  <div className=\"p-3\">\n                    <div className=\"font-medium text-sm\">Bitcoin (BTC)</div>\n                    <div className=\"text-sm text-muted-foreground\">14/05/2025, 10:25</div>\n                    <div className=\"flex items-center mt-1\">\n                      <div className=\"mr-2\">\n                        <Badge variant=\"outline\" className=\"bg-green-50\">\n                          ซื้อขึ้น\n                        </Badge>\n                      </div>\n                      <div className=\"text-sm\">{formatCurrency(1500)}</div>\n                      <div className=\"ml-auto\">\n                        <Badge className=\"bg-green-500 hover:bg-green-600 text-white\">\n                          ชนะ\n                        </Badge>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"p-3\">\n                    <div className=\"font-medium text-sm\">Ethereum (ETH)</div>\n                    <div className=\"text-sm text-muted-foreground\">14/05/2025, 09:15</div>\n                    <div className=\"flex items-center mt-1\">\n                      <div className=\"mr-2\">\n                        <Badge variant=\"outline\" className=\"bg-red-50\">\n                          ซื้อลง\n                        </Badge>\n                      </div>\n                      <div className=\"text-sm\">{formatCurrency(2000)}</div>\n                      <div className=\"ml-auto\">\n                        <Badge variant=\"destructive\">\n                          แพ้\n                        </Badge>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"p-3 bg-muted/20\">\n                  <Button \n                    variant=\"outline\" \n                    className=\"w-full\"\n                    onClick={() => window.location.href = \"/trades/history\"}\n                  >\n                    ดูประวัติทั้งหมด\n                  </Button>\n                </div>\n              </div>\n            </AccordionContent>\n          </AccordionItem>\n          \n          {/* ส่วนโปรโมชั่น */}\n          <AccordionItem value=\"promotions\" className=\"mt-2\">\n            <AccordionTrigger className=\"px-3 py-3 bg-muted-foreground/5 rounded-lg font-medium\">\n              <div className=\"flex items-center\">\n                <Gift className=\"mr-2 h-5 w-5\" />\n                <span>โปรโมชั่น</span>\n              </div>\n            </AccordionTrigger>\n            <AccordionContent>\n              <div className=\"rounded-lg border overflow-hidden\">\n                <div className=\"bg-muted py-2 px-3\">\n                  <span className=\"font-medium\">โปรโมชั่นที่ใช้ได้</span>\n                </div>\n                \n                <div className=\"p-3\">\n                  <div className=\"rounded-lg border p-3 mb-3\">\n                    <div className=\"flex justify-between items-start\">\n                      <div>\n                        <div className=\"font-medium\">โบนัสวันเกิด</div>\n                        <div className=\"text-sm text-muted-foreground\">รับโบนัส 15% เมื่อเติมเงินในเดือนเกิด</div>\n                      </div>\n                      <Badge>มีใหม่</Badge>\n                    </div>\n                  </div>\n                  \n                  <div className=\"rounded-lg border p-3\">\n                    <div className=\"flex justify-between items-start\">\n                      <div>\n                        <div className=\"font-medium\">โบนัสเติมเงิน 10%</div>\n                        <div className=\"text-sm text-muted-foreground\">รับโบนัส 10% เมื่อเติมเงินขั้นต่ำ 5,000 บาท</div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </AccordionContent>\n          </AccordionItem>\n        </Accordion>\n        \n        {/* ปุ่มออกจากระบบ */}\n        <div className=\"mt-6\">\n          <Button \n            variant=\"outline\" \n            className=\"w-full text-red-500 hover:text-red-600 border-red-100 hover:border-red-200 hover:bg-red-50\"\n            onClick={handleLogout}\n            disabled={logoutMutation.isPending}\n          >\n            {logoutMutation.isPending ? (\n              <><Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> กำลังออกจากระบบ</>\n            ) : (\n              <><LogOut className=\"mr-2 h-4 w-4\" /> ออกจากระบบ</>\n            )}\n          </Button>\n        </div>\n      </div>\n      \n      <BottomNavigation />\n      \n      {/* Dialog สำหรับเปลี่ยนรหัสผ่าน */}\n      <Dialog open={isPasswordDialogOpen} onOpenChange={setIsPasswordDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>เปลี่ยนรหัสผ่าน</DialogTitle>\n            <DialogDescription>\n              กรุณากรอกรหัสผ่านปัจจุบันและรหัสผ่านใหม่\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4 py-2\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"current-password\">รหัสผ่านปัจจุบัน</Label>\n              <Input\n                id=\"current-password\"\n                type=\"password\"\n                value={currentPassword}\n                onChange={(e) => setCurrentPassword(e.target.value)}\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"new-password\">รหัสผ่านใหม่</Label>\n              <Input\n                id=\"new-password\"\n                type=\"password\"\n                value={newPassword}\n                onChange={(e) => setNewPassword(e.target.value)}\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"confirm-password\">ยืนยันรหัสผ่านใหม่</Label>\n              <Input\n                id=\"confirm-password\"\n                type=\"password\"\n                value={confirmPassword}\n                onChange={(e) => setConfirmPassword(e.target.value)}\n              />\n            </div>\n          </div>\n          \n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setIsPasswordDialogOpen(false);\n                resetPasswordForm();\n              }}\n            >\n              ยกเลิก\n            </Button>\n            <Button \n              onClick={handleChangePassword}\n              disabled={changePasswordMutation.isPending}\n            >\n              {changePasswordMutation.isPending ? (\n                <><Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> กำลังบันทึก</>\n              ) : (\n                \"เปลี่ยนรหัสผ่าน\"\n              )}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </MobileContainer>\n  );\n}","size_bytes":28788},"client/src/pages/trade-history-page.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { useState } from \"react\";\nimport { TopNavigation } from \"@/components/layout/top-navigation\";\nimport { MobileContainer } from \"@/components/layout/mobile-container\";\nimport { BottomNavigation } from \"@/components/layout/bottom-navigation\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Loader2, TrendingUp, TrendingDown, Clock } from \"lucide-react\";\nimport { formatCurrency, formatShortDate } from \"@/lib/formatters\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Trade } from \"@shared/schema\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { TradeCountdown } from \"@/components/trade-countdown\";\n\nexport default function TradeHistoryPage() {\n  const { user } = useAuth();\n\n  // ดึงข้อมูลประวัติการเทรด\n  const {\n    data: trades,\n    isLoading: isLoadingTrades,\n    error: tradesError,\n  } = useQuery<Trade[]>({\n    queryKey: [\"/api/trades\"],\n    refetchInterval: 15000, // รีเฟรชทุก 15 วินาที เพื่อติดตามสถานะ\n  });\n\n  // ฟังก์ชันแปลงผลลัพธ์ให้เป็นภาษาไทย\n  const getResultText = (result: string | null | undefined) => {\n    if (!result) return \"\";\n    switch (result) {\n      case \"win\":\n        return \"✅ ชนะ\";\n      case \"lose\":\n        return \"❌ แพ้\";\n      case \"draw\":\n        return \"🔄 เสมอ\";\n      default:\n        return result;\n    }\n  };\n\n  // ฟังก์ชันแปลงสถานะให้เป็นภาษาไทย\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return \"กำลังทำรายการ\";\n      case \"completed\":\n        return \"เสร็จสิ้น\";\n      case \"cancelled\":\n        return \"ยกเลิก\";\n      default:\n        return status;\n    }\n  };\n\n  // ฟังก์ชันแปลงทิศทางให้เป็นภาษาไทย\n  const getDirectionText = (direction: string) => {\n    switch (direction) {\n      case \"up\":\n        return \"ขึ้น\";\n      case \"down\":\n        return \"ลง\";\n      default:\n        return direction;\n    }\n  };\n\n  // ฟังก์ชันแปลงระยะเวลา (วินาที) เป็นรูปแบบที่อ่านง่าย\n  const formatDuration = (seconds: number) => {\n    if (isNaN(seconds)) {\n      return \"ไม่ระบุ\";\n    }\n\n    // แปลงเป็นรูปแบบนาที:วินาที\n    if (seconds < 60) {\n      return `${seconds} วินาที`;\n    } else {\n      const minutes = Math.floor(seconds / 60);\n      const remainingSeconds = seconds % 60;\n      return remainingSeconds > 0\n        ? `${minutes} นาที ${remainingSeconds} วินาที`\n        : `${minutes} นาที`;\n    }\n  };\n\n  return (\n    <MobileContainer>\n      <TopNavigation title=\"\" />\n\n      <div className=\"flex-1 overflow-y-auto\">\n        <Card className=\"rounded-none border-x-0 shadow-none\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-medium mb-3\">ประวัติการเทรด</h3>\n\n            {isLoadingTrades ? (\n              <div className=\"flex justify-center items-center py-8\">\n                <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n              </div>\n            ) : tradesError ? (\n              <div className=\"text-center text-red-500 py-8\">\n                เกิดข้อผิดพลาดในการโหลดข้อมูล\n              </div>\n            ) : !trades || trades.length === 0 ? (\n              <div className=\"text-center text-muted-foreground py-8\">\n                ยังไม่มีประวัติการเทรด\n              </div>\n            ) : (\n              <Tabs defaultValue=\"all\" className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-3\">\n                  <TabsTrigger value=\"all\">ทั้งหมด ({trades.length})</TabsTrigger>\n                  <TabsTrigger value=\"active\">\n                    กำลังดำเนิน (\n                    {trades.filter((t) => t.status === \"active\").length})\n                  </TabsTrigger>\n                  <TabsTrigger value=\"completed\">\n                    เสร็จสิ้น (\n                    {trades.filter((t) => t.status === \"completed\").length})\n                  </TabsTrigger>\n                </TabsList>\n\n                {/* แท็บแสดงธุรกรรมทั้งหมด */}\n                <TabsContent value=\"all\" className=\"space-y-3 mt-2\">\n                  {[...trades]\n                    .sort(\n                      (a, b) =>\n                        new Date(b.createdAt).getTime() -\n                        new Date(a.createdAt).getTime(),\n                    )\n                    .map((trade) => (\n                      <div key={trade.id} className=\"border rounded-lg p-3\">\n                        <div className=\"flex justify-between items-start\">\n                          <div className=\"flex items-center\">\n                            {trade.direction === \"up\" ? (\n                              <div className=\"rounded-full bg-green-100 p-2 mr-3\">\n                                <TrendingUp className=\"h-4 w-4 text-green-600\" />\n                              </div>\n                            ) : (\n                              <div className=\"rounded-full bg-red-100 p-2 mr-3\">\n                                <TrendingDown className=\"h-4 w-4 text-red-600\" />\n                              </div>\n                            )}\n                            <div>\n                              <div className=\"font-medium\">\n                                {trade.cryptoId.charAt(0).toUpperCase() +\n                                  trade.cryptoId.slice(1)}\n                              </div>\n                              <div className=\"text-sm text-muted-foreground\">\n                                {formatShortDate(trade.createdAt)}\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <div className=\"font-medium\">\n                              ฿\n                              {parseFloat(trade.amount).toLocaleString(\n                                \"th-TH\",\n                                {\n                                  minimumFractionDigits: 2,\n                                  maximumFractionDigits: 2,\n                                },\n                              )}\n                            </div>\n                            <Badge\n                              className={`mt-1 ${\n                                trade.result === \"win\"\n                                  ? \"bg-green-500 hover:bg-green-600 text-white\"\n                                  : trade.result === \"lose\"\n                                    ? \"bg-red-500 hover:bg-red-600 text-white\"\n                                    : \"\"\n                              }`}\n                              variant={\n                                trade.status === \"active\"\n                                  ? \"outline\"\n                                  : trade.result === \"win\"\n                                    ? \"default\"\n                                    : trade.result === \"lose\"\n                                      ? \"destructive\"\n                                      : \"secondary\"\n                              }\n                            >\n                              {trade.status === \"active\"\n                                ? getStatusText(trade.status)\n                                : getResultText(trade.result)}\n                            </Badge>\n                          </div>\n                        </div>\n                        <div className=\"mt-2 text-sm grid grid-cols-2 gap-2\">\n                          <div>\n                            <span className=\"text-muted-foreground\">\n                              ทิศทาง:\n                            </span>{\" \"}\n                            {getDirectionText(trade.direction)}\n                          </div>\n                          <div>\n                            <span className=\"text-muted-foreground\">\n                              ราคาเข้า:\n                            </span>{\" \"}\n                            {formatCurrency(parseFloat(trade.entryPrice))}\n                          </div>\n                          <div>\n                            <span className=\"text-muted-foreground\">\n                              ระยะเวลา:\n                            </span>{\" \"}\n                            {formatDuration(trade.duration)}\n                          </div>\n                          {trade.result && (\n                            <div>\n                              <span className=\"text-muted-foreground\">\n                                สถานะ:\n                              </span>{\" \"}\n                              {getResultText(trade.result)}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                </TabsContent>\n\n                {/* แท็บแสดงเฉพาะการเทรดที่กำลังทำรายการ */}\n                <TabsContent value=\"active\" className=\"space-y-4 mt-2\">\n                  {trades\n                    .filter((trade) => trade.status === \"active\")\n                    .sort(\n                      (a, b) =>\n                        new Date(b.createdAt).getTime() -\n                        new Date(a.createdAt).getTime(),\n                    )\n                    .map((trade) => {\n                      // คำนวณเวลาสิ้นสุดการเทรด\n                      const endTime = new Date(\n                        new Date(trade.createdAt).getTime() + trade.duration * 1000\n                      );\n                      \n                      return (\n                        <div key={trade.id} className=\"space-y-3\">\n                          {/* ข้อมูลพื้นฐานของการเทรด */}\n                          <div className=\"border rounded-lg p-3\">\n                            <div className=\"flex justify-between items-start\">\n                              <div className=\"flex items-center\">\n                                {trade.direction === \"up\" ? (\n                                  <div className=\"rounded-full bg-green-100 p-2 mr-3\">\n                                    <TrendingUp className=\"h-4 w-4 text-green-600\" />\n                                  </div>\n                                ) : (\n                                  <div className=\"rounded-full bg-red-100 p-2 mr-3\">\n                                    <TrendingDown className=\"h-4 w-4 text-red-600\" />\n                                  </div>\n                                )}\n                                <div>\n                                  <div className=\"font-medium\">\n                                    {trade.cryptoId.charAt(0).toUpperCase() +\n                                      trade.cryptoId.slice(1)}\n                                  </div>\n                                  <div className=\"text-sm text-muted-foreground flex items-center gap-1\">\n                                    <Clock className=\"h-3 w-3\" />\n                                    {formatShortDate(trade.createdAt)}\n                                  </div>\n                                </div>\n                              </div>\n                              <div className=\"text-right\">\n                                <div className=\"font-medium\">\n                                  ฿\n                                  {parseFloat(trade.amount).toLocaleString(\n                                    \"th-TH\",\n                                    {\n                                      minimumFractionDigits: 2,\n                                      maximumFractionDigits: 2,\n                                    },\n                                  )}\n                                </div>\n                                <Badge variant=\"outline\" className=\"bg-blue-50 text-blue-700 border-blue-200\">\n                                  {getStatusText(trade.status)}\n                                </Badge>\n                              </div>\n                            </div>\n                            \n                            <div className=\"mt-3 pt-3 border-t\">\n                              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                                <div>\n                                  <span className=\"text-muted-foreground\">ทิศทาง:</span>{\" \"}\n                                  <span className={`font-medium ${\n                                    trade.direction === \"up\" ? \"text-green-600\" : \"text-red-600\"\n                                  }`}>\n                                    {getDirectionText(trade.direction)}\n                                  </span>\n                                </div>\n                                <div>\n                                  <span className=\"text-muted-foreground\">ราคาเข้า:</span>{\" \"}\n                                  <span className=\"font-medium\">\n                                    {formatCurrency(parseFloat(trade.entryPrice))}\n                                  </span>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                          \n                          {/* การนับเวลาถอยหลัง */}\n                          <TradeCountdown\n                            duration={trade.duration}\n                            entryPrice={parseFloat(trade.entryPrice)}\n                            amount={parseFloat(trade.amount)}\n                            direction={trade.direction as \"up\" | \"down\"}\n                            profitPercentage={30} // เปอร์เซ็นต์กำไร (สามารถปรับแก้ได้)\n                            cryptoSymbol={trade.cryptoId.toUpperCase()}\n                            endTime={endTime}\n                          />\n                        </div>\n                      );\n                    })}\n                  {trades.filter((t) => t.status === \"active\").length === 0 && (\n                    <div className=\"text-center text-muted-foreground py-8\">\n                      ไม่มีรายการที่กำลังทำรายการอยู่\n                    </div>\n                  )}\n                </TabsContent>\n\n                {/* แท็บแสดงเฉพาะการเทรดที่เสร็จสิ้น */}\n                <TabsContent value=\"completed\" className=\"space-y-3 mt-2\">\n                  {trades\n                    .filter((trade) => trade.status === \"completed\")\n                    .sort(\n                      (a, b) =>\n                        new Date(b.createdAt).getTime() -\n                        new Date(a.createdAt).getTime(),\n                    )\n                    .map((trade) => (\n                      <div key={trade.id} className=\"border rounded-lg p-3\">\n                        <div className=\"flex justify-between items-start\">\n                          <div className=\"flex items-center\">\n                            {trade.direction === \"up\" ? (\n                              <div className=\"rounded-full bg-green-100 p-2 mr-3\">\n                                <TrendingUp className=\"h-4 w-4 text-green-600\" />\n                              </div>\n                            ) : (\n                              <div className=\"rounded-full bg-red-100 p-2 mr-3\">\n                                <TrendingDown className=\"h-4 w-4 text-red-600\" />\n                              </div>\n                            )}\n                            <div>\n                              <div className=\"font-medium\">\n                                {trade.cryptoId.charAt(0).toUpperCase() +\n                                  trade.cryptoId.slice(1)}\n                              </div>\n                              <div className=\"text-sm text-muted-foreground\">\n                                {formatShortDate(trade.createdAt)}\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <div className=\"font-medium\">\n                              ฿\n                              {parseFloat(trade.amount).toLocaleString(\n                                \"th-TH\",\n                                {\n                                  minimumFractionDigits: 2,\n                                  maximumFractionDigits: 2,\n                                },\n                              )}\n                            </div>\n                            <Badge\n                              className={`mt-1 ${\n                                trade.result === \"win\"\n                                  ? \"bg-green-500 hover:bg-green-600 text-white\"\n                                  : trade.result === \"lose\"\n                                    ? \"bg-red-500 hover:bg-red-600 text-white\"\n                                    : \"\"\n                              }`}\n                              variant={\n                                trade.result === \"win\"\n                                  ? \"default\"\n                                  : trade.result === \"lose\"\n                                    ? \"destructive\"\n                                    : \"secondary\"\n                              }\n                            >\n                              {getResultText(trade.result)}\n                            </Badge>\n                          </div>\n                        </div>\n                        <div className=\"mt-2 text-sm grid grid-cols-2 gap-2\">\n                          <div>\n                            <span className=\"text-muted-foreground\">\n                              ทิศทาง:\n                            </span>{\" \"}\n                            {getDirectionText(trade.direction)}\n                          </div>\n                          <div>\n                            <span className=\"text-muted-foreground\">\n                              ราคาเข้า:\n                            </span>{\" \"}\n                            {formatCurrency(parseFloat(trade.entryPrice))}\n                          </div>\n                          <div>\n                            <span className=\"text-muted-foreground\">\n                              ระยะเวลา:\n                            </span>{\" \"}\n                            {formatDuration(trade.duration)}\n                          </div>\n                          {trade.result && (\n                            <div>\n                              <span className=\"text-muted-foreground\">\n                                สถานะ:\n                              </span>{\" \"}\n                              {getResultText(trade.result)}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n\n                  {trades.filter((t) => t.status === \"completed\").length ===\n                    0 && (\n                    <div className=\"text-center text-muted-foreground py-8\">\n                      ไม่มีประวัติการเทรดที่เสร็จสิ้น\n                    </div>\n                  )}\n                </TabsContent>\n              </Tabs>\n            )}\n\n            {!trades && !isLoadingTrades && !tradesError && (\n              <div className=\"text-center text-muted-foreground py-8\">\n                ไม่มีประวัติการเทรด\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      <BottomNavigation />\n    </MobileContainer>\n  );\n}","size_bytes":20569},"client/src/pages/trading-page.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation, useSearch } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { MobileContainer } from \"@/components/layout/mobile-container\";\nimport { TopNavigation } from \"@/components/layout/top-navigation\";\nimport { BottomNavigation } from \"@/components/layout/bottom-navigation\";\nimport { CryptoChart } from \"@/components/crypto-chart\";\nimport { TradingOptions } from \"@/components/trading-options\";\nimport { CryptoCurrency } from \"@shared/schema\";\nimport { CryptoList } from \"@/components/crypto-list\";\nimport { \n  Card, \n  CardContent, \n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\n\nexport default function TradingPage() {\n  const [, navigate] = useLocation();\n  const params = useSearch();\n  const searchParams = new URLSearchParams(params);\n  const cryptoId = searchParams.get('id') || 'bitcoin';\n\n  const [selectedCrypto, setSelectedCrypto] = useState<CryptoCurrency | null>(null);\n\n  const { data: crypto, isLoading, error } = useQuery<CryptoCurrency>({\n    queryKey: [`/api/crypto/${cryptoId}`],\n    enabled: !!cryptoId,\n  });\n\n  useEffect(() => {\n    if (crypto) {\n      setSelectedCrypto(crypto);\n    }\n  }, [crypto]);\n\n  const handleBack = () => {\n    navigate('/');\n  };\n\n  const handleSelectCrypto = (crypto: CryptoCurrency) => {\n    setSelectedCrypto(crypto);\n    navigate(`/trade?id=${crypto.id}`);\n  };\n\n  return (\n    <MobileContainer>\n      <div className=\"pb-20\"> {/* Add padding for bottom navigation */}\n        <TopNavigation \n          actionButton={\n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={() => navigate('/trades/history')}\n              className=\"text-xs\"\n            >\n              ประวัติการเทรด\n            </Button>\n          }\n        />\n        \n        <div className=\"w-full\">\n          {isLoading ? (\n            <>\n              <Card className=\"w-full rounded-none\">\n                <CardHeader className=\"flex flex-row items-center\">\n                  <Skeleton className=\"h-8 w-8 rounded-full mr-2\" />\n                  <Skeleton className=\"h-4 w-40\" />\n                  <div className=\"ml-auto\">\n                    <Skeleton className=\"h-4 w-20\" />\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <Skeleton className=\"h-40 w-full\" />\n                </CardContent>\n              </Card>\n              <Card className=\"mt-4 w-full rounded-none\">\n                <CardContent>\n                  <Skeleton className=\"h-4 w-40 mb-4\" />\n                  <Skeleton className=\"h-10 w-full mb-4\" />\n                  <Skeleton className=\"h-4 w-full mb-2\" />\n                  <Skeleton className=\"h-4 w-full mb-4\" />\n                  <div className=\"grid grid-cols-2 gap-3\">\n                    <Skeleton className=\"h-10 w-full\" />\n                    <Skeleton className=\"h-10 w-full\" />\n                  </div>\n                </CardContent>\n              </Card>\n            </>\n          ) : error ? (\n            <Alert variant=\"destructive\" className=\"rounded-none\">\n              <AlertDescription>\n                Failed to load cryptocurrency data. Please try again later.\n              </AlertDescription>\n            </Alert>\n          ) : selectedCrypto ? (\n            <>\n              <div className=\"w-full\">\n                <CryptoChart crypto={selectedCrypto} />\n                <TradingOptions crypto={selectedCrypto} />\n              </div>\n            </>\n          ) : (\n            <div className=\"text-center py-8 w-full\">\n              <p>Select a cryptocurrency to trade</p>\n            </div>\n          )}\n          \n          <Card className=\"mt-4 w-full rounded-none border-t\">\n            <CardHeader className=\"px-0 mx-0\">\n              <CardTitle className=\"mx-4\">Select Cryptocurrency</CardTitle>\n            </CardHeader>\n            <CardContent className=\"px-0 mx-0\">\n              <CryptoList onSelectCrypto={handleSelectCrypto} />\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n      \n      <BottomNavigation />\n    </MobileContainer>\n  );\n}\n","size_bytes":4343},"client/src/pages/wallet-page.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { useEffect, useState } from \"react\";\nimport { TopNavigation } from \"@/components/layout/top-navigation\";\nimport { MobileContainer } from \"@/components/layout/mobile-container\";\nimport { BottomNavigation } from \"@/components/layout/bottom-navigation\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from \"@/components/ui/tabs\";\nimport { AddBankAccountDialog, ManageBankAccountsDialog, BankAccountSelector } from \"@/components/bank-account-manager\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { formatCurrency, formatShortDate } from \"@/lib/formatters\";\nimport { Loader2, ArrowUp, ArrowDown, PlusCircle, Trash2, CheckCircle2 } from \"lucide-react\";\nimport { Transaction, BankAccount } from \"@shared/schema\";\nimport asiaLogo from \"@assets/Asia_Plus_Securities.png\";\nimport cryptoBgImage from \"@assets/image_1748118681634.png\";\n\nexport default function WalletPage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [amount, setAmount] = useState(\"\");\n  const [showDepositDialog, setShowDepositDialog] = useState(false);\n  const [showWithdrawDialog, setShowWithdrawDialog] = useState(false);\n  const [showAddBankAccountDialog, setShowAddBankAccountDialog] = useState(false);\n  const [showManageBankDialog, setShowManageBankDialog] = useState(false);\n  const [depositMethod, setDepositMethod] = useState(\"bank\");\n  const [withdrawMethod, setWithdrawMethod] = useState(\"bank\");\n  const [bankAccount, setBankAccount] = useState(\"\");\n  const [bankName, setBankName] = useState(\"กสิกรไทย\");\n  const [accountName, setAccountName] = useState(\"\");\n  const [paymentProof, setPaymentProof] = useState<File | null>(null);\n  const [selectedBankAccountId, setSelectedBankAccountId] = useState<number | null>(null);\n  \n  // กำหนดประเภทข้อมูลสำหรับบัญชีธนาคารและพร้อมเพย์\n  interface DepositAccounts {\n    bank: {\n      name: string;\n      accountNumber: string;\n      accountName: string;\n    };\n    promptpay: {\n      number: string;\n      taxId: string;\n      name: string;\n    };\n  }\n  \n  // สำหรับดึงข้อมูลบัญชีธนาคารและพร้อมเพย์สำหรับการฝากเงิน\n  const { data: depositAccounts, isLoading: isLoadingDepositAccounts } = useQuery<DepositAccounts>({\n    queryKey: ['/api/deposit-accounts'],\n    enabled: showDepositDialog, // ดึงข้อมูลเมื่อแสดงหน้าต่างฝากเงินเท่านั้น\n  });\n  \n  // ดึงข้อมูลประวัติธุรกรรม\n  const { \n    data: transactions,\n    isLoading: isLoadingTransactions,\n    error: transactionsError \n  } = useQuery<Transaction[]>({\n    queryKey: [\"/api/wallet/transactions\"],\n    refetchInterval: 15000, // รีเฟรชทุก 15 วินาที เพื่อติดตามสถานะ\n  });\n  \n  // ดึงข้อมูลบัญชีธนาคารที่ผูกไว้\n  const {\n    data: bankAccounts,\n    isLoading: isLoadingBankAccounts,\n    error: bankAccountsError\n  } = useQuery<BankAccount[]>({\n    queryKey: [\"/api/bank-accounts\"],\n    enabled: !!user, // เริ่มดึงข้อมูลเมื่อมีข้อมูลผู้ใช้แล้วเท่านั้น\n  });\n  \n  // Mutation สำหรับเพิ่มบัญชีธนาคาร\n  const addBankAccountMutation = useMutation({\n    mutationFn: async (data: { \n      bankName: string; \n      accountNumber: string; \n      accountName: string;\n      isDefault: boolean;\n    }) => {\n      const res = await apiRequest(\"POST\", \"/api/bank-accounts\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bank-accounts\"] });\n      toast({\n        title: \"เพิ่มบัญชีธนาคารสำเร็จ\",\n        description: \"บัญชีธนาคารได้รับการบันทึกเรียบร้อยแล้ว\",\n      });\n      setShowAddBankAccountDialog(false);\n      setBankName(\"กสิกรไทย\");\n      setBankAccount(\"\");\n      setAccountName(\"\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"เกิดข้อผิดพลาด\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n  \n  // Mutation สำหรับลบบัญชีธนาคาร\n  const deleteBankAccountMutation = useMutation({\n    mutationFn: async (bankAccountId: number) => {\n      const res = await apiRequest(\"DELETE\", `/api/bank-accounts/${bankAccountId}`);\n      return res.ok;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bank-accounts\"] });\n      toast({\n        title: \"ลบบัญชีธนาคารสำเร็จ\",\n        description: \"บัญชีธนาคารได้ถูกลบเรียบร้อยแล้ว\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"เกิดข้อผิดพลาด\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n  \n  // Mutation สำหรับตั้งบัญชีธนาคารเป็นค่าเริ่มต้น\n  const setDefaultBankAccountMutation = useMutation({\n    mutationFn: async (bankAccountId: number) => {\n      const res = await apiRequest(\"PATCH\", `/api/bank-accounts/${bankAccountId}/default`, {});\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bank-accounts\"] });\n      toast({\n        title: \"ตั้งค่าบัญชีหลักสำเร็จ\",\n        description: \"บัญชีธนาคารได้ถูกตั้งเป็นบัญชีหลักเรียบร้อยแล้ว\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"เกิดข้อผิดพลาด\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n  \n  // Mutation สำหรับถอนเงินโดยใช้บัญชีที่ผูกไว้\n  const withdrawWithSavedAccountMutation = useMutation({\n    mutationFn: async (data: { amount: string; bankAccountId: number }) => {\n      const res = await apiRequest(\"POST\", \"/api/wallet/withdraw-with-saved-account\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/wallet/transactions\"] });\n      \n      toast({\n        title: \"ส่งคำขอถอนเงินสำเร็จ\",\n        description: `คำขอถอนเงินจำนวน ${formatCurrency(parseFloat(amount))} ถูกส่งเรียบร้อยแล้ว กรุณารอการอนุมัติ`,\n      });\n      \n      setShowWithdrawDialog(false);\n      setAmount(\"\");\n      setSelectedBankAccountId(null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"เกิดข้อผิดพลาด\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mutation สำหรับฝากเงิน\n  const depositMutation = useMutation({\n    mutationFn: async (data: { amount: string; method: string; paymentProofBase64?: string }) => {\n      const res = await apiRequest(\"POST\", \"/api/wallet/deposit\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/wallet/transactions\"] });\n      \n      toast({\n        title: \"ส่งคำขอฝากเงินสำเร็จ\",\n        description: `คำขอฝากเงินจำนวน ${formatCurrency(parseFloat(amount))} ถูกส่งเรียบร้อยแล้ว กรุณารอการอนุมัติ`,\n      });\n      \n      setShowDepositDialog(false);\n      setAmount(\"\");\n      setPaymentProof(null);\n      \n      // Reset upload form\n      const previewImg = document.getElementById('payment-proof-preview') as HTMLImageElement;\n      if (previewImg) {\n        previewImg.src = \"#\";\n        previewImg.classList.add('hidden');\n      }\n      document.getElementById('upload-placeholder')?.classList.remove('hidden');\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"เกิดข้อผิดพลาด\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mutation สำหรับถอนเงิน\n  const withdrawMutation = useMutation({\n    mutationFn: async (data: { amount: string; method: string; bankAccount?: string; bankName?: string }) => {\n      const res = await apiRequest(\"POST\", \"/api/wallet/withdraw\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/wallet/transactions\"] });\n      \n      toast({\n        title: \"ส่งคำขอถอนเงินสำเร็จ\",\n        description: `คำขอถอนเงินจำนวน ${formatCurrency(parseFloat(amount))} ถูกส่งเรียบร้อยแล้ว กรุณารอการอนุมัติ`,\n      });\n      \n      setShowWithdrawDialog(false);\n      setAmount(\"\");\n      setBankAccount(\"\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"เกิดข้อผิดพลาด\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDeposit = async () => {\n    if (!amount || isNaN(parseFloat(amount)) || parseFloat(amount) <= 0) {\n      toast({\n        title: \"จำนวนเงินไม่ถูกต้อง\",\n        description: \"กรุณาระบุจำนวนเงินให้ถูกต้อง\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (!paymentProof) {\n      toast({\n        title: \"กรุณาอัพโหลดหลักฐานการโอนเงิน\",\n        description: \"คุณต้องแนบหลักฐานการโอนเงินเพื่อยืนยันการฝากเงิน\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    // เช็คขนาดไฟล์ (ไม่เกิน 5MB)\n    if (paymentProof.size > 5 * 1024 * 1024) {\n      toast({\n        title: \"ไฟล์มีขนาดใหญ่เกินไป\",\n        description: \"กรุณาอัพโหลดไฟล์ที่มีขนาดไม่เกิน 5MB\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    try {\n      // แปลงไฟล์เป็น Base64\n      const paymentProofBase64 = await new Promise<string>((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => {\n          if (typeof reader.result === 'string') {\n            resolve(reader.result);\n          } else {\n            reject(new Error('Failed to convert file to base64'));\n          }\n        };\n        reader.onerror = reject;\n        reader.readAsDataURL(paymentProof);\n      });\n      \n      depositMutation.mutate({\n        amount,\n        method: depositMethod,\n        paymentProofBase64\n      });\n    } catch (error) {\n      toast({\n        title: \"เกิดข้อผิดพลาด\",\n        description: \"ไม่สามารถอัพโหลดไฟล์ได้ กรุณาลองใหม่อีกครั้ง\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleWithdraw = () => {\n    if (!amount || isNaN(parseFloat(amount)) || parseFloat(amount) <= 0) {\n      toast({\n        title: \"จำนวนเงินไม่ถูกต้อง\",\n        description: \"กรุณาระบุจำนวนเงินให้ถูกต้อง\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (parseFloat(amount) > parseFloat(user?.balance || \"0\")) {\n      toast({\n        title: \"ยอดเงินไม่เพียงพอ\",\n        description: \"ยอดเงินในบัญชีของคุณไม่เพียงพอสำหรับการถอนเงิน\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    // ตรวจสอบว่ามีบัญชีธนาคารสำหรับถอนเงินหรือไม่\n    if (!bankAccounts || bankAccounts.length === 0) {\n      toast({\n        title: \"ยังไม่มีบัญชีธนาคาร\",\n        description: \"กรุณาเพิ่มบัญชีธนาคารสำหรับการถอนเงินก่อน\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    // หาบัญชีธนาคารที่จะใช้ในการถอนเงิน (บัญชีหลักหรือบัญชีแรก)\n    const defaultAccount = bankAccounts.find(acc => acc.isDefault);\n    const accountToUse = defaultAccount || bankAccounts[0];\n    \n    // ใช้บัญชีที่ผูกไว้ในการถอนเงิน\n    withdrawWithSavedAccountMutation.mutate({\n      amount, \n      bankAccountId: accountToUse.id\n    });\n  };\n  \n  // ฟังก์ชันเมื่อกดปุ่มเพิ่มบัญชีธนาคาร\n  const handleAddBankAccount = () => {\n    if (!bankName || !bankAccount || !accountName) {\n      toast({\n        title: \"ข้อมูลไม่ครบถ้วน\",\n        description: \"กรุณาระบุชื่อธนาคาร, เลขที่บัญชี และชื่อบัญชี\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    // ตรวจสอบว่าเลขที่บัญชีเป็นตัวเลขเท่านั้น\n    if (!/^\\d+$/.test(bankAccount)) {\n      toast({\n        title: \"เลขที่บัญชีไม่ถูกต้อง\",\n        description: \"เลขที่บัญชีต้องเป็นตัวเลขเท่านั้น\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    // เช็คว่ามีบัญชีอยู่แล้วหรือไม่ ถ้าไม่มีให้ตั้งเป็นบัญชีหลัก\n    const isFirstAccount = !bankAccounts || bankAccounts.length === 0;\n    \n    addBankAccountMutation.mutate({\n      bankName,\n      accountNumber: bankAccount,\n      accountName,\n      isDefault: isFirstAccount\n    });\n  };\n\n  return (\n    <MobileContainer>\n      <TopNavigation />\n      \n      {/* ไดอะล็อกสำหรับเพิ่มบัญชีธนาคาร */}\n      <AddBankAccountDialog\n        open={showAddBankAccountDialog}\n        onOpenChange={setShowAddBankAccountDialog}\n      />\n      \n      {/* ไดอะล็อกสำหรับจัดการบัญชีธนาคาร */}\n      <ManageBankAccountsDialog\n        open={showManageBankDialog}\n        onOpenChange={setShowManageBankDialog}\n        onAddNewClick={() => {\n          setShowManageBankDialog(false);\n          setShowAddBankAccountDialog(true);\n        }}\n      />\n      \n      <div className=\"flex-1 overflow-y-auto\">\n        {/* บัตรยอดเงินคงเหลือ */}\n        <Card className=\"mb-4 text-white overflow-hidden rounded-none border-x-0 shadow-none\">\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 z-0\">\n              {/* พื้นหลังใช้รูปภาพตามที่ผู้ใช้ต้องการ */}\n              <img \n                src=\"https://img.freepik.com/premium-photo/bitcoin-blockchain-crypto-currency-digital-encryption-digital-money-exchange-technology-network-connections_24070-1004.jpg\" \n                alt=\"Crypto Background\" \n                className=\"w-full h-full object-cover\"\n              />\n              <div className=\"absolute inset-0 bg-black/20\"></div>\n            </div>\n            <CardContent className=\"p-6 relative z-10\">\n              <div className=\"flex flex-col mb-4\">\n                <div className=\"text-sm mb-1 text-blue-100\">ยอดเงินคงเหลือ</div>\n                <div className=\"text-3xl font-bold mb-4\">\n                  {formatCurrency(Number(user?.balance || 0))}\n                </div>\n              </div>\n              <div className=\"grid grid-cols-2 gap-3\">\n                <Button\n                  onClick={() => setShowDepositDialog(true)}\n                  variant=\"outline\"\n                  className=\"bg-blue-800/40 border-blue-300 text-white hover:bg-blue-700/50\"\n                >\n                  ฝากเงิน\n                </Button>\n                <Button\n                  onClick={() => setShowWithdrawDialog(true)}\n                  variant=\"outline\"\n                  className=\"bg-blue-800/40 border-blue-300 text-white hover:bg-blue-700/50\"\n                >\n                  ถอนเงิน\n                </Button>\n              </div>\n            </CardContent>\n          </div>\n        </Card>\n        \n        <div className=\"px-4\">\n          {/* บัตรประวัติธุรกรรม */}\n          <Card>\n            <CardContent className=\"p-4\">\n              <h3 className=\"font-medium mb-3\">ประวัติธุรกรรม</h3>\n              \n              {isLoadingTransactions ? (\n                <div className=\"flex justify-center items-center py-8\">\n                  <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n                </div>\n              ) : transactionsError ? (\n                <div className=\"text-center text-red-500 py-8\">\n                  เกิดข้อผิดพลาดในการโหลดข้อมูล กรุณาลองใหม่อีกครั้ง\n                </div>\n              ) : transactions && transactions.length > 0 ? (\n                <div>\n                  {/* แยกธุรกรรมเป็น 2 แท็บ */}\n                  <Tabs defaultValue=\"all\" className=\"mb-4\">\n                    <TabsList className=\"grid grid-cols-3\">\n                      <TabsTrigger value=\"all\">ทั้งหมด</TabsTrigger>\n                      <TabsTrigger value=\"deposit\">ฝากเงิน</TabsTrigger>\n                      <TabsTrigger value=\"withdraw\">ถอนเงิน</TabsTrigger>\n                    </TabsList>\n\n                    {/* แท็บแสดงธุรกรรมทั้งหมด */}\n                    <TabsContent value=\"all\" className=\"space-y-3 mt-2\">\n                      {transactions\n                        .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n                        .map((transaction) => (\n                        <div key={transaction.id} className=\"border rounded-lg p-3\">\n                          <div className=\"flex justify-between items-start\">\n                            <div className=\"flex items-center\">\n                              {transaction.type === \"deposit\" ? (\n                                <div className=\"rounded-full bg-green-100 p-2 mr-3\">\n                                  <ArrowDown className=\"h-4 w-4 text-green-600\" />\n                                </div>\n                              ) : (\n                                <div className=\"rounded-full bg-blue-100 p-2 mr-3\">\n                                  <ArrowUp className=\"h-4 w-4 text-blue-600\" />\n                                </div>\n                              )}\n                              <div>\n                                <div className=\"font-medium\">\n                                  {transaction.type === \"deposit\" ? \"ฝากเงิน\" : \"ถอนเงิน\"}\n                                </div>\n                                <div className=\"text-sm text-muted-foreground\">\n                                  {formatShortDate(transaction.createdAt)}\n                                </div>\n                              </div>\n                            </div>\n                            <div className=\"text-right\">\n                              <div className={`font-medium ${transaction.type === \"deposit\" ? \"text-green-600\" : \"text-blue-600\"}`}>\n                                {transaction.type === \"deposit\" ? \"+\" : \"-\"}\n                                {formatCurrency(parseFloat(transaction.amount))}\n                              </div>\n                              <Badge \n                                className={`mt-1 ${transaction.status === \"approved\" ? \"bg-green-500 hover:bg-green-600 text-white\" : transaction.status === \"frozen\" ? \"bg-amber-500 hover:bg-amber-600 text-white\" : \"\"}`}\n                                variant={\n                                  transaction.status === \"rejected\" ? \"destructive\" : \n                                  transaction.status === \"approved\" ? \"default\" : \n                                  transaction.status === \"frozen\" ? \"outline\" : \"outline\"\n                                }\n                              >\n                                {transaction.status === \"pending\" ? \"รออนุมัติ\" : \n                                transaction.status === \"approved\" ? \"อนุมัติแล้ว\" :\n                                transaction.status === \"frozen\" ? \"ถูกอายัด\" :\n                                \"ถูกปฏิเสธ\"}\n                              </Badge>\n                            </div>\n                          </div>\n                          {transaction.note && (\n                            <div className=\"mt-2 text-sm bg-muted p-2 rounded\">\n                              <span className=\"font-medium\">หมายเหตุ:</span> {transaction.note}\n                            </div>\n                          )}\n                        </div>\n                      ))}\n                    </TabsContent>\n\n                    {/* แท็บแสดงเฉพาะธุรกรรมฝากเงิน */}\n                    <TabsContent value=\"deposit\" className=\"space-y-3 mt-2\">\n                      {transactions\n                        .filter(transaction => transaction.type === \"deposit\")\n                        .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n                        .map((transaction) => (\n                        <div key={transaction.id} className=\"border rounded-lg p-3\">\n                          <div className=\"flex justify-between items-start\">\n                            <div className=\"flex items-center\">\n                              <div className=\"rounded-full bg-green-100 p-2 mr-3\">\n                                <ArrowDown className=\"h-4 w-4 text-green-600\" />\n                              </div>\n                              <div>\n                                <div className=\"font-medium\">ฝากเงิน</div>\n                                <div className=\"text-sm text-muted-foreground\">\n                                  {formatShortDate(transaction.createdAt)}\n                                </div>\n                              </div>\n                            </div>\n                            <div className=\"text-right\">\n                              <div className=\"text-green-600 font-medium\">\n                                +{formatCurrency(parseFloat(transaction.amount))}\n                              </div>\n                              <Badge \n                                className={`mt-1 ${transaction.status === \"approved\" ? \"bg-green-500 hover:bg-green-600 text-white\" : transaction.status === \"frozen\" ? \"bg-amber-500 hover:bg-amber-600 text-white\" : \"\"}`}\n                                variant={\n                                  transaction.status === \"rejected\" ? \"destructive\" : \n                                  transaction.status === \"approved\" ? \"default\" : \n                                  transaction.status === \"frozen\" ? \"outline\" : \"outline\"\n                                }\n                              >\n                                {transaction.status === \"pending\" ? \"รออนุมัติ\" : \n                                transaction.status === \"approved\" ? \"อนุมัติแล้ว\" :\n                                transaction.status === \"frozen\" ? \"ถูกอายัด\" :\n                                \"ถูกปฏิเสธ\"}\n                              </Badge>\n                            </div>\n                          </div>\n                          {transaction.note && (\n                            <div className=\"mt-2 text-sm bg-muted p-2 rounded\">\n                              <span className=\"font-medium\">หมายเหตุ:</span> {transaction.note}\n                            </div>\n                          )}\n                        </div>\n                      ))}\n                      {transactions.filter(transaction => transaction.type === \"deposit\").length === 0 && (\n                        <div className=\"text-center text-muted-foreground py-8\">\n                          ไม่มีรายการฝากเงิน\n                        </div>\n                      )}\n                    </TabsContent>\n\n                    {/* แท็บแสดงเฉพาะธุรกรรมถอนเงิน */}\n                    <TabsContent value=\"withdraw\" className=\"space-y-3 mt-2\">\n                      {transactions\n                        .filter(transaction => transaction.type === \"withdraw\")\n                        .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n                        .map((transaction) => (\n                        <div key={transaction.id} className=\"border rounded-lg p-3\">\n                          <div className=\"flex justify-between items-start\">\n                            <div className=\"flex items-center\">\n                              <div className=\"rounded-full bg-blue-100 p-2 mr-3\">\n                                <ArrowUp className=\"h-4 w-4 text-blue-600\" />\n                              </div>\n                              <div>\n                                <div className=\"font-medium\">ถอนเงิน</div>\n                                <div className=\"text-sm text-muted-foreground\">\n                                  {formatShortDate(transaction.createdAt)}\n                                </div>\n                              </div>\n                            </div>\n                            <div className=\"text-right\">\n                              <div className=\"text-blue-600 font-medium\">\n                                -{formatCurrency(parseFloat(transaction.amount))}\n                              </div>\n                              <Badge \n                                className={`mt-1 ${transaction.status === \"approved\" ? \"bg-green-500 hover:bg-green-600 text-white\" : transaction.status === \"frozen\" ? \"bg-amber-500 hover:bg-amber-600 text-white\" : \"\"}`}\n                                variant={\n                                  transaction.status === \"rejected\" ? \"destructive\" : \n                                  transaction.status === \"approved\" ? \"default\" : \n                                  transaction.status === \"frozen\" ? \"outline\" : \"outline\"\n                                }\n                              >\n                                {transaction.status === \"pending\" ? \"รออนุมัติ\" : \n                                transaction.status === \"approved\" ? \"อนุมัติแล้ว\" :\n                                transaction.status === \"frozen\" ? \"ถูกอายัด\" :\n                                \"ถูกปฏิเสธ\"}\n                              </Badge>\n                            </div>\n                          </div>\n                          {transaction.note && (\n                            <div className=\"mt-2 text-sm bg-muted p-2 rounded\">\n                              <span className=\"font-medium\">หมายเหตุ:</span> {transaction.note}\n                            </div>\n                          )}\n                        </div>\n                      ))}\n                      {transactions.filter(transaction => transaction.type === \"withdraw\").length === 0 && (\n                        <div className=\"text-center text-muted-foreground py-8\">\n                          ไม่มีรายการถอนเงิน\n                        </div>\n                      )}\n                    </TabsContent>\n                  </Tabs>\n                </div>\n              ) : (\n                <div className=\"text-center text-muted-foreground py-8\">\n                  ยังไม่มีประวัติธุรกรรม\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n      \n      {/* ไดอะล็อกสำหรับฝากเงิน */}\n      <Dialog open={showDepositDialog} onOpenChange={setShowDepositDialog}>\n        <DialogContent className=\"max-w-sm\">\n          <DialogHeader>\n            <DialogTitle>ฝากเงิน</DialogTitle>\n            <DialogDescription>\n              กรอกจำนวนเงินและเลือกวิธีการฝากเงิน\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4 pt-2\">\n            <div>\n              <Label htmlFor=\"amount\">จำนวนเงิน</Label>\n              <Input\n                id=\"amount\"\n                type=\"number\"\n                placeholder=\"จำนวนเงิน\"\n                value={amount}\n                onChange={(e) => setAmount(e.target.value)}\n                className=\"mt-1\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"deposit-method\">วิธีการฝากเงิน</Label>\n              <Tabs defaultValue=\"bank\" className=\"mt-1\" onValueChange={setDepositMethod}>\n                <TabsList className=\"grid grid-cols-2 w-full\">\n                  <TabsTrigger value=\"bank\">บัญชีธนาคาร</TabsTrigger>\n                  <TabsTrigger value=\"promptpay\">พร้อมเพย์</TabsTrigger>\n                </TabsList>\n                \n                <TabsContent value=\"bank\" className=\"border rounded-lg p-3 mt-2\">\n                  {isLoadingDepositAccounts ? (\n                    <div className=\"flex justify-center items-center p-4\">\n                      <Loader2 className=\"h-5 w-5 animate-spin\" />\n                    </div>\n                  ) : depositAccounts ? (\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-muted-foreground\">ชื่อธนาคาร:</span>\n                        <span className=\"font-medium\">{depositAccounts.bank.name}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-muted-foreground\">เลขบัญชี:</span>\n                        <span className=\"font-medium\">{depositAccounts.bank.accountNumber}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-muted-foreground\">ชื่อบัญชี:</span>\n                        <span className=\"font-medium\">{depositAccounts.bank.accountName}</span>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"text-center text-red-500 p-2\">\n                      ไม่สามารถโหลดข้อมูลบัญชีธนาคารได้\n                    </div>\n                  )}\n                </TabsContent>\n                \n                <TabsContent value=\"promptpay\" className=\"border rounded-lg p-3 mt-2\">\n                  {isLoadingDepositAccounts ? (\n                    <div className=\"flex justify-center items-center p-4\">\n                      <Loader2 className=\"h-5 w-5 animate-spin\" />\n                    </div>\n                  ) : depositAccounts ? (\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-muted-foreground\">เบอร์พร้อมเพย์:</span>\n                        <span className=\"font-medium\">{depositAccounts.promptpay.number}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-muted-foreground\">เลขประจำตัวผู้เสียภาษี:</span>\n                        <span className=\"font-medium\">{depositAccounts.promptpay.taxId}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-muted-foreground\">ชื่อ:</span>\n                        <span className=\"font-medium\">{depositAccounts.promptpay.name}</span>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"text-center text-red-500 p-2\">\n                      ไม่สามารถโหลดข้อมูลพร้อมเพย์ได้\n                    </div>\n                  )}\n                </TabsContent>\n              </Tabs>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"payment-proof\">อัพโหลดหลักฐานการโอนเงิน</Label>\n              <div className=\"border rounded-lg p-4 mt-1 text-center flex flex-col items-center cursor-pointer hover:bg-muted/50 transition-colors\" onClick={() => document.getElementById('file-upload')?.click()}>\n                <div id=\"upload-placeholder\">\n                  <PlusCircle className=\"h-10 w-10 text-muted-foreground mb-2\" />\n                  <p className=\"text-sm text-muted-foreground\">คลิกเพื่ออัพโหลดรูปภาพ</p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">ขนาดไฟล์ไม่เกิน 5MB</p>\n                </div>\n                <img \n                  id=\"payment-proof-preview\"\n                  src=\"#\" \n                  alt=\"Payment proof preview\" \n                  className=\"max-h-40 hidden\"\n                />\n                <input\n                  id=\"file-upload\"\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={(e) => {\n                    if (e.target.files && e.target.files.length > 0) {\n                      const file = e.target.files[0];\n                      setPaymentProof(file);\n                      \n                      // แสดงภาพตัวอย่าง\n                      const reader = new FileReader();\n                      reader.onload = (event) => {\n                        if (event.target?.result) {\n                          const previewImg = document.getElementById('payment-proof-preview') as HTMLImageElement;\n                          if (previewImg) {\n                            previewImg.src = event.target.result.toString();\n                            previewImg.classList.remove('hidden');\n                          }\n                          document.getElementById('upload-placeholder')?.classList.add('hidden');\n                        }\n                      };\n                      reader.readAsDataURL(file);\n                    }\n                  }}\n                  className=\"hidden\"\n                />\n              </div>\n            </div>\n          </div>\n          \n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowDepositDialog(false)}\n            >\n              ยกเลิก\n            </Button>\n            <Button \n              onClick={handleDeposit}\n              disabled={!amount || !paymentProof || depositMutation.isPending}\n            >\n              {depositMutation.isPending ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  กำลังดำเนินการ...\n                </>\n              ) : (\n                \"ฝากเงิน\"\n              )}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n      \n      {/* ไดอะล็อกสำหรับถอนเงิน */}\n      <Dialog open={showWithdrawDialog} onOpenChange={setShowWithdrawDialog}>\n        <DialogContent className=\"max-w-sm\">\n          <DialogHeader>\n            <DialogTitle>ถอนเงิน</DialogTitle>\n            <DialogDescription>\n              กรอกจำนวนเงินเพื่อถอนไปยังบัญชีธนาคารที่ผูกไว้\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4 pt-2\">\n            <div>\n              <Label htmlFor=\"amount\">จำนวนเงิน</Label>\n              <Input\n                id=\"amount\"\n                type=\"number\"\n                placeholder=\"จำนวนเงิน\"\n                value={amount}\n                onChange={(e) => setAmount(e.target.value)}\n                className=\"mt-1\"\n              />\n              {amount && !isNaN(parseFloat(amount)) && parseFloat(amount) > 0 && (\n                <div className=\"text-xs text-muted-foreground mt-1 flex justify-between\">\n                  <span>ค่าธรรมเนียม (3%):</span>\n                  <span>{formatCurrency(parseFloat(amount) * 0.03)}</span>\n                </div>\n              )}\n            </div>\n            \n            <div>\n              <div className=\"flex justify-between items-center mb-2\">\n                <Label>บัญชีธนาคารสำหรับการถอนเงิน</Label>\n                <Button \n                  variant=\"link\" \n                  className=\"h-auto p-0 text-xs\"\n                  onClick={() => setShowManageBankDialog(true)}\n                >\n                  จัดการบัญชี\n                </Button>\n              </div>\n              \n              {isLoadingBankAccounts ? (\n                <div className=\"flex justify-center py-4\">\n                  <Loader2 className=\"h-5 w-5 animate-spin\" />\n                </div>\n              ) : bankAccounts && bankAccounts.length > 0 ? (\n                <div className=\"border rounded-lg p-3\">\n                  {/* แสดงบัญชีธนาคารที่ถูกตั้งเป็นค่าเริ่มต้น หรือบัญชีแรกถ้าไม่มีบัญชีเริ่มต้น */}\n                  {(() => {\n                    const defaultAccount = bankAccounts.find(acc => acc.isDefault);\n                    const accountToShow = defaultAccount || bankAccounts[0];\n                    return (\n                      <>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-sm text-muted-foreground\">ธนาคาร:</span>\n                          <span className=\"font-medium\">{accountToShow.bankName}</span>\n                        </div>\n                        <div className=\"flex justify-between mt-1\">\n                          <span className=\"text-sm text-muted-foreground\">เลขบัญชี:</span>\n                          <span className=\"font-medium\">{accountToShow.accountNumber}</span>\n                        </div>\n                        <div className=\"flex justify-between mt-1\">\n                          <span className=\"text-sm text-muted-foreground\">ชื่อบัญชี:</span>\n                          <span className=\"font-medium\">{accountToShow.accountName}</span>\n                        </div>\n                      </>\n                    );\n                  })()}\n                </div>\n              ) : (\n                <div className=\"border border-dashed rounded-lg p-4 text-center\">\n                  <p className=\"text-sm text-muted-foreground mb-2\">คุณยังไม่มีบัญชีธนาคารสำหรับการถอนเงิน</p>\n                  <Button \n                    variant=\"secondary\" \n                    size=\"sm\"\n                    onClick={() => {\n                      setShowWithdrawDialog(false);\n                      setShowAddBankAccountDialog(true);\n                    }}\n                  >\n                    เพิ่มบัญชีธนาคาร\n                  </Button>\n                </div>\n              )}\n            </div>\n            \n            {amount && !isNaN(parseFloat(amount)) && parseFloat(amount) > 0 && (\n              <div className=\"p-3 border rounded-lg bg-muted/50\">\n                <div className=\"text-sm\">สรุปรายการ</div>\n                <div className=\"flex justify-between mt-1\">\n                  <span className=\"text-sm\">จำนวนเงินที่ถอน:</span>\n                  <span className=\"font-medium\">{formatCurrency(parseFloat(amount))}</span>\n                </div>\n                <div className=\"flex justify-between mt-1\">\n                  <span className=\"text-sm\">หักค่าธรรมเนียม (3%):</span>\n                  <span className=\"font-medium text-red-500\">- {formatCurrency(parseFloat(amount) * 0.03)}</span>\n                </div>\n                <Separator className=\"my-2\" />\n                <div className=\"flex justify-between\">\n                  <span className=\"font-medium\">รับเงินสุทธิ:</span>\n                  <span className=\"font-bold\">{formatCurrency(parseFloat(amount) * 0.97)}</span>\n                </div>\n              </div>\n            )}\n          </div>\n          \n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowWithdrawDialog(false)}\n            >\n              ยกเลิก\n            </Button>\n            <Button \n              onClick={handleWithdraw}\n              disabled={\n                !amount || \n                isNaN(parseFloat(amount)) || \n                parseFloat(amount) <= 0 ||\n                !bankAccounts || \n                bankAccounts.length === 0 ||\n                withdrawWithSavedAccountMutation.isPending\n              }\n            >\n              {withdrawWithSavedAccountMutation.isPending ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  กำลังดำเนินการ...\n                </>\n              ) : (\n                \"ถอนเงิน\"\n              )}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n      \n      <BottomNavigation />\n    </MobileContainer>\n  );\n}\n","size_bytes":44725},"client/src/components/layout/admin-layout.tsx":{"content":"import { ReactNode } from \"react\";\nimport { AdminSidebar } from \"./admin-sidebar\";\n\ninterface AdminLayoutProps {\n  children: ReactNode;\n}\n\nexport function AdminLayout({ children }: AdminLayoutProps) {\n  return (\n    <div className=\"flex min-h-screen bg-background\">\n      <AdminSidebar />\n      <main className=\"flex-1 p-6 overflow-y-auto\">{children}</main>\n    </div>\n  );\n}","size_bytes":375},"client/src/components/layout/admin-nav-paths.tsx":{"content":"// กำหนดเส้นทางสำหรับเมนูแอดมิน\nexport const adminNavPaths = [\n  { \n    label: \"แดชบอร์ด\",\n    path: \"/admin\" \n  },\n  { \n    label: \"จัดการผู้ใช้\",\n    path: \"/admin/users\" \n  },\n  { \n    label: \"การทำธุรกรรม\",\n    path: \"/admin/transactions\" \n  },\n  {\n    label: \"จัดการการเทรด\",\n    path: \"/admin/trades\"\n  },\n  { \n    label: \"รายงาน\",\n    path: \"/admin/reports\" \n  },\n  { \n    label: \"การตั้งค่า\",\n    path: \"/admin/settings\" \n  },\n];","size_bytes":615},"client/src/components/layout/admin-sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { adminNavPaths } from \"@/components/layout/admin-nav-paths\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  LayoutDashboard,\n  Users,\n  Receipt,\n  FileBarChart,\n  Settings,\n  LogOut,\n  ChevronRight,\n  Trophy\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\n\nexport function AdminSidebar() {\n  const [location] = useLocation();\n  const { logoutMutation } = useAuth();\n  \n  const handleLogout = async () => {\n    logoutMutation.mutate();\n  };\n  \n  // เลือกไอคอนตามเส้นทาง\n  const getIconForPath = (path: string) => {\n    if (path === \"/admin\") return <LayoutDashboard className=\"h-5 w-5\" />;\n    if (path === \"/admin/users\") return <Users className=\"h-5 w-5\" />;\n    if (path === \"/admin/transactions\") return <Receipt className=\"h-5 w-5\" />;\n    if (path === \"/admin/trades\") return <Trophy className=\"h-5 w-5\" />;\n    if (path === \"/admin/reports\") return <FileBarChart className=\"h-5 w-5\" />;\n    if (path === \"/admin/settings\") return <Settings className=\"h-5 w-5\" />;\n    return <ChevronRight className=\"h-5 w-5\" />;\n  };\n  \n  return (\n    <div className=\"w-64 border-r border-border bg-card h-screen flex flex-col overflow-hidden\">\n      {/* Logo และหัวเรื่อง */}\n      <div className=\"p-6 border-b border-border\">\n        <Link href=\"/admin\">\n          <a className=\"flex items-center\">\n            <img \n              src=\"/Asia_Plus_Securities.png\" \n              alt=\"โลโก้ Asia Plus Securities\" \n              className=\"h-8 mr-2\" \n            />\n            <h1 className=\"text-xl font-bold ml-2\">Asia Plus Admin</h1>\n          </a>\n        </Link>\n      </div>\n      \n      {/* Navigation */}\n      <div className=\"flex-1 overflow-y-auto py-6 px-3\">\n        <div className=\"space-y-1\">\n          {adminNavPaths.map((item) => (\n            <Link key={item.path} href={item.path}>\n              <a\n                className={cn(\n                  \"flex items-center px-3 py-2 rounded-md text-sm font-medium transition-colors\",\n                  location === item.path\n                    ? \"bg-primary text-primary-foreground\"\n                    : \"hover:bg-muted\"\n                )}\n              >\n                {getIconForPath(item.path)}\n                <span className=\"ml-3\">{item.label}</span>\n              </a>\n            </Link>\n          ))}\n        </div>\n      </div>\n      \n      {/* User Info & Logout */}\n      <div className=\"p-4 border-t border-border\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <p className=\"text-sm font-medium\">แอดมิน</p>\n            <p className=\"text-xs text-muted-foreground\">admin@asiaplus.co.th</p>\n          </div>\n        </div>\n        <Button \n          variant=\"outline\" \n          size=\"sm\" \n          className=\"w-full flex items-center justify-center\"\n          onClick={handleLogout}\n        >\n          <LogOut className=\"h-4 w-4 mr-2\" />\n          ออกจากระบบ\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":3196},"client/src/components/layout/bottom-navigation.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\n\nexport function BottomNavigation() {\n  const [location] = useLocation();\n\n  const navItems = [\n    {\n      icon: (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"h-5 w-5\">\n          <path d=\"m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z\" />\n          <polyline points=\"9 22 9 12 15 12 15 22\" />\n        </svg>\n      ),\n      label: \"หน้าหลัก\",\n      href: \"/\",\n    },\n    {\n      icon: (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"h-5 w-5\">\n          <path d=\"M12 2v20M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6\" />\n        </svg>\n      ),\n      label: \"เทรด\",\n      href: \"/trade\",\n    },\n    {\n      icon: (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"h-5 w-5\">\n          <path d=\"M2 9V6c0-1.1.9-2 2-2h16a2 2 0 0 1 2 2v3\"/>\n          <path d=\"M1 9h22\"/>\n          <path d=\"M18 11v5\"/>\n          <path d=\"M6 11v5\"/>\n          <path d=\"M18 13h.01\"/>\n          <path d=\"M6 13h.01\"/>\n          <path d=\"M20 9v11a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V9\"/>\n        </svg>\n      ),\n      label: \"กระเป๋าเงิน\",\n      href: \"/wallet\",\n    },\n    {\n      icon: (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"h-5 w-5\">\n          <path d=\"M4 22h16a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H8a2 2 0 0 0-2 2v16a2 2 0 0 1-2 2Zm0 0a2 2 0 0 1-2-2v-9c0-1.1.9-2 2-2h2\" />\n          <path d=\"M18 14h-8\" />\n          <path d=\"M15 18h-5\" />\n          <path d=\"M10 6h8v4h-8V6Z\" />\n        </svg>\n      ),\n      label: \"ข่าวสาร\",\n      href: \"/news\",\n    },\n    {\n      icon: (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"h-5 w-5\">\n          <path d=\"M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2\" />\n          <circle cx=\"12\" cy=\"7\" r=\"4\" />\n        </svg>\n      ),\n      label: \"โปรไฟล์\",\n      href: \"/profile\",\n    },\n  ];\n\n  return (\n    <nav className=\"fixed bottom-0 left-0 right-0 z-50 max-w-md mx-auto bg-card/80 backdrop-blur-sm border-t border-border px-1 py-2\">\n      <div className=\"flex justify-between\">\n        {navItems.map((item) => {\n          const isActive = item.href === location;\n          return (\n            <Link\n              key={item.href}\n              href={item.href}\n              className=\"flex flex-col items-center py-1 px-1\"\n            >\n              <div\n                className={cn(\n                  \"flex flex-col items-center py-1 border-t-2\",\n                  isActive\n                    ? \"border-primary text-primary\"\n                    : \"border-transparent text-muted-foreground\"\n                )}\n              >\n                {item.icon}\n                <span className=\"text-[10px] mt-1\">{item.label}</span>\n              </div>\n            </Link>\n          );\n        })}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":3429},"client/src/components/layout/desktop-container.tsx":{"content":"import { ReactNode } from \"react\";\n\ninterface DesktopContainerProps {\n  children: ReactNode;\n}\n\nexport function DesktopContainer({ children }: DesktopContainerProps) {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {children}\n    </div>\n  );\n}","size_bytes":262},"client/src/components/layout/mobile-container.tsx":{"content":"import { ReactNode } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\n\ninterface MobileContainerProps {\n  children: ReactNode;\n  className?: string;\n}\n\nexport function MobileContainer({ children, className }: MobileContainerProps) {\n  const isMobile = useIsMobile();\n  \n  return (\n    <div className=\"min-h-screen bg-background flex justify-center w-full\">\n      <div \n        className={cn(\n          \"min-h-screen w-full max-w-md bg-background relative\",\n          !isMobile && \"shadow-xl\",\n          className\n        )}\n      >\n        {children}\n      </div>\n    </div>\n  );\n}\n","size_bytes":631},"client/src/components/layout/top-navigation.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLocation } from \"wouter\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport { formatCurrency } from \"@/lib/formatters\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\ninterface TopNavigationProps {\n  title?: string;\n  showBackButton?: boolean;\n  onBack?: () => void;\n  actionButton?: React.ReactNode;\n}\n\nexport function TopNavigation({ title = \"ASIA PLUS\", showBackButton = false, onBack, actionButton }: TopNavigationProps) {\n  const { user, logoutMutation } = useAuth();\n  const [, setLocation] = useLocation();\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n    setLocation(\"/auth\");\n  };\n\n  const getInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map((n) => n[0])\n      .join(\"\")\n      .toUpperCase();\n  };\n\n  return (\n    <nav className=\"sticky top-0 z-10 bg-card/80 backdrop-blur-sm border-b border-border py-3\">\n      <div className=\"flex justify-between items-center px-4\">\n        <div className=\"flex items-center\">\n          {showBackButton && (\n            <button onClick={onBack} className=\"mr-3\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"w-5 h-5\">\n                <path d=\"m15 18-6-6 6-6\" />\n              </svg>\n            </button>\n          )}\n          <div className=\"text-xl font-bold flex items-center\">\n            <img \n              src=\"https://cdn2.downdetector.com/static/uploads/c/300/e49bc/Asia_Plus_Securities.png\" \n              alt=\"โลโก้ ASIA PLUS\" \n              className=\"h-10 mr-2\" \n            />\n            <span className={title === \"ASIA PLUS\" ? \"hidden\" : \"\"}>{title}</span>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-2\">\n          <ThemeToggle />\n          \n          {actionButton ? (\n            <div>{actionButton}</div>\n          ) : !user ? (\n            <a \n              href=\"https://line.me/ti/p/~@231luwnq\" \n              target=\"_blank\" \n              rel=\"noopener noreferrer\"\n              className=\"flex items-center\"\n            >\n              <Button\n                variant=\"default\"\n                size=\"sm\"\n                className=\"flex items-center gap-1 bg-[#06C755] hover:bg-[#06B048] text-white\"\n              >\n                <svg width=\"16\" height=\"16\" viewBox=\"0 0 32 32\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path d=\"M27 14.8751C27 10.3876 22.1813 6.75 16.2436 6.75C10.3059 6.75 5.48718 10.3876 5.48718 14.8751C5.48718 18.8658 9.24563 22.1788 14.3655 22.8837C14.6996 22.9479 15.1534 23.0816 15.2471 23.3643C15.3323 23.6204 15.2898 24.0273 15.2471 24.3176C15.2471 24.3176 15.0981 25.1495 15.0639 25.2995C15.0087 25.5528 14.8172 26.3792 16.2436 25.7954C17.6699 25.2116 23.5492 21.5292 26.0005 18.5304L26.0016 18.5288C26.664 17.4625 27 16.2059 27 14.8751Z\"/>\n                  <path d=\"M13.2082 13.3209H12.4059C12.2452 13.3209 12.1145 13.4516 12.1145 13.6123V17.8724C12.1145 18.0332 12.2452 18.1639 12.4059 18.1639H13.2082C13.369 18.1639 13.4997 18.0332 13.4997 17.8724V13.6123C13.4997 13.4516 13.369 13.3209 13.2082 13.3209Z\"/>\n                  <path d=\"M20.12 13.3209H19.3178C19.157 13.3209 19.0264 13.4516 19.0264 13.6123V17.8724C19.0264 18.0332 19.157 18.1639 19.3178 18.1639H20.12C20.2808 18.1639 20.4115 18.0332 20.4115 17.8724V13.6123C20.4115 13.4516 20.2808 13.3209 20.12 13.3209Z\"/>\n                  <path d=\"M16.6642 13.3209H15.862C15.7012 13.3209 15.5705 13.4516 15.5705 13.6123V16.1896L13.9505 13.4478C13.9447 13.4385 13.9382 13.4293 13.9312 13.4206L13.9282 13.4169C13.9227 13.4097 13.9167 13.4029 13.9102 13.3964L13.9067 13.3927C13.9015 13.3875 13.896 13.3824 13.8903 13.3777L13.8865 13.3747C13.881 13.3704 13.8755 13.3664 13.8697 13.3627C13.867 13.3612 13.864 13.36 13.861 13.3582C13.8555 13.3552 13.85 13.3524 13.8442 13.3497C13.8415 13.3487 13.8385 13.3474 13.8357 13.3462C13.83 13.3437 13.8245 13.3414 13.8187 13.3394C13.816 13.3384 13.8132 13.3372 13.8102 13.3364C13.8045 13.3344 13.7987 13.3329 13.7932 13.3314C13.7902 13.3307 13.7875 13.3299 13.7845 13.3292C13.7785 13.3279 13.7727 13.3267 13.7667 13.3259C13.764 13.3254 13.761 13.3252 13.7582 13.3249C13.752 13.3242 13.746 13.3239 13.7397 13.3234C13.7367 13.3234 13.734 13.3232 13.731 13.3229C13.7252 13.3229 13.7195 13.3227 13.7137 13.3227C13.7077 13.3227 13.702 13.3227 13.696 13.3229C13.6932 13.3229 13.6902 13.3232 13.6875 13.3232C13.6817 13.3234 13.676 13.3239 13.67 13.3242C13.667 13.3244 13.6642 13.3247 13.6612 13.3249C13.6555 13.3254 13.6497 13.3264 13.644 13.3272C13.641 13.3274 13.638 13.3279 13.635 13.3282C13.6292 13.3292 13.6235 13.3302 13.618 13.3312C13.615 13.3317 13.612 13.3322 13.609 13.3329C13.6035 13.3339 13.5982 13.3354 13.593 13.3367C13.5895 13.3374 13.5865 13.3382 13.5835 13.3389C13.5782 13.3404 13.573 13.3419 13.5677 13.3434C13.5647 13.3444 13.5617 13.3452 13.5587 13.3462C13.5537 13.3479 13.5485 13.3499 13.5435 13.3517C13.5407 13.3527 13.5377 13.3537 13.5347 13.3549C13.5295 13.3569 13.5245 13.3592 13.5195 13.3614C13.5168 13.3627 13.5137 13.3637 13.5107 13.3649C13.5057 13.3674 13.5007 13.3697 13.496 13.3722C13.493 13.3737 13.4902 13.3749 13.4872 13.3762C13.4825 13.3789 13.4777 13.3817 13.4732 13.3844C13.4702 13.3859 13.4675 13.3874 13.4645 13.3889C13.4597 13.3919 13.4552 13.3949 13.4507 13.3979C13.448 13.3994 13.445 13.4011 13.4425 13.4029C13.438 13.4061 13.4335 13.4094 13.4292 13.4124C13.4265 13.4144 13.4235 13.4161 13.4212 13.4179C13.4167 13.4214 13.4125 13.4246 13.4082 13.4281C13.4057 13.4299 13.403 13.4316 13.4007 13.4334C13.3965 13.4371 13.3925 13.4409 13.3885 13.4446C13.3862 13.4464 13.3837 13.4481 13.3815 13.4501C13.3777 13.4541 13.3737 13.4581 13.3702 13.4621C13.3682 13.4641 13.3657 13.4661 13.3637 13.4679C13.36 13.4724 13.3565 13.4769 13.353 13.4814C13.351 13.4834 13.3487 13.4857 13.3467 13.4879C13.3435 13.4927 13.3402 13.4974 13.337 13.5022C13.353 13.5022 13.3365 13.5044 13.336 13.5051C13.336 13.5079 13.3342 13.5104 13.333 13.5129C13.34 13.5177 13.3272 13.5224 13.3242 13.5272C13.3222 13.5299 13.3205 13.5329 13.3187 13.5357C13.3157 13.5407 13.313 13.5454 13.3102 13.5504C13.3085 13.5534 13.307 13.5564 13.3052 13.5594C13.3025 13.5646 13.3 13.5699 13.2975 13.5751C13.296 13.5784 13.2945 13.5814 13.293 13.5846C13.2907 13.5899 13.2885 13.5957 13.2865 13.6013C13.2855 13.6045 13.2842 13.6075 13.2832 13.6108C13.2812 13.6168 13.2795 13.6226 13.278 13.6286C13.277 13.6318 13.2762 13.6351 13.2755 13.6383C13.274 13.6448 13.2727 13.6513 13.2715 13.6578C13.2707 13.6608 13.2702 13.6641 13.2697 13.6673C13.2687 13.6743 13.2682 13.6813 13.2677 13.6883C13.2672 13.6916 13.267 13.6948 13.2667 13.698C13.2662 13.7055 13.2662 13.7135 13.2662 13.7213C13.2662 13.7223 13.2662 13.7233 13.2662 13.7243V17.8724C13.2662 18.0332 13.3969 18.1639 13.5577 18.1639H14.3599C14.5207 18.1639 14.6514 18.0332 14.6514 17.8724V15.2952L16.2724 18.0394C16.2887 18.0667 16.309 18.0902 16.3325 18.1092C16.333 18.1095 16.3335 18.11 16.334 18.1105C16.3377 18.1132 16.3415 18.116 16.3452 18.1185C16.3482 18.1205 16.3512 18.1225 16.3542 18.1243C16.3577 18.1265 16.3615 18.1285 16.365 18.1305C16.3685 18.1325 16.372 18.1343 16.3755 18.136C16.379 18.1377 16.3825 18.1395 16.386 18.141C16.3897 18.1425 16.3937 18.1442 16.3975 18.1457C16.401 18.147 16.4045 18.1482 16.408 18.1492C16.4115 18.1502 16.415 18.1512 16.4185 18.1522C16.4222 18.1532 16.4262 18.1539 16.43 18.1547C16.4335 18.1554 16.437 18.1557 16.4405 18.1562C16.4445 18.1567 16.4482 18.1574 16.452 18.1577C16.4555 18.1579 16.459 18.1582 16.4625 18.1584C16.4662 18.1584 16.47 18.1589 16.4737 18.1589H16.4775C16.481 18.1589 16.4845 18.1589 16.488 18.1589C16.492 18.1587 16.496 18.1584 16.5 18.1579C16.5032 18.1577 16.5065 18.1572 16.5097 18.1569C16.5137 18.1564 16.5175 18.1557 16.5215 18.155C16.5247 18.1544 16.528 18.1539 16.5315 18.1532C16.5355 18.1524 16.5392 18.1514 16.543 18.1504C16.5462 18.1494 16.5495 18.1484 16.5527 18.1474C16.5567 18.1462 16.5602 18.1447 16.564 18.1432C16.5672 18.1422 16.5705 18.1409 16.5737 18.1397C16.5775 18.1382 16.581 18.1365 16.5845 18.1347C16.5877 18.1332 16.591 18.1317 16.594 18.1302C16.5977 18.1282 16.6015 18.1265 16.605 18.1242C16.608 18.1227 16.611 18.1209 16.614 18.1192C16.6177 18.1167 16.6212 18.1142 16.6247 18.1117C16.6275 18.1097 16.6305 18.1077 16.6332 18.1059C16.6367 18.1032 16.6402 18.1004 16.6437 18.0974C16.6465 18.0957 16.6492 18.0934 16.6517 18.0914C16.655 18.0884 16.6585 18.0852 16.6617 18.0822C16.6642 18.0799 16.667 18.0777 16.6695 18.0754C16.6727 18.0721 16.6762 18.0686 16.6792 18.0654C16.6815 18.0629 16.684 18.0604 16.6862 18.0579C16.6895 18.0544 16.6925 18.0506 16.6955 18.0471C16.6977 18.0444 16.7 18.0416 16.702 18.0391C16.705 18.0354 16.708 18.0316 16.7107 18.0279C16.7127 18.0251 16.715 18.0221 16.7167 18.0191C16.7195 18.0149 16.7222 18.0111 16.7247 18.0069C16.7267 18.0036 16.7287 18.0004 16.7305 17.9971C16.7327 17.9929 16.735 17.9886 16.7372 17.9846C16.7387 17.9811 16.7407 17.9778 16.7422 17.9743C16.7442 17.9703 16.7462 17.9661 16.748 17.9618C16.7495 17.9578 16.751 17.9541 16.7525 17.9501C16.754 17.9463 16.7555 17.9424 16.757 17.9384C16.758 17.9344 16.7592 17.9306 16.7605 17.9266C16.7617 17.9226 16.7632 17.9186 16.7642 17.9146C16.7652 17.9111 16.7662 17.9073 16.7672 17.9036C16.7682 17.8996 16.7692 17.8958 16.7702 17.8918C16.771 17.8881 16.7717 17.8843 16.7725 17.8806C16.7732 17.8768 16.774 17.8731 16.7747 17.8694C16.7752 17.8654 16.7757 17.8616 16.7762 17.8578C16.7767 17.8541 16.7772 17.8504 16.7775 17.8464C16.7777 17.8429 16.7782 17.8391 16.7785 17.8354C16.7787 17.8316 16.7787 17.8279 16.7787 17.8241C16.779 17.8204 16.779 17.8164 16.779 17.8127V13.6123C16.7787 13.4516 16.648 13.3209 16.4872 13.3209H16.6642Z\"/>\n                  <path d=\"M18.2235 14.5776H16.4467C16.2859 14.5776 16.1553 14.7082 16.1553 14.869C16.1553 15.0298 16.2859 15.1605 16.4467 15.1605H16.9984V17.8724C16.9984 18.0332 17.1291 18.1639 17.2899 18.1639H18.0921C18.2529 18.1639 18.3836 18.0332 18.3836 17.8724V15.1605H18.9353C19.0961 15.1605 19.2267 15.0298 19.2267 14.869C19.2267 14.7082 19.0961 14.5776 18.9353 14.5776H18.2235Z\"/>\n                </svg>\n                <span>ติดต่อไลน์</span>\n              </Button>\n            </a>\n          ) : (\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <div className=\"flex items-center cursor-pointer rounded-full bg-primary py-1 px-3 text-primary-foreground\">\n                  <span className=\"font-medium\">{formatCurrency(Number(user.balance))}</span>\n                </div>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <DropdownMenuItem className=\"font-medium\">{user.username}</DropdownMenuItem>\n                <DropdownMenuSeparator />\n                {(user.role === \"admin\" || user.role === \"agent\") && (\n                  <DropdownMenuItem onClick={() => setLocation(\"/admin\")}>\n                    หน้าแอดมิน\n                  </DropdownMenuItem>\n                )}\n                <DropdownMenuItem onClick={handleLogout} className=\"text-destructive\">\n                  ออกจากระบบ\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          )}\n        </div>\n      </div>\n    </nav>\n  );\n}","size_bytes":11605},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart-component.tsx":{"content":"import { useEffect, useRef } from 'react';\n\ninterface ChartComponentProps {\n  data: number[];\n  width?: number;\n  height?: number;\n  isPriceUp?: boolean;\n  className?: string;\n}\n\nexport function ChartComponent({ \n  data, \n  width = 100, \n  height = 40, \n  isPriceUp = true,\n  className = \"\"\n}: ChartComponentProps) {\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas || !data.length) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    const dpr = window.devicePixelRatio || 1;\n    const rect = canvas.getBoundingClientRect();\n\n    canvas.width = rect.width * dpr;\n    canvas.height = rect.height * dpr;\n    ctx.scale(dpr, dpr);\n\n    // Clear canvas\n    ctx.clearRect(0, 0, rect.width, rect.height);\n\n    // Create gradient\n    const gradient = ctx.createLinearGradient(0, 0, 0, rect.height);\n    \n    if (isPriceUp) {\n      gradient.addColorStop(0, 'rgba(0, 200, 83, 0.2)');\n      gradient.addColorStop(1, 'rgba(0, 200, 83, 0)');\n      ctx.strokeStyle = 'hsl(var(--chart-1))';\n    } else {\n      gradient.addColorStop(0, 'rgba(255, 61, 0, 0.2)');\n      gradient.addColorStop(1, 'rgba(255, 61, 0, 0)');\n      ctx.strokeStyle = 'hsl(var(--destructive))';\n    }\n    \n    ctx.beginPath();\n    \n    const minValue = Math.min(...data);\n    const maxValue = Math.max(...data);\n    const range = maxValue - minValue;\n    \n    // Calculate points\n    const step = rect.width / (data.length - 1);\n    \n    data.forEach((value, i) => {\n      const x = i * step;\n      let y;\n      \n      if (range === 0) {\n        // If all values are the same, draw a straight line in the middle\n        y = rect.height / 2;\n      } else {\n        // Normalize the data\n        y = rect.height - ((value - minValue) / range) * rect.height;\n      }\n      \n      if (i === 0) {\n        ctx.moveTo(x, y);\n      } else {\n        ctx.lineTo(x, y);\n      }\n    });\n    \n    // Fill area under the line\n    ctx.lineTo(rect.width, rect.height);\n    ctx.lineTo(0, rect.height);\n    ctx.fillStyle = gradient;\n    ctx.fill();\n  }, [data, isPriceUp]);\n\n  return (\n    <canvas \n      ref={canvasRef} \n      width={width} \n      height={height} \n      className={className} \n    />\n  );\n}\n","size_bytes":2260},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/data-table.tsx":{"content":"import {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\ninterface Column<T> {\n  key: keyof T | 'actions';\n  header: string;\n  width?: string;\n  cell?: (item: T) => React.ReactNode;\n}\n\ninterface DataTableProps<T> {\n  columns: Column<T>[];\n  data: T[];\n  title?: string;\n  isLoading?: boolean;\n  emptyMessage?: string;\n}\n\nexport function DataTable<T>({\n  columns,\n  data,\n  title,\n  isLoading = false,\n  emptyMessage = \"No data available\"\n}: DataTableProps<T>) {\n  return (\n    <Card>\n      {title && (\n        <CardHeader>\n          <CardTitle>{title}</CardTitle>\n        </CardHeader>\n      )}\n      <CardContent>\n        <Table>\n          <TableHeader>\n            <TableRow>\n              {columns.map((column) => (\n                <TableHead key={column.key as string} style={{ width: column.width }}>\n                  {column.header}\n                </TableHead>\n              ))}\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {isLoading ? (\n              <TableRow>\n                <TableCell colSpan={columns.length} className=\"text-center py-8\">\n                  <div className=\"flex justify-center\">\n                    <svg\n                      className=\"animate-spin h-6 w-6 text-primary\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      fill=\"none\"\n                      viewBox=\"0 0 24 24\"\n                    >\n                      <circle\n                        className=\"opacity-25\"\n                        cx=\"12\"\n                        cy=\"12\"\n                        r=\"10\"\n                        stroke=\"currentColor\"\n                        strokeWidth=\"4\"\n                      ></circle>\n                      <path\n                        className=\"opacity-75\"\n                        fill=\"currentColor\"\n                        d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n                      ></path>\n                    </svg>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ) : data.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={columns.length} className=\"text-center py-8 text-muted-foreground\">\n                  {emptyMessage}\n                </TableCell>\n              </TableRow>\n            ) : (\n              data.map((item, index) => (\n                <TableRow key={index}>\n                  {columns.map((column) => (\n                    <TableCell key={column.key as string}>\n                      {column.cell\n                        ? column.cell(item)\n                        : column.key !== 'actions'\n                        ? String(item[column.key as keyof T] ?? '')\n                        : null}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3108},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/market-bar-chart.tsx":{"content":"import { useState } from \"react\";\nimport { Card } from \"@/components/ui/card\";\n\ninterface MarketBarChartProps {\n  upCount: number;\n  downCount: number;\n  totalCount: number;\n}\n\nexport function MarketBarChart({ upCount, downCount, totalCount }: MarketBarChartProps) {\n  const upPercentage = totalCount ? (upCount / totalCount) * 100 : 0;\n  const downPercentage = totalCount ? (downCount / totalCount) * 100 : 0;\n  \n  return (\n    <div className=\"mt-3\">\n      <div className=\"flex text-xs mb-1 justify-between\">\n        <span className=\"text-[hsl(var(--chart-1))]\">{upPercentage.toFixed(0)}%</span>\n        <span className=\"text-destructive\">{downPercentage.toFixed(0)}%</span>\n      </div>\n      <div className=\"w-full h-2 bg-card border border-border rounded-full overflow-hidden flex\">\n        <div \n          className=\"h-full bg-[hsl(var(--chart-1))]\"\n          style={{ width: `${upPercentage}%` }}\n        />\n        <div \n          className=\"h-full bg-destructive\"\n          style={{ width: `${downPercentage}%` }}\n        />\n      </div>\n    </div>\n  );\n}","size_bytes":1063},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/price-card.tsx":{"content":"import { formatCurrency, formatPercentage } from \"@/lib/formatters\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { ChartComponent } from \"@/components/ui/chart-component\";\nimport { CryptoCurrency } from \"@shared/schema\";\n\ninterface PriceCardProps {\n  crypto: CryptoCurrency;\n  onClick?: () => void;\n  compact?: boolean;\n  className?: string;\n}\n\nexport function PriceCard({ crypto, onClick, compact = false, className = \"\" }: PriceCardProps) {\n  const isPriceUp = crypto.price_change_percentage_24h >= 0;\n  const priceData = crypto.sparkline_in_7d?.price || generateDummyData(isPriceUp);\n\n  // Format price with Thai Baht symbol\n  const formattedPrice = formatCurrency(crypto.current_price);\n\n  return (\n    <Card \n      className={`flex-shrink-0 w-full rounded-lg shadow-sm border-0 transition cursor-pointer bg-white dark:bg-card ${className}`}\n      onClick={onClick}\n    >\n      <CardContent className=\"py-1.5 px-3\">\n        <div className=\"flex justify-between items-center\">\n          <div className=\"flex items-center\">\n            <img\n              src={crypto.image}\n              alt={crypto.name}\n              className=\"w-6 h-6 rounded-full mr-2\"\n            />\n            <div className=\"flex flex-col space-y-1.5\">\n              <span className=\"text-xs font-bold leading-tight\">{crypto.symbol.toUpperCase()}/USDT</span>\n              <span className=\"text-[9px] font-semibold text-muted-foreground leading-tight\">{crypto.symbol.toUpperCase()}/USDT</span>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            <div className={isPriceUp ? \"crypto-price-up text-base font-bold leading-tight\" : \"crypto-price-down text-base font-bold leading-tight\"}>\n              {formattedPrice.replace('$', '')}\n            </div>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke={isPriceUp ? \"rgb(0, 200, 83)\" : \"rgb(255, 61, 0)\"} strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n              <polyline points=\"22 7 13.5 15.5 8.5 10.5 2 17\"></polyline>\n              <polyline points=\"16 7 22 7 22 13\"></polyline>\n            </svg>\n          </div>\n        </div>\n        \n        {!compact && (\n          <div className=\"mt-0.5 h-5\">\n            <ChartComponent \n              data={priceData} \n              isPriceUp={isPriceUp}\n              className=\"w-full h-full\"\n            />\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\n// Generate synthetic data for preview when no data is available\nfunction generateDummyData(isPositive: boolean): number[] {\n  const data = [];\n  let value = 0.5;\n  \n  for (let i = 0; i < 20; i++) {\n    if (isPositive) {\n      value += Math.random() * 0.05 - 0.02; // Slightly trending up\n    } else {\n      value += Math.random() * 0.05 - 0.03; // Slightly trending down\n    }\n    value = Math.max(0.1, Math.min(0.9, value)); // Keep within bounds\n    data.push(value);\n  }\n  \n  return data;\n}\n","size_bytes":3010},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/websocket.ts":{"content":"import { Server as SocketIOServer } from \"socket.io\";\nimport { Server as HttpServer } from \"http\";\nimport { DatabaseStorage } from \"./storage\";\nimport { getCryptoById } from \"./crypto-api\";\n\n// สร้าง storage instance\nconst storage = new DatabaseStorage();\n\nlet io: SocketIOServer | null = null;\n\nexport function setupWebSocket(server: HttpServer) {\n  io = new SocketIOServer(server, {\n    cors: {\n      origin: \"*\", // ในการพัฒนา สำหรับ production ควรกำหนด origin ที่ชัดเจน\n      methods: [\"GET\", \"POST\"]\n    }\n  });\n\n  io.on('connection', (socket) => {\n    console.log('User connected:', socket.id);\n\n    // เมื่อผู้ใช้เข้าร่วม room สำหรับการเทรด\n    socket.on('join-user-room', (userId) => {\n      socket.join(`user-${userId}`);\n      console.log(`User ${userId} joined their room`);\n    });\n\n    // เมื่อผู้ใช้ออกจากระบบ\n    socket.on('disconnect', () => {\n      console.log('User disconnected:', socket.id);\n    });\n  });\n\n  // เริ่มระบบ background processing สำหรับการเทรด\n  startTradeBackgroundProcessor();\n\n  return io;\n}\n\nexport function getSocketIO(): SocketIOServer | null {\n  return io;\n}\n\n// ฟังก์ชันสำหรับส่งข้อมูลการอัพเดทการเทรดไปยังผู้ใช้\nexport function notifyTradeUpdate(userId: number, trade: any) {\n  if (io) {\n    io.to(`user-${userId}`).emit('trade-update', trade);\n    console.log(`Trade update sent to user ${userId}:`, trade.id);\n  }\n}\n\n// ฟังก์ชันสำหรับส่งข้อมูลการอัพเดทยอดเงินไปยังผู้ใช้\nexport function notifyBalanceUpdate(userId: number, balance: string) {\n  if (io) {\n    io.to(`user-${userId}`).emit('balance-update', { balance });\n    console.log(`Balance update sent to user ${userId}:`, balance);\n  }\n}\n\n// Background processor สำหรับตรวจสอบและอัพเดทการเทรด\nasync function startTradeBackgroundProcessor() {\n  console.log('Starting trade background processor...');\n  \n  // ตรวจสอบการเทรดทุก 5 วินาที\n  setInterval(async () => {\n    try {\n      await processActiveTrades();\n    } catch (error) {\n      console.error('Error in trade background processor:', error);\n    }\n  }, 5000);\n}\n\nasync function processActiveTrades() {\n  try {\n    // ดึงการเทรดที่ยังคง active\n    const activeTrades = await storage.getActiveTrades();\n    \n    if (activeTrades.length > 0) {\n      console.log(`Processing ${activeTrades.length} active trades...`);\n    }\n    \n    for (const trade of activeTrades) {\n      const now = new Date();\n      const tradeCreatedAt = new Date(trade.createdAt);\n      const tradeEndTime = new Date(tradeCreatedAt.getTime() + (trade.duration * 1000));\n      \n      console.log(`Trade ${trade.id}: Created at ${tradeCreatedAt.toISOString()}, Ends at ${tradeEndTime.toISOString()}, Now: ${now.toISOString()}`);\n      \n      // ตรวจสอบว่าการเทรดหมดเวลาแล้วหรือยัง\n      if (now >= tradeEndTime) {\n        console.log(`Trade ${trade.id} has expired, processing...`);\n        await completeTrade(trade);\n      } else {\n        const timeLeft = tradeEndTime.getTime() - now.getTime();\n        console.log(`Trade ${trade.id} has ${Math.floor(timeLeft / 1000)} seconds left`);\n      }\n    }\n  } catch (error) {\n    console.error('Error processing active trades:', error);\n  }\n}\n\nasync function completeTrade(trade: any) {\n  try {\n    let result: 'win' | 'lose';\n    \n    // ตรวจสอบว่ามีการกำหนดผลล่วงหน้าหรือไม่\n    if (trade.predeterminedResult) {\n      result = trade.predeterminedResult;\n      console.log(`กำลังใช้ผลลัพธ์ที่กำหนดล่วงหน้า: ${result} สำหรับ Trade ID: ${trade.id}`);\n    } else {\n      // ดึงข้อมูลราคาปัจจุบันเฉพาะเมื่อไม่มีการกำหนดผลล่วงหน้า\n      const cryptoData = await getCryptoById(trade.cryptoId);\n      if (!cryptoData) {\n        console.error(`Failed to get crypto data for ${trade.cryptoId}`);\n        return;\n      }\n\n      const entryPrice = parseFloat(trade.entryPrice);\n      const currentPrice = cryptoData.current_price;\n      \n      // คำนวณผลลัพธ์ตามทิศทาง\n      if (trade.direction === 'up') {\n        result = currentPrice > entryPrice ? 'win' : 'lose';\n      } else {\n        result = currentPrice < entryPrice ? 'win' : 'lose';\n      }\n      \n      console.log(`คำนวณผลลัพธ์จากราคาจริง: ราคาเข้า ${entryPrice}, ราคาปัจจุบัน ${currentPrice}, ทิศทาง ${trade.direction}`);\n    }\n\n    console.log(`กำลังอัพเดทสถานะการเทรด ID: ${trade.id} เป็น completed ผลลัพธ์: ${result}`);\n\n    // อัพเดทการเทรดในฐานข้อมูล\n    const updatedTrade = await storage.updateTradeStatus(trade.id, 'completed', result);\n    \n    if (updatedTrade) {\n      // คำนวณกำไร/ขาดทุนและอัพเดทยอดเงินผู้ใช้\n      if (result === 'win') {\n        const profit = parseFloat(trade.amount) * (parseFloat(trade.profitPercentage) / 100);\n        const newBalance = await updateUserBalanceAfterTrade(trade.userId, parseFloat(trade.amount), profit);\n        console.log(`การเทรดที่ชนะ: เงินลงทุน ${trade.amount}, กำไร ${profit}, ยอดเงินใหม่ ${newBalance}`);\n        \n        // ส่งการอัพเดทผ่าน WebSocket\n        notifyBalanceUpdate(trade.userId, newBalance.toString());\n      } else {\n        console.log(`การเทรดที่แพ้: เงินลงทุน ${trade.amount} หายไป`);\n      }\n\n      // ส่งการอัพเดทการเทรดผ่าน WebSocket\n      notifyTradeUpdate(trade.userId, updatedTrade);\n      \n      // ส่งการอัปเดตไปยังทุกผู้ใช้ที่เชื่อมต่ออยู่ (สำหรับ global trade status)\n      if (io) {\n        io.emit('trade-completed', {\n          tradeId: trade.id,\n          userId: trade.userId,\n          result: result,\n          status: 'completed'\n        });\n      }\n    }\n  } catch (error) {\n    console.error(`Error completing trade ${trade.id}:`, error);\n  }\n}\n\nasync function updateUserBalanceAfterTrade(userId: number, investmentAmount: number, profit: number): Promise<number> {\n  try {\n    const currentBalance = await storage.getUserBalance(userId);\n    const currentBalanceFloat = parseFloat(currentBalance);\n    \n    // เพิ่มเงินลงทุนกลับและเพิ่มกำไร\n    const newBalance = currentBalanceFloat + investmentAmount + profit;\n    \n    await storage.updateUserBalance(userId, newBalance.toString());\n    return newBalance;\n  } catch (error) {\n    console.error('Error updating user balance after trade:', error);\n    throw error;\n  }\n}","size_bytes":7628},"client/src/contexts/websocket-context.tsx":{"content":"import { createContext, useContext, useEffect, useState } from 'react';\nimport { io, Socket } from 'socket.io-client';\nimport { useQuery } from '@tanstack/react-query';\nimport type { Trade } from '@shared/schema';\nimport { useAuth } from '@/hooks/use-auth';\n\ninterface WebSocketContextType {\n  socket: Socket | null;\n  isConnected: boolean;\n  trades: Trade[];\n  refreshTrades: () => void;\n}\n\nconst WebSocketContext = createContext<WebSocketContextType>({\n  socket: null,\n  isConnected: false,\n  trades: [],\n  refreshTrades: () => {}\n});\n\nexport function useWebSocket() {\n  return useContext(WebSocketContext);\n}\n\ninterface WebSocketProviderProps {\n  children: React.ReactNode;\n}\n\nexport function WebSocketProvider({ children }: WebSocketProviderProps) {\n  const { user } = useAuth();\n  const userId = user?.id;\n  const [socket, setSocket] = useState<Socket | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [trades, setTrades] = useState<Trade[]>([]);\n\n  // Query สำหรับ trades ของผู้ใช้\n  const { data: userTrades = [], refetch: refetchTrades } = useQuery({\n    queryKey: ['/api/trades'],\n    enabled: !!userId,\n  });\n\n  useEffect(() => {\n    if (userTrades && Array.isArray(userTrades)) {\n      setTrades(userTrades);\n    }\n  }, [userTrades]);\n\n  useEffect(() => {\n    // สร้าง WebSocket connection\n    const newSocket = io('/', {\n      transports: ['websocket', 'polling']\n    });\n\n    setSocket(newSocket);\n\n    // Event handlers\n    newSocket.on('connect', () => {\n      console.log('WebSocket connected');\n      setIsConnected(true);\n      \n      // เข้าร่วม room ของผู้ใช้\n      if (userId) {\n        newSocket.emit('join-user-room', userId);\n      }\n    });\n\n    newSocket.on('disconnect', () => {\n      console.log('WebSocket disconnected');\n      setIsConnected(false);\n    });\n\n    // รับการอัปเดตการเทรด\n    newSocket.on('trade-updated', (updatedTrade: Trade) => {\n      console.log('Trade updated:', updatedTrade);\n      \n      setTrades(prevTrades => {\n        const updatedTrades = prevTrades.map(trade => \n          trade.id === updatedTrade.id ? updatedTrade : trade\n        );\n        \n        // ถ้าไม่เจอการเทรดที่อัปเดต ให้เพิ่มเข้าไป (ในกরณีที่เป็นการเทรดใหม่)\n        if (!prevTrades.find(trade => trade.id === updatedTrade.id)) {\n          return [...updatedTrades, updatedTrade];\n        }\n        \n        return updatedTrades;\n      });\n      \n      // Refresh trades query เพื่อให้แน่ใจว่าข้อมูลถูกต้อง\n      setTimeout(() => {\n        refetchTrades();\n      }, 100);\n    });\n\n    // รับการอัปเดตการเทรดที่เสร็จสิ้น\n    newSocket.on('trade-completed', (completedTradeInfo) => {\n      console.log('Trade completed:', completedTradeInfo);\n      \n      // รีเฟรชข้อมูลการเทรดทันที\n      setTimeout(() => {\n        refetchTrades();\n      }, 100);\n      \n      // อัปเดต local state โดยการลบการเทรดที่เสร็จแล้วออกจาก active trades\n      setTrades(prevTrades => \n        prevTrades.filter(trade => trade.id !== completedTradeInfo.tradeId)\n      );\n    });\n\n    return () => {\n      newSocket.close();\n    };\n  }, [userId]);\n\n  const refreshTrades = () => {\n    refetchTrades();\n  };\n\n  return (\n    <WebSocketContext.Provider value={{\n      socket,\n      isConnected,\n      trades,\n      refreshTrades\n    }}>\n      {children}\n    </WebSocketContext.Provider>\n  );\n}","size_bytes":3802},"client/src/components/global-trade-status.tsx":{"content":"import { useState } from 'react';\nimport { useWebSocket } from '@/contexts/websocket-context';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  Dialog, \n  DialogContent, \n  DialogHeader, \n  DialogTitle,\n  DialogTrigger\n} from '@/components/ui/dialog';\nimport { \n  Activity, \n  Wifi, \n  WifiOff, \n  TrendingUp, \n  TrendingDown,\n  Clock,\n  Eye\n} from 'lucide-react';\nimport { TradeCountdown } from './trade-countdown';\nimport { formatCurrency } from '@/lib/formatters';\n\nexport function GlobalTradeStatus() {\n  const { isConnected, trades } = useWebSocket();\n  const [isOpen, setIsOpen] = useState(false);\n  \n  // ฟิลเตอร์การเทรดที่กำลังดำเนินอยู่\n  const activeTrades = trades.filter(trade => trade.status === 'active');\n  \n  // ถ้าไม่มีการเทรดใดๆ ให้ซ่อน component\n  if (activeTrades.length === 0) {\n    return null;\n  }\n\n  return (\n    <>\n      {/* แสดงสถานะการเทรดแบบลอย */}\n      <div className=\"fixed bottom-4 right-4 z-50\">\n        <Card className=\"bg-background/95 backdrop-blur-sm border shadow-lg\">\n          <CardContent className=\"p-3\">\n            <div className=\"flex items-center gap-2\">\n              {/* สถานะการเชื่อมต่อ */}\n              <div className=\"flex items-center gap-1\">\n                {isConnected ? (\n                  <Wifi className=\"h-4 w-4 text-green-500\" />\n                ) : (\n                  <WifiOff className=\"h-4 w-4 text-red-500\" />\n                )}\n              </div>\n              \n              {/* จำนวนการเทรดที่กำลังดำเนินอยู่ */}\n              <div className=\"flex items-center gap-1\">\n                <Activity className=\"h-4 w-4 text-blue-500\" />\n                <span className=\"text-sm font-medium\">{activeTrades.length}</span>\n                <span className=\"text-xs text-muted-foreground\">trades</span>\n              </div>\n              \n              {/* ปุ่มดูรายละเอียด */}\n              <Dialog open={isOpen} onOpenChange={setIsOpen}>\n                <DialogTrigger asChild>\n                  <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-trades\">\n                    <Eye className=\"h-4 w-4\" />\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n                  <DialogHeader>\n                    <DialogTitle className=\"flex items-center gap-2\">\n                      <Activity className=\"h-5 w-5 text-blue-500\" />\n                      การเทรดที่กำลังดำเนินอยู่ ({activeTrades.length})\n                    </DialogTitle>\n                  </DialogHeader>\n                  \n                  <div className=\"space-y-4\">\n                    {/* สถานะการเชื่อมต่อ */}\n                    <div className=\"flex items-center gap-2 p-3 rounded-lg bg-muted/50\">\n                      {isConnected ? (\n                        <>\n                          <Wifi className=\"h-4 w-4 text-green-500\" />\n                          <span className=\"text-sm text-green-600\">เชื่อมต่อ Real-time แล้ว</span>\n                        </>\n                      ) : (\n                        <>\n                          <WifiOff className=\"h-4 w-4 text-red-500\" />\n                          <span className=\"text-sm text-red-600\">ไม่สามารถเชื่อมต่อ Real-time ได้</span>\n                        </>\n                      )}\n                    </div>\n                    \n                    {/* รายการการเทรด */}\n                    {activeTrades.map((trade) => (\n                      <Card key={trade.id} className=\"relative\">\n                        <CardHeader className=\"pb-2\">\n                          <CardTitle className=\"text-base flex items-center justify-between\">\n                            <div className=\"flex items-center gap-2\">\n                              <span className=\"font-bold\">{trade.cryptoId?.toUpperCase()}</span>\n                              <Badge variant={trade.direction === 'up' ? 'default' : 'destructive'}>\n                                {trade.direction === 'up' ? (\n                                  <TrendingUp className=\"h-3 w-3 mr-1\" />\n                                ) : (\n                                  <TrendingDown className=\"h-3 w-3 mr-1\" />\n                                )}\n                                {trade.direction === 'up' ? 'ขาขึ้น' : 'ขาลง'}\n                              </Badge>\n                            </div>\n                            <Badge variant=\"outline\">\n                              <Clock className=\"h-3 w-3 mr-1\" />\n                              {Math.floor((trade.duration || 0) / 60)}:{String((trade.duration || 0) % 60).padStart(2, '0')}\n                            </Badge>\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"space-y-3\">\n                          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                            <div>\n                              <span className=\"text-muted-foreground\">จำนวนเงิน:</span>\n                              <div className=\"font-medium\" data-testid={`text-amount-${trade.id}`}>\n                                {formatCurrency(parseFloat(trade.amount || '0'))}\n                              </div>\n                            </div>\n                            <div>\n                              <span className=\"text-muted-foreground\">ราคาเข้า:</span>\n                              <div className=\"font-medium\" data-testid={`text-entry-price-${trade.id}`}>\n                                ${parseFloat(trade.entryPrice || '0').toLocaleString()}\n                              </div>\n                            </div>\n                          </div>\n                          \n                          {/* Countdown timer */}\n                          {trade.endTime && (\n                            <div className=\"mt-4\">\n                              <TradeCountdown\n                                duration={trade.duration || 60}\n                                entryPrice={parseFloat(trade.entryPrice || '0')}\n                                amount={parseFloat(trade.amount || '0')}\n                                direction={trade.direction as \"up\" | \"down\"}\n                                profitPercentage={parseInt(trade.profitPercentage || '30')}\n                                cryptoSymbol={trade.cryptoId?.toUpperCase() || 'BTC'}\n                                endTime={trade.endTime}\n                                onComplete={() => {\n                                  // อัปเดตข้อมูลหลังจากการเทรดเสร็จสิ้น\n                                  console.log(`Trade ${trade.id} completed`);\n                                }}\n                              />\n                            </div>\n                          )}\n                        </CardContent>\n                      </Card>\n                    ))}\n                    \n                    {activeTrades.length === 0 && (\n                      <div className=\"text-center py-8 text-muted-foreground\">\n                        ไม่มีการเทรดที่กำลังดำเนินอยู่\n                      </div>\n                    )}\n                  </div>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </>\n  );\n}","size_bytes":8021}},"version":1}